[
  {
    "path": "Makefile",
    "content": "localup:\n\t@echo \"Building and running local compose setup\"\n\tdocker compose stop\n\tdocker compose -f local.compose.yml up --build -d\n"
  },
  {
    "path": ".gitignore",
    "content": "**/__pycache__\n**/.venv\n**/node_modules\n**/.DS_Store\n**/.idea"
  },
  {
    "path": "compose.yaml",
    "content": "services:\n  backend:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile\n    container_name: wb-backend\n    command: [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\" ]\n    restart: unless-stopped\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - /etc/timezone:/etc/timezone:ro\n      - ~/upload/:/app/upload/\n\n  bot:\n    build:\n      context: ./bot\n      dockerfile: Dockerfile\n    container_name: wb-bot\n    command: [ \"python3\", \"main.py\" ]\n    restart: unless-stopped\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - /etc/timezone:/etc/timezone:ro\n\n  db:\n    image: postgres:17\n    container_name: wb-db\n    env_file: .env\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n      - /etc/localtime:/etc/localtime:ro\n      - /etc/timezone:/etc/timezone:ro\n\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile\n    container_name: wb-frontend\n    restart: unless-stopped\n    volumes:\n      - \"./frontend/public:/app/public\"\n\n  notificator:\n    build:\n      context: ./notificator\n      dockerfile: Dockerfile\n    command: [ \"python3\", \"main.py\" ]\n    restart: unless-stopped\n    volumes:\n      - ~/upload/:/app/upload/\n\n\nvolumes:\n  postgres_data:\n\ninclude:\n  - ./nginx/compose.yaml\n"
  },
  {
    "path": "local.compose.yml",
    "content": "services:\n  backend:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile\n    container_name: wb-backend\n    command: [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\" ]\n    restart: unless-stopped\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - /etc/timezone:/etc/timezone:ro\n      - ./backend/migrations/versions/:/app/migrations/versions/\n      - ./backend/upload/:/app/upload/\n    ports:\n      - \"9090:8080\"\n  bot:\n    build:\n      context: ./bot\n      dockerfile: Dockerfile\n    container_name: wb-bot\n    command: [ \"python3\", \"main.py\" ]\n    restart: unless-stopped\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - /etc/timezone:/etc/timezone:ro\n  db:\n    image: postgres:17\n    container_name: wb-db\n    env_file: .env\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n      - /etc/localtime:/etc/localtime:ro\n      - /etc/timezone:/etc/timezone:ro\n\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile.dev\n    container_name: wb-frontend\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - \"./frontend/public:/app/public\"\n  notificator:\n    build:\n      context: ./notificator\n      dockerfile: Dockerfile\n    command: [ \"python3\", \"main.py\" ]\n    restart: unless-stopped\n    volumes:\n      - ./backend/upload/:/app/upload/\n\n\nvolumes:\n  postgres_data:\n"
  },
  {
    "path": "collected_py_files.json",
    "content": "[\n  {\n    \"path\": \"Makefile\",\n    \"content\": \"localup:\\n\\t@echo \\\"Building and running local compose setup\\\"\\n\\tdocker compose stop\\n\\tdocker compose -f local.compose.yml up --build -d\\n\"\n  },\n  {\n    \"path\": \".gitignore\",\n    \"content\": \"**/__pycache__\\n**/.venv\\n**/node_modules\\n**/.DS_Store\\n**/.idea\"\n  },\n  {\n    \"path\": \"compose.yaml\",\n    \"content\": \"services:\\n  backend:\\n    build:\\n      context: ./backend\\n      dockerfile: Dockerfile\\n    container_name: wb-backend\\n    command: [ \\\"uvicorn\\\", \\\"main:app\\\", \\\"--host\\\", \\\"0.0.0.0\\\", \\\"--port\\\", \\\"8080\\\" ]\\n    restart: unless-stopped\\n    volumes:\\n      - /etc/localtime:/etc/localtime:ro\\n      - /etc/timezone:/etc/timezone:ro\\n      - ~/upload/:/app/upload/\\n\\n  bot:\\n    build:\\n      context: ./bot\\n      dockerfile: Dockerfile\\n    container_name: wb-bot\\n    command: [ \\\"python3\\\", \\\"main.py\\\" ]\\n    restart: unless-stopped\\n    volumes:\\n      - /etc/localtime:/etc/localtime:ro\\n      - /etc/timezone:/etc/timezone:ro\\n\\n  db:\\n    image: postgres:17\\n    container_name: wb-db\\n    env_file: .env\\n    ports:\\n      - \\\"5432:5432\\\"\\n    restart: unless-stopped\\n    volumes:\\n      - postgres_data:/var/lib/postgresql/data/\\n      - /etc/localtime:/etc/localtime:ro\\n      - /etc/timezone:/etc/timezone:ro\\n\\n  frontend:\\n    build:\\n      context: ./frontend\\n      dockerfile: Dockerfile\\n    container_name: wb-frontend\\n    restart: unless-stopped\\n    volumes:\\n      - \\\"./frontend/public:/app/public\\\"\\n\\n  notificator:\\n    build:\\n      context: ./notificator\\n      dockerfile: Dockerfile\\n    command: [ \\\"python3\\\", \\\"main.py\\\" ]\\n    restart: unless-stopped\\n    volumes:\\n      - ~/upload/:/app/upload/\\n\\n\\nvolumes:\\n  postgres_data:\\n\\ninclude:\\n  - ./nginx/compose.yaml\\n\"\n  },\n  {\n    \"path\": \"local.compose.yml\",\n    \"content\": \"services:\\n  backend:\\n    build:\\n      context: ./backend\\n      dockerfile: Dockerfile\\n    container_name: wb-backend\\n    command: [ \\\"uvicorn\\\", \\\"main:app\\\", \\\"--host\\\", \\\"0.0.0.0\\\", \\\"--port\\\", \\\"8080\\\" ]\\n    restart: unless-stopped\\n    volumes:\\n      - /etc/localtime:/etc/localtime:ro\\n      - /etc/timezone:/etc/timezone:ro\\n      - ./backend/migrations/versions/:/app/migrations/versions/\\n      - ./backend/upload/:/app/upload/\\n    ports:\\n      - \\\"9090:8080\\\"\\n  bot:\\n    build:\\n      context: ./bot\\n      dockerfile: Dockerfile\\n    container_name: wb-bot\\n    command: [ \\\"python3\\\", \\\"main.py\\\" ]\\n    restart: unless-stopped\\n    volumes:\\n      - /etc/localtime:/etc/localtime:ro\\n      - /etc/timezone:/etc/timezone:ro\\n  db:\\n    image: postgres:17\\n    container_name: wb-db\\n    env_file: .env\\n    ports:\\n      - \\\"5432:5432\\\"\\n    restart: unless-stopped\\n    volumes:\\n      - postgres_data:/var/lib/postgresql/data/\\n      - /etc/localtime:/etc/localtime:ro\\n      - /etc/timezone:/etc/timezone:ro\\n\\n  frontend:\\n    build:\\n      context: ./frontend\\n      dockerfile: Dockerfile.dev\\n    container_name: wb-frontend\\n    restart: unless-stopped\\n    ports:\\n      - \\\"3000:3000\\\"\\n    volumes:\\n      - \\\"./frontend/public:/app/public\\\"\\n  notificator:\\n    build:\\n      context: ./notificator\\n      dockerfile: Dockerfile\\n    command: [ \\\"python3\\\", \\\"main.py\\\" ]\\n    restart: unless-stopped\\n    volumes:\\n      - ./backend/upload/:/app/upload/\\n\\n\\nvolumes:\\n  postgres_data:\\n\"\n  },\n  {\n    \"path\": \"scrape.py\",\n    \"content\": \"#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nScript to collect all .py files in a project, excluding specified files and directories,\\nand write their names and contents to an output file in JSON format.\\n\\\"\\\"\\\"\\n\\nimport os\\nimport fnmatch\\nimport json\\nimport argparse\\n\\n\\ndef parse_args():\\n    parser = argparse.ArgumentParser(\\n        description=\\\"Collect .py files from a project, excluding specified patterns.\\\"\\n    )\\n    parser.add_argument(\\n        \\\"root_dir\\\",\\n        nargs=\\\"?\\\",\\n        default=\\\".\\\",\\n        help=\\\"Root directory of the project (default: current directory).\\\"\\n    )\\n    parser.add_argument(\\n        \\\"-o\\\", \\\"--output\\\",\\n        default=\\\"collected_py_files.json\\\",\\n        help=\\\"Output file to write the collected data (default: collected_py_files.json).\\\"\\n    )\\n    parser.add_argument(\\n        \\\"--exclude-files\\\",\\n        nargs=\\\"*\\\",\\n        default=[\\\"*.lock\\\", \\\"*~\\\", '.DS_Store', '*.png', '*.ico', '*.jpg', '*.env'],\\n        help=\\\"File patterns to exclude (default: ['*.lock', '*~']).\\\"\\n    )\\n    parser.add_argument(\\n        \\\"--exclude-dirs\\\",\\n        nargs=\\\"*\\\",\\n        default=[\\\"__pycache__\\\", \\\".git\\\", \\\"node_modules\\\", \\\".venv\\\", 'upload', 'fonts', 'icons', 'images', '.yarn', '.idea'],\\n        help=\\\"Directory names to exclude (default: ['__pycache__', '.git', 'node_modules']).\\\"\\n    )\\n    return parser.parse_args()\\n\\n\\ndef should_exclude(name, patterns):\\n    \\\"\\\"\\\"Check if a filename or directory matches any of the exclusion patterns.\\\"\\\"\\\"\\n    return any(fnmatch.fnmatch(name, pat) for pat in patterns)\\n\\n\\ndef collect_py_files(root_dir, exclude_files, exclude_dirs):\\n    collected = []\\n    for dirpath, dirnames, filenames in os.walk(root_dir):\\n        # Exclude specified directories in-place to avoid descending into them\\n        dirnames[:] = [d for d in dirnames if not should_exclude(d, exclude_dirs)]\\n        for filename in filenames:\\n            # Only .py files\\n            # if not filename.endswith(\\\".py\\\"):\\n            #     continue\\n            # Skip excluded file patterns\\n            if should_exclude(filename, exclude_files):\\n                continue\\n            full_path = os.path.join(dirpath, filename)\\n            try:\\n                with open(full_path, \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n                    content = f.read()\\n            except Exception as e:\\n                print(f\\\"Warning: Could not read {full_path}: {e}\\\")\\n                continue\\n            rel_path = os.path.relpath(full_path, root_dir)\\n            collected.append({\\n                \\\"path\\\": rel_path,\\n                \\\"content\\\": content\\n            })\\n    return collected\\n\\n\\ndef main():\\n    args = parse_args()\\n    data = collect_py_files(args.root_dir, args.exclude_files, args.exclude_dirs)\\n    with open(args.output, \\\"w\\\", encoding=\\\"utf-8\\\") as out_f:\\n        json.dump(data, out_f, ensure_ascii=False, indent=2)\\n    print(f\\\"Collected {len(data)} .py files and wrote to {args.output}\\\")\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\"\n  },\n  {\n    \"path\": \"frontend/tailwind.config.js\",\n    \"content\": \"/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  content: [\\\"./src/**/*.{js,ts,jsx,tsx,mdx}\\\"],\\n  theme: {\\n    extend: {\\n      colors: {\\n        brand:       \\\"#4872db\\\",\\n        brand2:      \\\"#849cd6\\\",\\n        brandlight:  \\\"#adbbde\\\",\\n        brandlight2: \\\"#c8cedf\\\",\\n        white: \\\"#f9fcff\\\",\\n        white2: \\\"#e3e4da\\\",\\n      },\\n    },\\n\\n    linearGradientColors: theme => ({\\n      brand:      [theme(\\\"colors.brand\\\"),      theme(\\\"colors.brand2\\\")],\\n      brandlight: [theme(\\\"colors.brandlight\\\"), theme(\\\"colors.brandlight2\\\")],\\n      gray:       [theme(\\\"colors.gray.300\\\"),   theme(\\\"colors.gray.100\\\")],\\n      darkGray:       [theme(\\\"colors.gray.800\\\"),   theme(\\\"colors.gray.400\\\")],\\n      white:       [theme(\\\"colors.white\\\"),  theme(\\\"colors.white2\\\")],\\n    }),\\n\\n    radialGradientColors: theme => ({\\n      brand:      [theme(\\\"colors.brand\\\"),      theme(\\\"colors.brand2\\\")],\\n      brandlight: [theme(\\\"colors.brandlight\\\"), theme(\\\"colors.brandlight2\\\")],\\n      gray:       [theme(\\\"colors.gray.400\\\"),   theme(\\\"colors.gray.100\\\")],\\n      darkGray:       [theme(\\\"colors.gray.500\\\"),   theme(\\\"colors.gray.300\\\")],\\n      white:       [theme(\\\"colors.white\\\"),  theme(\\\"colors.white2\\\")],\\n    }),\\n\\n    // для конического\\n    conicGradientColors: theme => ({\\n      brand:      [theme(\\\"colors.brand\\\"),      theme(\\\"colors.brand2\\\")],\\n      brandlight: [theme(\\\"colors.brandlight\\\"), theme(\\\"colors.brandlight2\\\")],\\n      gray:       [theme(\\\"colors.gray.400\\\"),   theme(\\\"colors.gray.100\\\")],\\n      darkGray:       [theme(\\\"colors.gray.500\\\"),   theme(\\\"colors.gray.300\\\")],\\n      white:       [theme(\\\"colors.white\\\"),  theme(\\\"colors.white2\\\")],\\n    }),\\n\\n    keyframes: {\\n      borderShine: {\\n        '0%':   { transform: 'translateX(-100%)' },\\n        '100%': { transform: 'translateX(100%)' },\\n      },\\n      textShine: {\\n        '0%':   { 'background-position': '0% 50%' },\\n        '100%': { 'background-position': '200% 50%' },\\n      },\\n    },\\n    animation: {\\n      'once-border-shine': 'borderShine 1s ease-out forwards',\\n      'once-text-shine':   'textShine   1.5s ease-out forwards',\\n    },\\n    backgroundImage: {\\n      'shine-text':\\n          'linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.8) 50%, transparent 100%)',\\n    },\\n    backgroundSize: {\\n      '300%': '300% auto',\\n    },\\n  },\\n  variants: {\\n    backgroundImage:           ['responsive'],\\n    linearGradients:           ['responsive'],\\n    radialGradients:           ['responsive'],\\n    conicGradients:            ['responsive'],\\n    repeatingLinearGradients:  ['responsive'],\\n    repeatingRadialGradients:  ['responsive'],\\n    repeatingConicGradients:   ['responsive'],\\n  },\\n  plugins: [\\n    require('tailwindcss-gradients'),\\n    require('@tailwindcss/aspect-ratio'),\\n  ],\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/Dockerfile\",\n    \"content\": \"FROM node:20-alpine as build\\n\\nWORKDIR /app\\n\\nCOPY package.json yarn.lock ./\\nRUN yarn install --frozen-lockfile --network-timeout 300000\\n\\nCOPY . .\\nRUN yarn build\\n\\n# Stage 2: Serve with Nginx\\nFROM nginx:latest\\nCOPY --from=build /app/build /usr/share/nginx/html\\n# Copy our custom config file (make sure default.conf is in the same directory as your Dockerfile)\\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\\n\\nCMD [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"]\\n\"\n  },\n  {\n    \"path\": \"frontend/README.md\",\n    \"content\": \"# Getting Started with Create React App\\n\\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\\n\\n## Available Scripts\\n\\nIn the project directory, you can run:\\n\\n### `yarn start`\\n\\nRuns the app in the envelopment mode.\\\\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\\n\\nThe page will reload if you make edits.\\\\\\nYou will also see any lint errors in the console.\\n\\n### `yarn test`\\n\\nLaunches the test runner in the interactive watch mode.\\\\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\\n\\n### `yarn build`\\n\\nBuilds the app for production to the `build` folder.\\\\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\\n\\nThe build is minified and the filenames include the hashes.\\\\\\nYour app is ready to be deployed!\\n\\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\\n\\n### `yarn eject`\\n\\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\\n\\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\\n\\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\\n\\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\\n\\n## Learn More\\n\\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\\n\\nTo learn React, check out the [React documentation](https://reactjs.org/).\\n\"\n  },\n  {\n    \"path\": \"frontend/Dockerfile.dev\",\n    \"content\": \"# Dockerfile.env для фронтенда\\nFROM node:20-alpine\\n\\nWORKDIR /app\\n\\n# Копируем package.json и yarn.lock для установки зависимостей\\nCOPY package.json yarn.lock ./\\n\\n# Устанавливаем зависимости\\nRUN yarn install --frozen-lockfile --network-timeout 300000\\n\\n# Копируем весь проект\\nCOPY . .\\n\\nCOPY local.env .env\\n\\nEXPOSE 3000\\n\\nCMD [\\\"yarn\\\", \\\"start\\\"]\\n\"\n  },\n  {\n    \"path\": \"frontend/.gitignore\",\n    \"content\": \"# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\\n\\n# dependencies\\n/node_modules\\n/.pnp\\n.pnp.js\\n\\n# testing\\n/coverage\\n\\n# production\\n/build\\n\\n# misc\\n.DS_Store\\n.env.local\\n.env.envelopment.local\\n.env.test.local\\n.env.production.local\\n\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\n\"\n  },\n  {\n    \"path\": \"frontend/package.json\",\n    \"content\": \"{\\n  \\\"name\\\": \\\"frontend\\\",\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"private\\\": true,\\n  \\\"dependencies\\\": {\\n    \\\"@headlessui/react\\\": \\\"^2.2.2\\\",\\n    \\\"@telegram-apps/sdk\\\": \\\"^3.5.3\\\",\\n    \\\"@testing-library/dom\\\": \\\"^10.4.0\\\",\\n    \\\"@testing-library/jest-dom\\\": \\\"^6.6.3\\\",\\n    \\\"@testing-library/react\\\": \\\"^16.1.0\\\",\\n    \\\"@testing-library/user-event\\\": \\\"^13.2.1\\\",\\n    \\\"@types/jest\\\": \\\"^27.0.1\\\",\\n    \\\"@types/node\\\": \\\"^16.7.13\\\",\\n    \\\"@types/react\\\": \\\"^19.0.0\\\",\\n    \\\"@types/react-dom\\\": \\\"^19.0.0\\\",\\n    \\\"autoprefixer\\\": \\\"^10.4.20\\\",\\n    \\\"axios\\\": \\\"^1.8.3\\\",\\n    \\\"axios-auth-refresh\\\": \\\"^3.3.6\\\",\\n    \\\"eruda\\\": \\\"^3.4.1\\\",\\n    \\\"framer-motion\\\": \\\"^12.9.2\\\",\\n    \\\"lucide-react\\\": \\\"^0.503.0\\\",\\n    \\\"postcss\\\": \\\"^8.4.24\\\",\\n    \\\"react\\\": \\\"^19.0.0\\\",\\n    \\\"react-dom\\\": \\\"^19.0.0\\\",\\n    \\\"react-router-dom\\\": \\\"^7.3.0\\\",\\n    \\\"react-scripts\\\": \\\"5.0.1\\\",\\n    \\\"styled-components\\\": \\\"^6.1.17\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.15\\\",\\n    \\\"typescript\\\": \\\"^4.4.2\\\",\\n    \\\"usehooks-ts\\\": \\\"^3.1.1\\\",\\n    \\\"web-vitals\\\": \\\"^2.1.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"tailwind:init\\\": \\\"tailwindcss init -p\\\",\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  },\\n  \\\"eslintConfig\\\": {\\n    \\\"extends\\\": [\\n      \\\"react-app\\\",\\n      \\\"react-app/jest\\\"\\n    ]\\n  },\\n  \\\"browserslist\\\": {\\n    \\\"production\\\": [\\n      \\\">0.2%\\\",\\n      \\\"not dead\\\",\\n      \\\"not op_mini all\\\"\\n    ],\\n    \\\"development\\\": [\\n      \\\"last 1 chrome version\\\",\\n      \\\"last 1 firefox version\\\",\\n      \\\"last 1 safari version\\\"\\n    ]\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@tailwindcss/aspect-ratio\\\": \\\"^0.4.2\\\",\\n    \\\"@tailwindcss/line-clamp\\\": \\\"^0.4.4\\\",\\n    \\\"@types/styled-components\\\": \\\"^5.1.34\\\",\\n    \\\"tailwindcss-gradients\\\": \\\"^3.0.0\\\"\\n  }\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/tsconfig.json\",\n    \"content\": \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"ES6\\\",\\n    \\\"module\\\": \\\"ESNext\\\",\\n    \\\"jsx\\\": \\\"react-jsx\\\",\\n    \\\"allowSyntheticDefaultImports\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"moduleResolution\\\": \\\"Node\\\",\\n    \\\"esModuleInterop\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"forceConsistentCasingInFileNames\\\": true\\n  },\\n  \\\"include\\\": [\\\"src\\\"]\\n}\\n\\n\\n//{\\n//  \\\"compilerOptions\\\": {\\n//    \\\"target\\\": \\\"es5\\\",\\n//    \\\"lib\\\": [\\n//      \\\"dom\\\",\\n//      \\\"dom.iterable\\\",\\n//      \\\"esnext\\\"\\n//    ],\\n//    \\\"allowJs\\\": true,\\n//    \\\"skipLibCheck\\\": true,\\n//    \\\"esModuleInterop\\\": true,\\n//    \\\"allowSyntheticDefaultImports\\\": true,\\n//    \\\"strict\\\": true,\\n//    \\\"forceConsistentCasingInFileNames\\\": true,\\n//    \\\"noFallthroughCasesInSwitch\\\": true,\\n//    \\\"module\\\": \\\"esnext\\\",\\n//    \\\"moduleResolution\\\": \\\"node\\\",\\n//    \\\"resolveJsonModule\\\": true,\\n//    \\\"isolatedModules\\\": true,\\n//    \\\"noEmit\\\": true,\\n//    \\\"jsx\\\": \\\"react-jsx\\\"\\n//  },\\n//  \\\"include\\\": [\\n//    \\\"src\\\",\\n//    \\\"tailwind.config.ts\\\"\\n//  ]\\n//}\\n\"\n  },\n  {\n    \"path\": \"frontend/nginx.conf\",\n    \"content\": \"server {\\n    listen       80;\\n    server_name  _;\\n\\n    root   /usr/share/nginx/html;\\n    index  index.html;\\n\\n    location / {\\n        # First attempt to serve request as file, then as directory,\\n        # then fallback to index.html for client side routing.\\n        try_files $uri $uri/ /index.html;\\n    }\\n\\n    # Optionally, you can cache static resources\\n    location ~* \\\\.(?:ico|css|js|gif|jpe?g|png)$ {\\n        expires 1M;\\n        add_header Cache-Control \\\"public\\\";\\n    }\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/tailwindcss.d.ts\",\n    \"content\": \"declare module 'tailwindcss';\\n\"\n  },\n  {\n    \"path\": \"frontend/postcss.config.js\",\n    \"content\": \"module.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/public/index.html\",\n    \"content\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta name=\\\"viewport\\\" content=\\\"width=envice-width, initial-scale=1\\\" />\\n    <meta charset=\\\"utf-8\\\" />\\n    <link rel=\\\"icon\\\" href=\\\"%PUBLIC_URL%/favicon.ico\\\" />\\n    <link rel=\\\"stylesheet\\\" href=\\\"%PUBLIC_URL%/fonts/fonts.css\\\" />\\n    <meta name=\\\"theme-color\\\" content=\\\"#000000\\\" />\\n    <meta\\n      name=\\\"description\\\"\\n      content=\\\"Web site created using create-react-app\\\"\\n    />\\n    <link rel=\\\"apple-touch-icon\\\" href=\\\"%PUBLIC_URL%/logo192.png\\\" />\\n    <!--\\n      manifest.json provides metadata used when your web app is installed on a\\n      user's mobile envice or desktop. See https://ENVIRONMENTs.google.com/web/fundamentals/web-app-manifest/\\n    -->\\n    <link rel=\\\"manifest\\\" href=\\\"%PUBLIC_URL%/manifest.json\\\" />\\n    <!--\\n      Notice the use of %PUBLIC_URL% in the tags above.\\n      It will be replaced with the URL of the `public` folder during the build.\\n      Only files inside the `public` folder can be referenced from the HTML.\\n\\n      Unlike \\\"/favicon.ico\\\" or \\\"favicon.ico\\\", \\\"%PUBLIC_URL%/favicon.ico\\\" will\\n      work correctly both with client-side routing and a non-root public URL.\\n      Learn how to configure a non-root public URL by running `npm run build`.\\n    -->\\n    <title>React App</title>\\n    <script src=\\\"https://telegram.org/js/telegram-web-app.js\\\"></script>\\n  </head>\\n  <body>\\n    <noscript>You need to enable JavaScript to run this app.</noscript>\\n    <div id=\\\"root\\\"></div>\\n    <!--\\n      This HTML file is a template.\\n      If you open it directly in the browser, you will see an empty page.\\n\\n      You can add webfonts, meta tags, or analytics to this file.\\n      The build step will place the bundled scripts into the <body> tag.\\n\\n      To begin the envelopment, run `npm start` or `yarn start`.\\n      To create a production bundle, use `npm run build` or `yarn build`.\\n    -->\\n  </body>\\n</html>\\n\"\n  },\n  {\n    \"path\": \"frontend/public/manifest.json\",\n    \"content\": \"{\\n  \\\"short_name\\\": \\\"React App\\\",\\n  \\\"name\\\": \\\"Create React App Sample\\\",\\n  \\\"icons\\\": [\\n    {\\n      \\\"src\\\": \\\"favicon.ico\\\",\\n      \\\"sizes\\\": \\\"64x64 32x32 24x24 16x16\\\",\\n      \\\"type\\\": \\\"image/x-icon\\\"\\n    },\\n    {\\n      \\\"src\\\": \\\"logo192.png\\\",\\n      \\\"type\\\": \\\"image/png\\\",\\n      \\\"sizes\\\": \\\"192x192\\\"\\n    },\\n    {\\n      \\\"src\\\": \\\"logo512.png\\\",\\n      \\\"type\\\": \\\"image/png\\\",\\n      \\\"sizes\\\": \\\"512x512\\\"\\n    }\\n  ],\\n  \\\"start_url\\\": \\\".\\\",\\n  \\\"display\\\": \\\"standalone\\\",\\n  \\\"theme_color\\\": \\\"#000000\\\",\\n  \\\"background_color\\\": \\\"#ffffff\\\"\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/public/robots.txt\",\n    \"content\": \"# https://www.robotstxt.org/robotstxt.html\\nUser-agent: *\\nDisallow:\\n\"\n  },\n  {\n    \"path\": \"frontend/src/index.tsx\",\n    \"content\": \"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(\\n  document.getElementById('root') as HTMLElement\\n);\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\nreportWebVitals();\\n\"\n  },\n  {\n    \"path\": \"frontend/src/App.tsx\",\n    \"content\": \"import React, {useEffect} from 'react';\\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\\nimport HomePage from './pages/HomePage';\\nimport CatalogPage from './pages/CatalogPage';\\nimport SellerCabinet from \\\"./pages/SellerCabinet\\\";\\nimport MyProductsPage from \\\"./pages/MyProductsPage\\\";\\nimport CreateProductForm from \\\"./pages/CreateProductForm\\\";\\nimport CreateProductInfo from \\\"./pages/CreateProductInfo\\\";\\nimport { AuthProvider } from \\\"./contexts/auth\\\";\\nimport MyOrdersPage from \\\"./pages/MyOrdersPage\\\";\\nimport InstructionPage from \\\"./pages/order_flow/InstructionPage\\\";\\nimport CartScreenshotPage from \\\"./pages/order_flow/CartScreenshotPage\\\";\\nimport ProductFindPage from \\\"./pages/order_flow/ProductFindPage\\\";\\nimport ProductFavoritePage from \\\"./pages/order_flow/ProductFavoritePage\\\";\\nimport PaymentDetailsPage from \\\"./pages/order_flow/PaymentDetailsPage\\\";\\nimport StepOrderPlacement from \\\"./pages/order_flow/StepOrderPlacement\\\";\\nimport ProductPickupPage from \\\"./pages/order_flow/ProductPickupPage\\\";\\nimport StepReviewReportPage from \\\"./pages/order_flow/StepReviewReportPage\\\";\\nimport ProductDetailPage from \\\"./pages/ProductDetailPage\\\";\\nimport FinalDealPage from \\\"./pages/order_flow/FinalDealPage\\\";\\nimport BackButtonManager from \\\"./components/BackButtonManager\\\";\\nimport SellerReportsPage from \\\"./pages/SellerReportsPage\\\";\\nimport OrderReportPage from \\\"./pages/OrderReportPage\\\";\\nimport eruda from 'eruda';\\nimport SellerBalancePage from \\\"./pages/SellerBalance\\\";\\nimport AboutPage from \\\"./pages/AboutPage\\\";\\nimport CompleteInstructionPage from \\\"./pages/CompleteInstructionPage\\\";\\nimport RequirementsPage from \\\"./pages/RequirementsPage\\\";\\nimport QuestionPage from \\\"./pages/QuestionPage\\\";\\nimport ModeratorDashboard from \\\"./pages/moderator/ModeratorDashboard\\\";\\nimport ModeratorProductsPage from \\\"./pages/moderator/ModeratorProductsPage\\\";\\nimport ModeratorProductReviewPage from \\\"./pages/moderator/ModeratorProductReviewPage\\\";\\nimport ModeratorUsersPage from \\\"./pages/moderator/ModeratorUserPage\\\";\\nimport PushFormPage from \\\"./pages/moderator/PushFormPage\\\";\\nimport InviteFriendsPage from \\\"./pages/InviteFriendsPage\\\";\\nimport ModeratorUserDetailPage from \\\"./pages/moderator/ModeratorUserDetailPage\\\";\\nimport PushAdminPage from \\\"./pages/moderator/PushAdminPage\\\";\\nimport PushDetailsPage from \\\"./pages/moderator/PushDetailsPage\\\";\\n\\n\\nimport { init, mountViewport, expandViewport } from '@telegram-apps/sdk';\\n\\n\\nfunction App() {\\n    useEffect(() => {\\n        // 1) Локальная консоль ошибок\\n        eruda.init();\\n\\n        // 2) Инициализируем Telegram Mini App SDK\\n        init();\\n\\n        // 3) Монтируем viewport (запрашиваем у Telegram параметры вьюпорта)\\n        if (mountViewport.isAvailable()) {\\n            mountViewport()\\n                .then(() => {\\n                    // 4) После успешного монтирования расширяем WebApp\\n                    if (expandViewport.isAvailable()) {\\n                        expandViewport();\\n                    }\\n                })\\n                .catch(console.error);\\n        }\\n    }, []);\\n\\n    return (\\n        <AuthProvider>\\n            <BrowserRouter>\\n                <BackButtonManager/>\\n                <Routes>\\n                    <Route path=\\\"/\\\" element={<HomePage/>}/>\\n                    <Route path=\\\"/invite\\\" element={<InviteFriendsPage/>}/>\\n                    <Route path=\\\"/about\\\" element={<AboutPage/>}/>\\n                    <Route path=\\\"/instruction\\\" element={<CompleteInstructionPage/>}/>\\n                    <Route path=\\\"/requirements\\\" element={<RequirementsPage/>}/>\\n                    <Route path=\\\"/question\\\" element={<QuestionPage/>}/>\\n                    <Route path=\\\"/catalog\\\" element={<CatalogPage/>}/>\\n                    <Route path=\\\"/product/:productId\\\" element={<ProductDetailPage/>}/>\\n                    <Route path=\\\"/product/:productId/instruction\\\" element={<InstructionPage/>}/>\\n                    <Route path=\\\"/product/:productId/step-1\\\" element={<CartScreenshotPage/>}/>\\n                    <Route path=\\\"/order/:orderId/step-2\\\" element={<ProductFindPage/>}/>\\n                    <Route path=\\\"/order/:orderId/step-3\\\" element={<ProductFavoritePage/>}/>\\n                    <Route path=\\\"/order/:orderId/step-4\\\" element={<PaymentDetailsPage/>}/>\\n                    <Route path=\\\"/order/:orderId/step-5\\\" element={<StepOrderPlacement/>}/>\\n                    <Route path=\\\"/order/:orderId/step-6\\\" element={<ProductPickupPage/>}/>\\n                    <Route path=\\\"/order/:orderId/step-7\\\" element={<StepReviewReportPage/>}/>\\n                    <Route path=\\\"/order/:orderId/order-info\\\" element={<FinalDealPage/>}/>\\n\\n                    <Route path=\\\"/seller-cabinet\\\" element={<SellerCabinet/>}/>\\n                    <Route path=\\\"/seller-cabinet/reports\\\" element={<SellerReportsPage/>}/>\\n                    <Route path=\\\"/seller-cabinet/reports/:orderId\\\" element={<OrderReportPage/>}/>\\n                    <Route path=\\\"/seller-cabinet/balance\\\" element={<SellerBalancePage/>}/>\\n                    <Route path=\\\"/my-products\\\" element={<MyProductsPage/>}/>\\n                    <Route path=\\\"/create-product/:productId?\\\" element={<CreateProductForm/>}/>\\n                    <Route path=\\\"/product/:productId/seller\\\" element={<CreateProductInfo/>}/>\\n                    <Route path=\\\"/user/orders\\\" element={<MyOrdersPage/>}/>\\n\\n                    <Route path=\\\"/moderator\\\" element={<ModeratorDashboard/>}/>\\n                    <Route path=\\\"/moderator/users\\\" element={<ModeratorUsersPage/>}/>\\n                    <Route path=\\\"/moderator/products\\\" element={<ModeratorProductsPage/>}/>\\n                    <Route path=\\\"/moderator/products/:productId\\\" element={<ModeratorProductReviewPage/>}/>\\n                    <Route path=\\\"/\\\" element={<HomePage />} />\\n                    <Route path=\\\"/moderator\\\" element={<ModeratorDashboard />} />\\n                    <Route path=\\\"/moderator/users\\\" element={<ModeratorUsersPage />} />\\n                    <Route path=\\\"/moderator/users/:userId\\\" element={<ModeratorUserDetailPage />} />\\n                    <Route path=\\\"/moderator/products\\\" element={<ModeratorProductsPage />} />\\n                    <Route path=\\\"/moderator/products/:productId\\\" element={<ModeratorProductReviewPage />} />\\n\\n                    <Route path=\\\"/moderator/pushes\\\" element={<PushAdminPage/>}/>\\n                    <Route path=\\\"/moderator/pushes/new\\\" element={<PushFormPage/>}/>\\n                    <Route path=\\\"/moderator/pushes/:pushId\\\" element={<PushDetailsPage/>}/>\\n                    <Route path=\\\"/moderator/pushes/:pushId/edit\\\" element={<PushFormPage/>}/>\\n                </Routes>\\n            </BrowserRouter>\\n        </AuthProvider>\\n    );\\n}\\n\\nexport default App;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/App.test.tsx\",\n    \"content\": \"import React from 'react';\\nimport { render, screen } from '@testing-library/react';\\nimport App from './App';\\n\\ntest('renders learn react link', () => {\\n  render(<App />);\\n  const linkElement = screen.getByText(/learn react/i);\\n  expect(linkElement).toBeInTheDocument();\\n});\\n\"\n  },\n  {\n    \"path\": \"frontend/src/App.css\",\n    \"content\": \".App {\\n  text-align: center;\\n}\\n\\n.App-logo {\\n  height: 40vmin;\\n  pointer-events: none;\\n}\\n\\n@media (prefers-reduced-motion: no-preference) {\\n  .App-logo {\\n    animation: App-logo-spin infinite 20s linear;\\n  }\\n}\\n\\n.App-header {\\n  background-color: #282c34;\\n  min-height: 100vh;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: calc(10px + 2vmin);\\n  color: white;\\n}\\n\\n.App-link {\\n  color: #61dafb;\\n}\\n\\n@keyframes App-logo-spin {\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(360deg);\\n  }\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/src/index.css\",\n    \"content\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\nbody {\\n  @apply bg-gray-200;\\n  font-family: 'Montserrat', sans-serif;\\n}\\n\\n@layer utilities {\\n    @keyframes flash-border {\\n        0%, 100% { border-color: theme('colors.red.600'); }\\n        50%      { border-color: transparent; }\\n    }\\n    .flash-border {\\n        animation: flash-border 0.5s ease-in-out 2; /* длительность 0.5с, 2 цикла */\\n    }\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/src/setupTests.ts\",\n    \"content\": \"// jest-dom adds custom jest matchers for asserting on DOM nodes.\\n// allows you to do things like:\\n// expect(element).toHaveTextContent(/react/i)\\n// learn more: https://github.com/testing-library/jest-dom\\nimport '@testing-library/jest-dom';\\n\"\n  },\n  {\n    \"path\": \"frontend/src/telegram.d.ts\",\n    \"content\": \"import { TelegramGameProxy } from \\\"@telegram-apps/sdk\\\";\\n\\ndeclare global {\\n    interface Window {\\n        Telegram: {\\n            WebApp: {\\n                initData?: string;\\n                initDataUnsafe?: {\\n                    query_id?: string;\\n                    user?: {\\n                        id: number;\\n                        first_name?: string;\\n                        last_name?: string;\\n                        username?: string;\\n                        photo_url?: string;\\n                        language_code?: string;\\n                    };\\n                    auth_date?: number;\\n                    hash?: string;\\n                };\\n                expand: () => void;\\n                close: () => void;\\n            };\\n        };\\n        TelegramGameProxy: TelegramGameProxy,\\n    }\\n}\\n\\nexport {};\\n\"\n  },\n  {\n    \"path\": \"frontend/src/reportWebVitals.ts\",\n    \"content\": \"import { ReportHandler } from 'web-vitals';\\n\\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/react-app-env.d.ts\",\n    \"content\": \"/// <reference types=\\\"react-scripts\\\" />\\n\"\n  },\n  {\n    \"path\": \"frontend/src/logo.svg\",\n    \"content\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 841.9 595.3\\\"><g fill=\\\"#61DAFB\\\"><path d=\\\"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\\\"/><circle cx=\\\"420.9\\\" cy=\\\"296.5\\\" r=\\\"45.7\\\"/><path d=\\\"M520.5 78.1z\\\"/></g></svg>\"\n  },\n  {\n    \"path\": \"frontend/src/enums.ts\",\n    \"content\": \"export enum PayoutTime {\\n    AFTER_REVIEW = 'После отзыва',\\n    AFTER_DELIVERY = 'После получения товара',\\n    ON_15TH_DAY = 'На 15й день',\\n}\\n\\nexport enum Category {\\n    WOMEN = 'Женщинам',\\n    MEN = 'Мужчинам',\\n    SHOES = 'Обувь',\\n    KIDS = 'Детям',\\n    HOME = 'Дом',\\n    NEW_YEAR = 'Новый год',\\n    BEAUTY = 'Красота',\\n    ACCESSORIES = 'Аксессуары',\\n    ELECTRONICS = 'Электроника',\\n    TOYS = 'Игрушки',\\n    FURNITURE = 'Мебель',\\n    ADULT = 'Товары для взрослых',\\n    APPLIANCES = 'Бытовая техника',\\n    PETS = 'Зоотовары',\\n    SPORTS = 'Спорт',\\n    AUTO = 'Автотовары',\\n    JEWELRY = 'Ювелирные изделия',\\n    REPAIR = 'Для ремонта',\\n    GARDEN = 'Сад и дача',\\n    HEALTH = 'Здоровье',\\n    STATIONERY = 'Канцтовары',\\n}\\n\\nexport enum UserRole {\\n    USER = \\\"user\\\",\\n    CLIENT = \\\"client\\\",\\n    SELLER = \\\"seller\\\",\\n    MODERATOR = \\\"moderator\\\",\\n    ADMIN = \\\"admin\\\"\\n}\\n\\nexport enum ProductStatus {\\n    CREATED = \\\"created\\\",\\n    ACTIVE = \\\"active\\\",\\n    NOT_PAID = \\\"not_paid\\\",\\n    DISABLED = \\\"disabled\\\",\\n    REJECTED = \\\"rejected\\\",\\n    ARCHIVED = \\\"archived\\\",\\n}\\n\\nexport enum OrderStatus {\\n    CASHBACK_PAID = \\\"cashback_paid\\\",\\n    CASHBACK_NOT_PAID = \\\"cashback_not_paid\\\",\\n    CANCELLED = \\\"cancelled\\\",\\n    PAYMENT_CONFIRMED = \\\"payment_confirmed\\\"\\n\\n}\"\n  },\n  {\n    \"path\": \"frontend/src/types/MeResponse.ts\",\n    \"content\": \"import { UserRole } from \\\"../enums\\\";\\n\\nexport interface MeResponse {\\n    id: string;\\n    telegram_id?: number;\\n    nickname?: string;\\n    role: \\\"user\\\" | \\\"client\\\" | \\\"seller\\\" | \\\"moderator\\\" | \\\"admin\\\";\\n    is_banned: boolean;\\n    balance: number;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/src/types/CreateProductRequest.ts\",\n    \"content\": \"import {Category, PayoutTime} from \\\"../enums\\\";\\n\\nexport interface CreateProductRequest {\\n    name: string;\\n    article: string;\\n    brand: string;\\n    category: Category;\\n    key_word: string;\\n    general_repurchases: number;\\n    daily_repurchases: number;\\n    price: number;\\n    wb_price: number;\\n    tg: string;\\n    payment_time: PayoutTime;\\n    review_requirements: string;\\n    image_path?: string;\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/src/contexts/auth.tsx\",\n    \"content\": \"import {createContext, useContext, useEffect, useState} from \\\"react\\\";\\nimport {apiClient} from \\\"../services/apiClient\\\";\\nimport {getMe} from \\\"../services/api\\\";\\nimport {initData} from \\\"@telegram-apps/sdk\\\";\\n\\n\\ninterface AuthContextType {\\n    userId: string | null;\\n    isModerator: boolean | null;\\n    isAdmin: boolean | null;\\n    loading: boolean;\\n}\\n\\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\\n\\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {\\n    const [userId, setUserId] = useState<string | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [isModerator, setIsModerator] = useState<boolean | null>(null);\\n    const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\\n\\n    useEffect(() => {\\n        const authenticateUser = async () => {\\n            initData.restore();\\n            const data = initData.raw();\\n\\n            if (!data) {\\n                console.error(\\\"No initData found\\\");\\n                setLoading(false);\\n                return;\\n            }\\n\\n            try {\\n                // Extract the \\\"ref\\\" query parameter from the URL, if it exists.\\n                const searchParams = new URLSearchParams(window.location.search);\\n                const ref = searchParams.get(\\\"ref\\\");\\n\\n                // Create the payload, including initData and, if present, the ref parameter.\\n                const payload: { initData: string; ref?: string } = { initData: data };\\n                if (ref) {\\n                    payload.ref = ref;\\n                }\\n\\n                const response = await apiClient.post(\\\"/auth/telegram\\\", payload);\\n                localStorage.setItem(\\\"authToken\\\", response.data.access_token);\\n                localStorage.setItem(\\\"refreshToken\\\", response.data.refresh_token);\\n\\n                const me = await getMe();\\n                setUserId(me.id);\\n                setIsModerator(me.role === \\\"moderator\\\" || me.role === \\\"admin\\\");\\n                setIsAdmin(me.role === \\\"admin\\\");\\n            } catch (error) {\\n                console.error(\\\"Authentication failed\\\", error);\\n            } finally {\\n                setLoading(false);\\n            }\\n        };\\n\\n        authenticateUser();\\n    }, []);\\n\\n    return (\\n        <AuthContext.Provider value={{userId, loading, isModerator, isAdmin}}>\\n            {children}\\n        </AuthContext.Provider>\\n    );\\n};\\n\\n// Hook for consuming authentication context\\nexport const useAuth = () => {\\n    const context = useContext(AuthContext);\\n    if (!context) throw new Error(\\\"useAuth must be used within an AuthProvider\\\");\\n    return context;\\n};\"\n  },\n  {\n    \"path\": \"frontend/src/components/CopyableUuid.tsx\",\n    \"content\": \"import React, { useState } from 'react';\\n\\ninterface CopyableUuidProps {\\n    uuid: string;\\n}\\n\\nconst CopyableUuid: React.FC<CopyableUuidProps> = ({ uuid }) => {\\n    const [copied, setCopied] = useState(false);\\n    const truncated = `${uuid.slice(0, 2)}...${uuid.slice(-2)}`;\\n\\n    const handleClick = async () => {\\n        try {\\n            await navigator.clipboard.writeText(uuid);\\n            setCopied(true);\\n            setTimeout(() => setCopied(false), 2000);\\n        } catch (err) {\\n            console.error('Ошибка при копировании UUID', err);\\n        }\\n    };\\n\\n    return (\\n        <span onClick={handleClick} className=\\\"relative inline-block cursor-pointer text-blue-600\\\">\\n      {truncated}\\n            {copied && (\\n                <div className=\\\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded shadow-lg text-center\\\">\\n\\n                    Скопировано\\n                </div>\\n            )}\\n    </span>\\n    );\\n};\\n\\nexport default CopyableUuid;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/components/NumericInput.tsx\",\n    \"content\": \"import React from \\\"react\\\";\\n\\nexport interface NumericInputProps\\n    extends React.InputHTMLAttributes<HTMLInputElement> {\\n    name: string;\\n    value: string;\\n    onValueChange: (field: string, value: string) => void;\\n}\\n\\nexport const NumericInput = React.forwardRef<HTMLInputElement, NumericInputProps>(\\n    (\\n        {\\n            name,\\n            value,\\n            onValueChange,\\n            onFocus,\\n            onKeyDown,\\n            className,\\n            ...rest\\n        },\\n        ref\\n    ) => {\\n        // при фокусе очищаем \\\"0\\\"\\n        const handleFocus: React.FocusEventHandler<HTMLInputElement> = (e) => {\\n            if (e.target.value === \\\"0\\\") {\\n                onValueChange(name, \\\"\\\");\\n            }\\n            onFocus?.(e);\\n        };\\n\\n        // при вводе оставляем только цифры\\n        const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\\n            const digits = e.target.value.replace(/\\\\D/g, \\\"\\\");\\n            onValueChange(name, digits);\\n            // курсор в конец\\n            window.requestAnimationFrame(() => {\\n                e.target.selectionStart = e.target.selectionEnd = e.target.value.length;\\n            });\\n        };\\n\\n        return (\\n            <input\\n                ref={ref}\\n                name={name}\\n                value={value}\\n                type=\\\"text\\\"\\n                inputMode=\\\"numeric\\\"\\n                onFocus={handleFocus}\\n                onChange={handleChange}\\n                onKeyDown={onKeyDown}\\n                className={className}\\n                {...rest}\\n            />\\n        );\\n    }\\n);\\n\"\n  },\n  {\n    \"path\": \"frontend/src/components/ReferralButton.tsx\",\n    \"content\": \"// ReferralGlowingButton.tsx\\nimport React from 'react';\\nimport styled, { keyframes } from 'styled-components';\\n\\n\\n// Анимация скользящего блика по тексту\\nconst textShine = keyframes`\\n    0%   { background-position: -150% 0; }\\n    100% { background-position: 150% 0; }\\n`;\\n\\n\\n// Основная кнопка с псевдоэлементами для эффекта\\nconst StyledButton = styled.button`\\n    position: relative;\\n    display: inline-flex;\\n    align-items: center;\\n    justify-content: center;\\n    padding: 1rem 1.5rem;        /* text-lg */\\n    font-size: 1.125rem;         /* 18px */\\n    font-weight: 600;\\n    color: #6b7280;              /* gray-500 */\\n    background: linear-gradient(135deg, #ffffff, #f5f5f5);\\n    border: none;\\n    border-radius: 999px;\\n    cursor: pointer;\\n    overflow: hidden;\\n\\n\\n\\n    /* Контейнер текста */\\n    & > span {\\n        position: relative;\\n        display: inline-block;\\n        z-index: 1;\\n        overflow: hidden;\\n    }\\n\\n    /* Псевдоэлемент — градиентный блик текста */\\n    & > span::before {\\n        content: attr(data-text);\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent);\\n        background-size: 200% 100%;\\n        -webkit-background-clip: text;\\n        -webkit-text-fill-color: transparent;\\n        animation: ${textShine} 1.5s ease-out forwards;\\n        pointer-events: none;\\n    }\\n`;\\n\\ninterface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\\n    onClick: () => void;\\n}\\n\\nexport const ReferralGlowingButton: React.FC<Props> = ({ onClick, className }) => (\\n        <StyledButton onClick={onClick} className={className}>\\n            <span data-text=\\\"Реферальная программа\\\">Реферальная программа</span>\\n        </StyledButton>\\n);\\n\"\n  },\n  {\n    \"path\": \"frontend/src/components/BackButtonManager.ts\",\n    \"content\": \"import useBackButtonVisibility from \\\"../hooks/backButton\\\";\\n\\nfunction BackButtonManager() {\\n    useBackButtonVisibility();\\n    return null;\\n}\\n\\nexport default BackButtonManager;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/components/referral-utils.ts\",\n    \"content\": \"// ReferralGlowingButton.tsx\\nimport React from 'react';\\nimport styled, { keyframes } from 'styled-components';\\n\\n// Анимация вращения конусного градиента бордера\\nconst rotate360 = keyframes`\\n    to { transform: rotate(360deg); }\\n`;\\n\\n// Анимация блика по тексту\\nconst textShine = keyframes`\\n    0% { background-position: -200% 0; }\\n    100% { background-position: 200% 0; }\\n`;\\n\\n// Стили кнопки с градиентным бордером\\nconst StyledButton = styled.button`\\n    display: block;\\n    margin: 1rem auto;\\n    position: relative;\\n    padding: 1rem 1.5rem;\\n    font-size: 1.125rem;\\n    font-weight: 600;\\n    color: #6b7280;\\n    background: linear-gradient(135deg, #ffffff, #f5f5f5) padding-box;\\n    border-radius: 999px;\\n    border: 2px solid transparent;\\n    cursor: pointer;\\n    overflow: hidden;\\n\\n    /* Градиентный бордер через псевдоэлемент */\\n    &::before {\\n        content: '';\\n        position: absolute;\\n        top: -2px;\\n        left: -2px;\\n        right: -2px;\\n        bottom: -2px;\\n        border-radius: inherit;\\n        border: 2px solid transparent;\\n        border-image: conic-gradient(\\n                rgba(255,255,255,0.6) 0deg,\\n                rgba(255,255,255,0)   90deg,\\n                rgba(255,255,255,0)   270deg,\\n                rgba(255,255,255,0.6) 360deg\\n        ) 1;\\n        animation: ${rotate360} 6s linear infinite;\\n        pointer-events: none;\\n        z-index: 0;\\n    }\\n\\n    /* Контейнер для текста */\\n    & > span {\\n        position: relative;\\n        display: inline-block;\\n        z-index: 1;\\n    }\\n\\n    /* Градиентный блик текста */\\n    & > span::after {\\n        content: attr(data-text);\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent);\\n        background-size: 200% 100%;\\n        -webkit-background-clip: text;\\n        -webkit-text-fill-color: transparent;\\n        animation: ${textShine} 3s ease-out forwards;\\n        pointer-events: none;\\n    }\\n`;\\n\\n\\n\"\n  },\n  {\n    \"path\": \"frontend/src/components/FileUploader.tsx\",\n    \"content\": \"import React, { ChangeEvent } from 'react';\\n\\ninterface FileUploaderProps {\\n    label: string;\\n    file: File | null;\\n    preview: string | null;\\n    onFileChange: (file: File | null) => void;\\n}\\n\\nconst FileUploader: React.FC<FileUploaderProps> = ({\\n                                                       label,\\n                                                       preview,\\n                                                       onFileChange\\n                                                   }) => (\\n    <div className=\\\"flex flex-col gap-2 items-start px-4\\\">\\n        <p className=\\\"uppercase text-xs text-gray-500\\\">{label}</p>\\n        <label className=\\\"bg-brandlight text-brand py-2 px-4 rounded cursor-pointer hover:shadow-lg transition-shadow duration-200 text-sm inline-flex flex-col items-center gap-2\\\">\\n            {preview ? (\\n                <>\\n                    <img\\n                        src={preview}\\n                        alt=\\\"preview\\\"\\n                        className=\\\"w-32 h-32 object-cover mb-1\\\"\\n                    />\\n                    <div className=\\\"flex items-center text-green-600 text-sm\\\">\\n                        <svg\\n                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                            className=\\\"w-4 h-4 mr-1\\\"\\n                            viewBox=\\\"0 0 20 20\\\"\\n                            fill=\\\"currentColor\\\"\\n                        >\\n                            <path\\n                                fillRule=\\\"evenodd\\\"\\n                                d=\\\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-10.707a1 1 0 10-1.414-1.414L9 9.586 7.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\\\"\\n                                clipRule=\\\"evenodd\\\"\\n                            />\\n                        </svg>\\n                        Файл загружен\\n                    </div>\\n                </>\\n            ) : (\\n                <div className=\\\"flex items-center gap-2\\\">\\n                    <img\\n                        src=\\\"/icons/paperclip.png\\\"\\n                        alt=\\\"paperclip\\\"\\n                        className=\\\"h-4 w-4\\\"\\n                    />\\n                    <span>Выбрать файл</span>\\n                </div>\\n            )}\\n            <input\\n                type=\\\"file\\\"\\n                accept=\\\"image/*\\\"\\n                className=\\\"hidden\\\"\\n                onChange={(e: ChangeEvent<HTMLInputElement>) =>\\n                    onFileChange(e.target.files?.[0] || null)\\n                }\\n            />\\n        </label>\\n    </div>\\n);\\n\\nexport default FileUploader;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/components/GetUploadLink.ts\",\n    \"content\": \"function GetUploadLink(image_path: string): string {\\n    return process.env.REACT_APP_API_BASE + \\\"/upload/\\\" + image_path;\\n}\\n\\nexport default GetUploadLink;\"\n  },\n  {\n    \"path\": \"frontend/src/hooks/useDebounce.ts\",\n    \"content\": \"import { useState, useEffect } from 'react'\\n\\n/**\\n * Возвращает debounced-версию value:\\n * обновляется не чаще чем раз в ms миллисекунд\\n */\\nexport function useDebounce<T>(value: T, ms: number): T {\\n    const [debounced, setDebounced] = useState<T>(value)\\n    useEffect(() => {\\n        const handle = setTimeout(() => setDebounced(value), ms)\\n        return () => clearTimeout(handle)\\n    }, [value, ms])\\n    return debounced\\n}\\n\"\n  },\n  {\n    \"path\": \"frontend/src/hooks/backButton.ts\",\n    \"content\": \"import { useEffect } from \\\"react\\\";\\nimport { useLocation } from \\\"react-router-dom\\\";\\nimport { postEvent } from '@telegram-apps/sdk';\\n\\nfunction useBackButtonVisibility() {\\n     const location = useLocation();\\n\\n     useEffect(() => {\\n         // Set is_visible to false for the home page ('/') and true otherwise.\\n         const isVisible = location.pathname !== \\\"/\\\";\\n         postEvent('web_app_setup_back_button', { is_visible: isVisible });\\n     }, [location.pathname]);\\n}\\n\\nexport default useBackButtonVisibility;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/CatalogPage.tsx\",\n    \"content\": \"import React, {useEffect, useRef, useState} from 'react';\\nimport {Link, useLocation, useNavigate, useSearchParams} from 'react-router-dom';\\nimport {getProducts, getUser} from '../services/api';\\nimport {on} from '@telegram-apps/sdk';\\nimport GetUploadLink from \\\"../components/GetUploadLink\\\";\\nimport {useDebounce} from \\\"../hooks/useDebounce\\\";\\nimport {Combobox} from '@headlessui/react';\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    description?: string;\\n    price: number;\\n    article: string;\\n    category: string;\\n    seller_id: string;\\n    image_path?: string;\\n}\\n\\ninterface Seller {\\n    id: string;\\n    nickname: string;\\n}\\n\\nfunction CatalogPage() {\\n    const [products, setProducts] = useState<Product[]>([]);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n\\n    const [searchQuery, setSearchQuery] = useState('');\\n    const [filterPrice, setFilterPrice] = useState<number | ''>('');\\n    const [filterCategory, setFilterCategory] = useState('');\\n    const [filterSeller, setFilterSeller] = useState('');\\n    const [showFilters, setShowFilters] = useState(false);\\n\\n    const [searchIsActive, setSearchIsActive] = useState(false);\\n\\n    const [sellerOptions, setSellerOptions] = useState<Seller[]>([]);\\n\\n    const [sellerQuery, setSellerQuery] = useState('');\\n\\n    // отфильтрованный список продавцов под комбо\\n    const filteredSellers = sellerQuery === ''\\n        ? sellerOptions\\n        : sellerOptions.filter(s =>\\n            s.nickname.toLowerCase().includes(sellerQuery.toLowerCase())\\n        );\\n\\n    const navigate = useNavigate();\\n\\n    const [searchParams] = useSearchParams();\\n    const location = useLocation();\\n    const isOnCatalog = location.pathname === ('/catalog');\\n    const searchRef = useRef<HTMLInputElement>(null);\\n\\n\\n    const hasActiveFilters =\\n        searchQuery.trim() !== '' ||\\n        filterPrice !== '' ||\\n        filterCategory !== '' ||\\n        filterSeller !== '';\\n\\n    useEffect(() => {\\n        const sellerParam = searchParams.get('seller');\\n        if (sellerParam) {\\n            setFilterSeller(sellerParam);\\n        }\\n    }, [searchParams]);\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => navigate('/'));\\n        return () => removeBackListener();\\n    }, [navigate]);\\n\\n    const debouncedSearch = useDebounce(searchQuery, 600);\\n\\n    useEffect(() => {\\n        setLoading(true);\\n        getProducts({search: debouncedSearch /* можно добавить: , limit, offset */})\\n            .then(res => setProducts(res.data))\\n            .catch(() => setError('Не удалось загрузить каталог товаров.'))\\n            .finally(() => setLoading(false));\\n    }, [debouncedSearch /*, limit, offset если нужно */]);\\n\\n\\n    useEffect(() => {\\n        if (!products.length) return;\\n        const uniqueIds = Array.from(new Set(products.map(p => p.seller_id)));\\n        (async () => {\\n            try {\\n                const sellers = await Promise.all(\\n                    uniqueIds.map(async id => {\\n                        const res = await getUser(id);\\n                        return {id, nickname: res.data.nickname!};\\n                    })\\n                );\\n                setSellerOptions(sellers);\\n            } catch (err) {\\n                console.error('Ошибка при загрузке продавцов:', err);\\n            }\\n        })();\\n    }, [products]);\\n\\n\\n    useEffect(() => {\\n        if (searchIsActive) {\\n            searchRef.current?.focus()\\n        }\\n    })\\n\\n\\n    const filtered = products\\n        .filter(p => (filterPrice === '' || p.price <= filterPrice))\\n        .filter(p => (filterCategory === '' || p.category === filterCategory))\\n        .filter(p => (filterSeller === '' || p.seller_id === filterSeller));\\n\\n    const categories = Array.from(new Set(products.map(p => p.category)));\\n\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200\\\">\\n            <div className=\\\"flex w-max mx-auto mt-2 bg-gray-200 p-1 rounded-full\\\">\\n                <Link\\n                    to=\\\"/catalog\\\"\\n                    className={`\\n            px-4 py-2 rounded-full\\n            ${isOnCatalog\\n                        ? 'bg-white text-black'\\n                        : 'text-gray-500 hover:text-black'}\\n          `}\\n                >\\n                    Каталог\\n                </Link>\\n\\n                <Link\\n                    to=\\\"/user/orders\\\"\\n                    className={`\\n            px-4 py-2 rounded-full\\n            ${!isOnCatalog\\n                        ? 'bg-white text-black'\\n                        : 'text-gray-500 hover:text-black'}\\n          `}\\n                >\\n                    Мои покупки\\n                </Link>\\n            </div>\\n            <div className=\\\"p-4 mx-auto max-w-screen-sm relative\\\">\\n                {/* Search  filter toggle */}\\n                <div className=\\\"sticky top-0 z-10 mb-4 flex items-center gap-2\\\">\\n                    <input\\n                        ref={searchRef}\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"Поиск по названию или артикулу\\\"\\n                        value={searchQuery}\\n                        onChange={e => setSearchQuery(e.target.value)}\\n\\n                        className=\\\"flex-1 border border-darkGray rounded-md p-2\\\"\\n                    />\\n                    <button\\n                        onClick={() => setShowFilters(prev => !prev)}\\n                        className=\\\"relative\\\"\\n                    >\\n                        <img\\n                            src=\\\"/icons/filter.png\\\"\\n                            alt=\\\"Фильтр\\\"\\n                            className=\\\"w-6 h-6\\\"\\n                        />\\n\\n                        {hasActiveFilters && (\\n                            <span\\n                                className={`\\n                                    absolute\\n                                    top-0 right-0\\n                                    inline-flex items-center justify-center\\n                                    w-3 h-3\\n                                    bg-red-600\\n                                    border-2 border-white\\n                                    rounded-full\\n                                  `}\\n                            />\\n                        )}\\n                    </button>\\n                </div>\\n                {/* Показываем загрузку и ошибку под шапкой, но инпут не размонтируем */}\\n                {loading && (\\n                    <div className=\\\"p-4 text-center text-gray-600\\\">Загрузка каталога…</div>\\n                )}\\n                {error && (\\n                    <div className=\\\"p-4 text-center text-red-600\\\">{error}</div>\\n                )}\\n\\n                {/* Inline filters panel */}\\n                {showFilters && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4 space-y-4\\\">\\n                        <div>\\n                            <label className=\\\"block text-sm font-medium mb-1\\\">Максимальная цена</label>\\n                            <input\\n                                type=\\\"number\\\"\\n                                min={0}\\n                                value={filterPrice}\\n                                onChange={e => setFilterPrice(e.target.value === '' ? '' : Number(e.target.value))}\\n                                className=\\\"w-full border border-darkGray rounded p-2 focus:outline-none focus:ring\\\"\\n                            />\\n                        </div>\\n                        <div>\\n                            <label className=\\\"block text-sm font-medium mb-1\\\">Категория</label>\\n                            <select\\n                                value={filterCategory}\\n                                onChange={e => setFilterCategory(e.target.value)}\\n                                className=\\\"w-full border border-darkGray rounded p-2 focus:outline-none focus:ring\\\"\\n                            >\\n                                <option value=\\\"\\\">Все категории</option>\\n                                {categories.map(cat => <option key={cat} value={cat}>{cat}</option>)}\\n                            </select>\\n                        </div>\\n                        <div>\\n                            <label className=\\\"block text-sm font-medium mb-1\\\">Продавец</label>\\n                            <Combobox value={filterSeller} onChange={setFilterSeller} as=\\\"div\\\" className=\\\"relative\\\">\\n                                <Combobox.Input\\n                                    className=\\\"w-full border border-darkGray rounded p-2 focus:outline-none focus:ring\\\"\\n                                    placeholder=\\\"Поиск продавца\\\"\\n                                    onChange={e => setSellerQuery(e.target.value)}\\n                                    displayValue={(id: string) => {\\n                                        const sel = sellerOptions.find(s => s.id === id);\\n                                        return sel ? sel.nickname : '';\\n                                    }}\\n                                />\\n                                <Combobox.Button className=\\\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\\\">\\n                                    <span className=\\\"text-gray-400 select-none\\\">▾</span>\\n                                </Combobox.Button>\\n\\n                                {/** render-props: получаем флаг open */}\\n                                <Combobox.Options className=\\\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 overflow-auto rounded\\\">\\n                                    <Combobox.Option\\n                                        key=\\\"all\\\"\\n                                        value=\\\"\\\"\\n                                        className={({ active }) =>\\n                                            `cursor-pointer select-none p-2 ${active ? 'bg-brandlight text-white' : 'text-gray-700'}`\\n                                        }\\n                                    >\\n                                        Все продавцы\\n                                    </Combobox.Option>\\n\\n                                    {filteredSellers.length === 0 ? (\\n                                        <div className=\\\"p-2 text-sm text-gray-500\\\">Ничего не найдено</div>\\n                                    ) : (\\n                                        filteredSellers.map(sel => (\\n                                            <Combobox.Option\\n                                                key={sel.id}\\n                                                value={sel.id}\\n                                                className={({ active }) =>\\n                                                    `cursor-pointer select-none p-2 ${active ? 'bg-brandlight text-white' : 'text-gray-700'}`\\n                                                }\\n                                            >\\n                                                {sel.nickname}\\n                                            </Combobox.Option>\\n                                        ))\\n                                    )}\\n                                </Combobox.Options>\\n                            </Combobox>\\n\\n                        </div>\\n\\n\\n                        <div className=\\\"flex justify-end space-x-2\\\">\\n                            <button\\n                                onClick={() => {\\n                                    setFilterPrice('');\\n                                    setFilterCategory('');\\n                                    setFilterSeller('');\\n                                    setShowFilters(false);\\n                                }}\\n                                className=\\\"px-4 py-2 border rounded-md text-gray-700 hover:bg-gray-200-100\\\"\\n                            >\\n                                Сбросить\\n                            </button>\\n                            <button\\n                                onClick={() => setShowFilters(false)}\\n                                className=\\\"px-4 py-2 bg-brand text-white rounded-md hover:bg-brand-dark\\\"\\n                            >\\n                                Применить\\n                            </button>\\n                        </div>\\n                    </div>\\n                )}\\n\\n                {/* Products grid */}\\n                <div className=\\\"grid grid-cols-2 gap-4\\\">\\n                    {filtered.map(product => (\\n                        <div\\n                            key={product.id}\\n                            onClick={() => navigate(`/product/${product.id}`)}\\n                            className=\\\"border border-gray-200 rounded-md shadow-sm overflow-hidden hover:shadow-md transition-shadow duration-300 cursor-pointer\\\"\\n                        >\\n                            <div className=\\\"w-full aspect-[3/4] bg-gray-200-100 overflow-hidden\\\">\\n                                {product.image_path\\n                                    ? <img\\n                                        src={product.image_path.startsWith('http') ? product.image_path : GetUploadLink(product.image_path)}\\n                                        alt={product.name} className=\\\"w-full h-full object-cover\\\"/>\\n                                    : <div className=\\\"flex items-center justify-center h-full text-gray-400\\\">Нет\\n                                        фото</div>\\n                                }\\n                            </div>\\n                            <div className=\\\"p-3 bg-white flex flex-col\\\">\\n                                <h3\\n                                    className=\\\"\\n                                        text-sm font-semibold mb-1\\n                                        h-10\\n                                        overflow-hidden\\n                                        line-clamp-2\\\"\\n                                >\\n                                    {product.name}\\n                                </h3>\\n                                <p className=\\\"text-md font-bold mb-1 text-brand\\\">{product.price} ₽</p>\\n                                <p className=\\\"text-xs text-gray-500 mt-auto\\\">Арт. {product.article}</p>\\n                            </div>\\n                        </div>\\n                    ))}\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default CatalogPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/InviteFriendsPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {redirect, useNavigate} from 'react-router-dom';\\nimport {on, shareURL} from '@telegram-apps/sdk';\\nimport {getInviteLink} from '../services/api';\\n\\nconst InviteFriendsPage: React.FC = () => {\\n    const navigate = useNavigate();\\n    const [inviteLink, setInviteLink] = useState<string>('');\\n    const [loading, setLoading] = useState<boolean>(true);\\n    const [error, setError] = useState<string>('');\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => navigate('/'));\\n        return () => removeBackListener();\\n    }, [navigate]);\\n\\n    useEffect(() => {\\n        async function fetchInviteLink() {\\n            try {\\n                const response = await getInviteLink();\\n                setInviteLink(response.data);\\n            } catch (err) {\\n                console.error('Ошибка при получении ссылки для приглашения:', err);\\n                setError('Не удалось получить реферальную ссылку. Попробуйте позже.');\\n            } finally {\\n                setLoading(false);\\n            }\\n        }\\n        fetchInviteLink();\\n    }, []);\\n\\n    const displayLink = inviteLink\\n        ? inviteLink.length > 50\\n            ? `${inviteLink.slice(0, 25)}...${inviteLink.slice(-25)}`\\n            : inviteLink\\n        : '';\\n\\n    const copyInviteLink = () => {\\n        navigator.clipboard.writeText(inviteLink);\\n        alert('Ссылка скопирована');\\n    };\\n\\n    const handleShareInvite = () => {\\n        if (shareURL.isAvailable()) {\\n            shareURL(inviteLink, 'Заходи по моей ссылке!');\\n            redirect(inviteLink);\\n        } else {\\n            copyInviteLink();\\n        }\\n    };\\n\\n    if (loading) {\\n        return <div className=\\\"p-4 text-center\\\">Загрузка…</div>;\\n    }\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 flex items-center justify-center p-6\\\">\\n            <div className=\\\"w-full max-w-md bg-white rounded-lg shadow-lg p-6\\\">\\n                <h1 className=\\\"text-2xl font-bold text-center text-brand mb-6\\\">\\n                    Приглашай продавцов и зарабатывай с нами!\\n                </h1>\\n\\n                <p className=\\\"leading-relaxed mb-4 text-gray-800\\\">\\n                    Получи за каждое приглашение по твоей реферальной ссылке <strong>20%</strong>.\\n\\n                </p>\\n                <p className=\\\"leading-relaxed mb-4 text-gray-800\\\">\\n                    Также <strong>20%</strong> скидки получит продавец.\\n                </p>\\n\\n                <p className=\\\"leading-relaxed mb-4 text-gray-800\\\">\\n                    Минимальная сумма для вывода средств 1000р.\\n                </p>\\n\\n                <div className=\\\"bg-brandlight border-l-4 border-brand p-4 mb-6 rounded\\\">\\n                    <p className=\\\"text-center text-gray-900\\\">\\n                        Деньги начисляются после того, как продавец совершит покупку.\\n                    </p>\\n                </div>\\n\\n                {/* Invite link display */}\\n                <div className=\\\"flex items-center bg-gray-200-100 border border-darkGray rounded p-2 mb-6 break-all\\\">\\n                    <span className=\\\"flex-1 text-sm text-gray-700\\\">{displayLink}</span>\\n                    <button onClick={copyInviteLink} className=\\\"ml-2\\\">\\n                        <img src=\\\"/icons/copy.png\\\" alt=\\\"Копировать\\\" className=\\\"w-4 h-4\\\" />\\n                    </button>\\n                </div>\\n\\n                {/* Error message */}\\n                {error && (\\n                    <div className=\\\"p-4 mb-4 bg-red-100 text-red-800 rounded text-center\\\">\\n                        {error}\\n                    </div>\\n                )}\\n\\n                {/* Share button */}\\n                <button\\n                    onClick={handleShareInvite}\\n                    className=\\\"w-full flex items-center justify-center bg-brand text-white py-3 rounded-lg hover:bg-brand-dark transition\\\"\\n                >\\n                    <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-5 h-5 mr-2\\\" />\\n                    Поделиться в Telegram\\n                </button>\\n            </div>\\n        </div>\\n    );\\n};\\n\\nexport default InviteFriendsPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/CreateProductInfo.tsx\",\n    \"content\": \"import React, {FormEvent, useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getMe, getProductById, updateProductStatus} from '../services/api';\\nimport {Category, PayoutTime, ProductStatus} from '../enums';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport GetUploadLink from \\\"../components/GetUploadLink\\\";\\n\\n\\ninterface ModeratorReview {\\n    id: string;\\n    moderator_id: string;\\n    product_id: string;\\n    comment_to_seller?: string;\\n    comment_to_moderator?: string;\\n    status_before: ProductStatus;\\n    status_after: ProductStatus;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    article: string;\\n    status: ProductStatus;\\n    brand: string;\\n    category: Category;\\n    key_word: string;\\n    general_repurchases: number;\\n    daily_repurchases: number;\\n    price: number;\\n    wb_price: number;\\n    tg: string;\\n    payment_time: PayoutTime;\\n    review_requirements: string;\\n    image_path?: string;\\n    last_moderator_review?: ModeratorReview;\\n}\\n\\ninterface MeResponse {\\n    id: string;\\n    telegram_id?: number;\\n    nickname?: string;\\n    role: \\\"user\\\" | \\\"client\\\" | \\\"seller\\\" | \\\"moderator\\\" | \\\"admin\\\";\\n    is_banned: boolean;\\n    balance?: number;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\\nfunction CreateProductInfo() {\\n    const navigate = useNavigate();\\n    const {productId} = useParams<{ productId: string }>();\\n    const [product, setProduct] = useState<Product | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const [currentUser, setCurrentUser] = useState<MeResponse | null>(null);\\n\\n    useEffect(() => {\\n        if (!productId) return;\\n        getProductById(productId)\\n            .then((res) => setProduct(res.data))\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке товара:', err);\\n                setError('Не удалось загрузить товар');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [productId]);\\n\\n    useEffect(() => {\\n        getMe()\\n            .then((user) => setCurrentUser(user))\\n            .catch((err) => {\\n                console.error('Ошибка получения данных пользователя:', err);\\n            });\\n    }, []);\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/my-products');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const handleMyBalanceClick = () => {\\n        navigate(`/seller-cabinet/balance`);\\n    };\\n\\n    const handleEditClick = () => {\\n        if (product) {\\n            navigate(`/create-product/${product.id}`);\\n        }\\n    };\\n\\n    const handlePublish = async (e: FormEvent) => {\\n        e.preventDefault();\\n        try {\\n            const fd = new FormData();\\n            fd.append('status', ProductStatus.ACTIVE);\\n            await updateProductStatus(productId!, fd);\\n            if (product) {\\n                setProduct({...product, status: ProductStatus.ACTIVE});\\n            }\\n            alert('Товар опубликован');\\n        } catch (err) {\\n            console.error('Ошибка при сохранении товара:', err);\\n            alert('Не удалось сохранить товар');\\n        }\\n    };\\n\\n    const handleStop = async (e: FormEvent) => {\\n        e.preventDefault();\\n        try {\\n            const fd = new FormData();\\n            fd.append('status', ProductStatus.ARCHIVED);\\n            await updateProductStatus(productId!, fd);\\n            if (product) {\\n                setProduct({...product, status: ProductStatus.ARCHIVED});\\n            }\\n            alert('Товар заархивирован');\\n        } catch (err) {\\n            console.error('Ошибка при сохранении товара:', err);\\n            alert('Не удалось сохранить товар');\\n        }\\n    };\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n\\n    if (error || !product) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error || 'Товар не найден'}</div>;\\n    }\\n\\n    const getReviewComment = (review: ModeratorReview): string | null => {\\n        return review.comment_to_seller || null;\\n        // if (currentUser?.role === 'seller') {\\n        //     return review.comment_to_seller || null;\\n        // } else if (currentUser?.role === 'moderator' || currentUser?.role === 'admin') {\\n        //     return review.comment_to_moderator || null;\\n        // }\\n        // return review.comment_to_seller || review.comment_to_moderator || null;\\n    };\\n\\n    const lastReview = product.last_moderator_review;\\n    const reviewComment = lastReview ? getReviewComment(lastReview) : null;\\n\\n    return (\\n        <div className=\\\"p-4 min-h-screen bg-gray-200 mx-auto max-w-lg\\\">\\n            {(product.status === ProductStatus.CREATED || product.status === ProductStatus.DISABLED) && (\\n                <div className=\\\"mb-4 p-3 bg-brandlight border-l-4 border-brand text-brand rounded\\\">\\n                    Новая карточка отправлена на модерацию. Проверьте всю информацию. Вы еще можете внести изменения.\\n                </div>\\n            )}\\n\\n            <div className=\\\"flex justify-between items-center mb-6\\\">\\n                <h1 className=\\\"text-2xl font-medium\\\">Карточка товара</h1>\\n                <button onClick={handleEditClick} className=\\\"border border-brand text-brand px-2 py-1 text-sm rounded\\\">\\n                    Редактировать\\n                </button>\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-4 mb-4\\\">\\n                <div className=\\\"w-full max-h-80 bg-gray-200-100 rounded-md overflow-hidden\\\">\\n                    {product.image_path ? (\\n                        <img\\n                            src={\\n                                product.image_path.startsWith('http')\\n                                    ? product.image_path\\n                                    : GetUploadLink(product.image_path)\\n                            }\\n                            alt={product.name}\\n                            className=\\\"w-full h-full object-contain\\\"\\n                        />\\n                    ) : (\\n                        <div className=\\\"flex items-center justify-center h-48 text-gray-400\\\">\\n                            Нет фото\\n                        </div>\\n                    )}\\n                </div>\\n\\n                <div className=\\\"bg-white border border-gray-200 rounded-md p-4\\\">\\n                    <p className=\\\"text-lg font-bold mb-1\\\">{product.article}</p>\\n                    <h3 className=\\\"text-xl font-semibold mb-3\\\">{product.name}</h3>\\n\\n                    <div className=\\\"space-y-2\\\">\\n                        <div>\\n                            <span className=\\\"text-sm text-gray-600\\\">Цена на сайте:</span>{' '}\\n                            <span className=\\\"text-sm font-semibold\\\">{product.wb_price} руб</span>\\n                        </div>\\n                        <div>\\n                            <span className=\\\"text-sm text-gray-600\\\">Цена для покупателя:</span>{' '}\\n                            <span className=\\\"text-sm font-semibold\\\">{product.price} руб</span>\\n                        </div>\\n                        <div>\\n                            <span className=\\\"text-sm text-gray-600\\\">Кол-во выкупов:</span>{' '}\\n                            <span className=\\\"text-sm font-semibold\\\">{product.general_repurchases} шт</span>\\n                        </div>\\n                        <div>\\n                            <span className=\\\"text-sm text-gray-600\\\">План выкупов на сутки:</span>{' '}\\n                            <span className=\\\"text-sm font-semibold\\\">{product.daily_repurchases} шт</span>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n\\n            <div className=\\\"mb-4\\\">\\n                {lastReview && reviewComment && (\\n                    <div key={lastReview.id} className=\\\"mb-3 p-4 bg-gray-200-50 border border-gray-200 rounded\\\">\\n                        <h3 className=\\\"text-lg font-semibold\\\">\\n                            Комментарий модератора:\\n                        </h3>\\n                        <p className=\\\"text-sm text-gray-800\\\">\\n                            {reviewComment}\\n                        </p>\\n                        <p className=\\\"text-xs text-gray-500 mt-1\\\">\\n                            Дата: {new Date(lastReview.created_at).toLocaleDateString()}\\n                        </p>\\n                    </div>\\n                )}\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-2\\\">\\n                {product.status === ProductStatus.NOT_PAID && (\\n                <button\\n                    onClick={handleMyBalanceClick}\\n                    className=\\\"flex-1 bg-brand text-white p-2 rounded\\\"\\n                >\\n                    Пополнить кабинет\\n                </button>\\n                )}\\n                {product.status === ProductStatus.ARCHIVED ? (\\n                    <button\\n                        onClick={handlePublish}\\n                        className=\\\"flex-1 border border-brand text-brand p-2 rounded\\\"\\n                    >\\n                        Опубликовать\\n                    </button>\\n                ) : (\\n                    <button\\n                        onClick={handleStop}\\n                        className=\\\"flex-1 border border-brand text-brand p-2 rounded\\\"\\n                    >\\n                        Снять с публикации\\n                    </button>\\n                )}\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default CreateProductInfo;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/AboutPage.tsx\",\n    \"content\": \"import React, {useEffect} from 'react';\\nimport {useNavigate} from 'react-router-dom';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\n\\nfunction AboutPage() {\\n    const navigate = useNavigate();\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(`/`);\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const handleQuestion = () => navigate('/question');\\n    const handleInstruction = () => navigate('/instruction', {state: {backRoute: '/about'}});\\n    const handleRequirements = () => navigate('/requirements');\\n    const handleHomeClick = () => navigate('/');\\n\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 flex items-center justify-center p-4\\\">\\n            <div className=\\\"max-w-screen-md w-full bg-white border border-brand rounded-lg shadow-lg p-6\\\">\\n                <div className=\\\"gap-6\\\">\\n                    <h1 className=\\\"text-2xl font-bold mb-6 text-left\\\">О сервисе:</h1>\\n\\n                    {/*<div className=\\\"bg-white rounded-lg p-4\\\">*/}\\n                        <section className=\\\"mb-6 text-left\\\">\\n                            <p className=\\\"text-base text-gray-800 mb-4\\\">\\n                                ВБ КЭШБЭК - бот поможет селлерам эффективнее проводить раздачи, а покупателям\\n                                безопасно выкупать. Инструкция для покупателей, Обзор на кабинет продавца, Канал по\\n                                раздачам.\\n                            </p>\\n                        </section>\\n\\n                        <div className=\\\"space-y-2\\\">\\n                            <div>\\n                                <a\\n                                    href=\\\"https://t.me/Premiumcash1/9\\\"\\n                                    target=\\\"_blank\\\"\\n                                    rel=\\\"noopener noreferrer\\\"\\n                                    className=\\\"text-blue-600 hover:underline\\\"\\n                                >\\n                                    Инструкция для покупателей\\n                                </a>\\n                            </div>\\n                            <div>\\n                                <a\\n                                    href=\\\"https://t.me/Premiumcash1/8\\\"\\n                                    target=\\\"_blank\\\"\\n                                    rel=\\\"noopener noreferrer\\\"\\n                                    className=\\\"text-blue-600 hover:underline\\\"\\n                                >\\n                                    Обзор на кабинет продавца\\n                                </a>\\n                            </div>\\n                            <div>\\n                                <a\\n                                    href=\\\"https://t.me/Premiumcashb/13\\\"\\n                                    target=\\\"_blank\\\"\\n                                    rel=\\\"noopener noreferrer\\\"\\n                                    className=\\\"text-blue-600 hover:underline\\\"\\n                                >\\n                                    Канал по раздачам\\n                                </a>\\n                            </div>\\n                        </div>\\n\\n\\n                        <section className=\\\"mb-6 mt-6 text-left\\\">\\n                            <h2 className=\\\"text-xl font-bold mb-3\\\">Для селлеров</h2>\\n                            <ul className=\\\"list-disc list-inside text-base text-gray-800 space-y-2\\\">\\n                                <li>Сократит количество чатов</li>\\n                                <li>Удобные отчеты</li>\\n                                <li>Управление раздачами через кабинет</li>\\n                                <li>Моментальные уведомления о выкупах и выплатах</li>\\n                                <li>Неограниченное количество товаров</li>\\n                                <li>Можно раздавать одновременно товары разных продавцов</li>\\n                            </ul>\\n                        </section>\\n\\n                        <section className=\\\"mb-6 text-left\\\">\\n                            <h2 className=\\\"text-xl font-bold mb-3\\\">Для покупателей</h2>\\n                            <ul className=\\\"list-disc list-inside text-base text-gray-800 space-y-2\\\">\\n                                <li>Безопасные сделки</li>\\n                                <li>Простая инструкция</li>\\n                                <li>Проверенные продавцы</li>\\n                            </ul>\\n                            <hr className=\\\"my-6 border-darkGray\\\"/>\\n                        </section>\\n\\n                        <section className=\\\"mb-6 text-left\\\">\\n                            <div className=\\\"flex flex-col gap-2\\\">\\n                                <button\\n                                    onClick={handleQuestion}\\n                                    className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                                >\\n                                    Ответы на частые вопросы\\n                                </button>\\n                                <button\\n                                    onClick={handleInstruction}\\n                                    className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                                >\\n                                    Инструкция\\n                                </button>\\n                                <button\\n                                    onClick={handleRequirements}\\n                                    className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                                >\\n                                    Требования к отчету\\n                                </button>\\n                                <button\\n                                    onClick={handleHomeClick}\\n                                    className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                                >\\n                                    На главную\\n                                </button>\\n                            </div>\\n                        </section>\\n                    {/*</div>*/}\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default AboutPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/SellerReportsPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useLocation, useNavigate} from 'react-router-dom';\\nimport {getMe, getOrderBySellerId, updateOrderStatus} from '../services/api';\\nimport {AxiosResponse} from 'axios';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {OrderStatus} from '../enums';\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    brand: string;\\n    article: string;\\n    category: string;\\n    key_word: string;\\n    general_repurchases: number;\\n    daily_repurchases: number;\\n    price: number;\\n    wb_price: number;\\n    tg: string;\\n    payment_time: string;\\n    review_requirements: string;\\n    image_path?: string;\\n    seller_id: string;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\\ninterface User {\\n    id: string;\\n    telegram_id?: number;\\n    nickname?: string;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\\ninterface Order {\\n    id: string;\\n    user_id: string;\\n    product_id: string;\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    status: OrderStatus;\\n    product: Product;\\n    user: User;\\n}\\n\\nfunction SellerReportsPage() {\\n    const navigate = useNavigate();\\n    const [orders, setOrders] = useState<Order[]>([]);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const [sellerId, setSellerId] = useState<string>('');\\n    const { search } = useLocation();\\n    const params = new URLSearchParams(search);\\n    const initialTab = params.get('tab') === 'paid'\\n        ? OrderStatus.CASHBACK_PAID\\n        : OrderStatus.CASHBACK_NOT_PAID;\\n    const [activeTab, setActiveTab] = useState<OrderStatus>(initialTab);\\n\\n    const fetchReports = async () => {\\n        if (!sellerId) return;\\n        try {\\n            const response: AxiosResponse<Order[]> = await getOrderBySellerId(sellerId);\\n            console.log(\\\"sheesh\\\");\\n            console.log(response.data[0]);\\n            setOrders(response.data);\\n        } catch (err) {\\n            console.error(\\\"Ошибка при загрузке отчетов:\\\", err);\\n            setError(\\\"Не удалось загрузить отчеты по выкупам\\\");\\n        } finally {\\n            setLoading(false);\\n        }\\n    };\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/seller-cabinet');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n\\n    useEffect(() => {\\n        async function fetchSellerId() {\\n            try {\\n                const me = await getMe();\\n                setSellerId(me.id);\\n            } catch (err) {\\n                console.error(\\\"Ошибка при получении sellerId:\\\", err);\\n            }\\n        }\\n\\n        fetchSellerId();\\n    }, []);\\n\\n    useEffect(() => {\\n        if (sellerId) {\\n            fetchReports();\\n        }\\n    }, [sellerId]);\\n\\n    const filteredOrders = orders.filter(order => order.status === activeTab);\\n\\n    const handleCashbackPaid = async (orderId: string) => {\\n        try {\\n            const formData = new FormData();\\n            formData.append(\\\"status\\\", OrderStatus.CASHBACK_PAID);\\n            await updateOrderStatus(orderId, formData);\\n            alert(\\\"Статус обновлен!\\\");\\n            fetchReports();\\n        } catch (err) {\\n            console.error(\\\"Ошибка обновления статуса:\\\", err);\\n            alert(\\\"Ошибка обновления статуса\\\");\\n        }\\n    };\\n\\n    if (loading) {\\n        return <div className=\\\"p-4 text-center\\\">Загрузка отчетов...</div>;\\n    }\\n    if (error) {\\n        return (\\n            <div className=\\\"p-4 bg-brandlight border border-brand rounded text-center\\\">\\n                <p className=\\\"text-sm text-brand\\\">{error}</p>\\n            </div>\\n        );\\n    }\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200\\\">\\n            <div className=\\\"p-4 max-w-screen-md mx-auto\\\">\\n                <div className=\\\"sticky top-0 z-10 bg-gray-200\\\">\\n\\n                    <h1 className=\\\"text-2xl font-bold mb-4 text-center\\\">Отчеты по выкупам</h1>\\n\\n                    <div className=\\\"flex mb-4 border-b\\\">\\n                        <button\\n                            onClick={() => setActiveTab(OrderStatus.CASHBACK_NOT_PAID)}\\n                            className={`px-4 py-2 font-semibold ${activeTab === OrderStatus.CASHBACK_NOT_PAID ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-600'}`}\\n                        >\\n                            Кешбек не выплачен\\n                        </button>\\n                        <button\\n                            onClick={() => setActiveTab(OrderStatus.CASHBACK_PAID)}\\n                            className={`px-4 py-2 font-semibold ${activeTab === OrderStatus.CASHBACK_PAID ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-600'}`}\\n                        >\\n                            Кешбек выплачен\\n                        </button>\\n\\n                    </div>\\n                </div>\\n\\n                <div className=\\\"flex flex-col gap-4\\\">\\n                    {filteredOrders.length ? (\\n                        filteredOrders.map((order) => (\\n                            <div\\n                                key={order.id}\\n                                onClick={() => navigate(`/seller-cabinet/reports/${order.id}`)}\\n                                className=\\\"border border-gray-200 rounded-md shadow-sm p-4 hover:shadow-md transition-shadow cursor-pointer bg-white\\\"\\n                            >\\n                                <h2 className=\\\"text-lg font-semibold\\\">{order.product.name}</h2>\\n                                <p className=\\\"text-sm text-gray-600\\\">\\n                                    Покупатель: {order.user.nickname || \\\"Не указан\\\"}\\n                                </p>\\n                                <p className=\\\"text-sm text-gray-600\\\">Статус: {order.status}</p>\\n                                {activeTab === OrderStatus.CASHBACK_NOT_PAID && (\\n                                    <button\\n                                        onClick={(e) => {\\n                                            e.stopPropagation(); // предотвращает переход по клику на карточку\\n                                            handleCashbackPaid(order.id);\\n                                        }}\\n                                        className=\\\"mt-2 w-full py-2 rounded bg-green-500 text-white font-semibold text-base hover:opacity-90 transition\\\"\\n                                    >\\n                                        Отметить как выплаченный\\n                                    </button>\\n                                )}\\n                            </div>\\n                        ))\\n                    ) : (\\n                        <p className=\\\"text-center text-gray-600\\\">Заказов не найдено</p>\\n                    )}\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default SellerReportsPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/SellerCabinet.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate} from 'react-router-dom';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {getMe, getSellerBalance} from \\\"../services/api\\\";\\n\\nfunction SellerCabinet() {\\n    const navigate = useNavigate();\\n    const [balance, setBalance] = useState(0);\\n\\n    const handleMyProductsClick = () => navigate('/my-products');\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/');\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n\\n    const handleReportsClick = () => {\\n        navigate(`/seller-cabinet/reports`);\\n    };\\n    const handleMyBalanceClick = () => {\\n        navigate(`/seller-cabinet/balance`);\\n    }\\n\\n    useEffect(() => {\\n        const fetchBalance = async () => {\\n            try {\\n                const sellerId = await getMe()\\n                const response = await getSellerBalance(sellerId.toString());\\n                console.log(\\\"response\\\");\\n                console.log(response);\\n                console.log(response.data);\\n                console.log(response.data.balance);\\n                setBalance(response.data);\\n            } catch (error) {\\n                console.error(\\\"Ошибка получения баланса продавца:\\\", error);\\n            }\\n        };\\n        fetchBalance();\\n    }, []);\\n\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200\\\">  {/* Обертка на весь экран */}\\n\\n            <div className=\\\"p-4 max-w-screen-sm mx-auto relative\\\">\\n                <h1 className=\\\"text-xl font-bold mb-4 text-center\\\">Кабинет продавца</h1>\\n\\n                <p className=\\\"text-sm text-gray-700 mb-6 text-center\\\">\\n                    ВБКэшбэк — сервис для управления раздачами товара за кэшбэк\\n                </p>\\n\\n                <div className=\\\"bg-white border border-darkGray rounded-md p-4 mb-4 relative\\\"\\n                >\\n                    <button\\n                        onClick={handleMyBalanceClick}\\n                        className=\\\"\\n    absolute top-2 right-2\\n    bg-brand\\n    hover:bg-brand-dark\\n    text-white\\n    rounded-md\\n    px-3 py-1.5\\n    text-sm font-semibold\\n    transition-colors\\n  \\\"\\n                    >\\n                        Пополнить\\n                    </button>\\n\\n                    <p className=\\\"text-md font-semibold mb-1\\\">Баланс</p>\\n                    <p className=\\\"text-2xl font-bold\\\">{balance} раздач</p>\\n                    <p className=\\\"text-sm text-gray-500\\\">Доступное количество раздач</p>\\n                </div>\\n\\n                {/*<div className=\\\"flex justify-end mb-4\\\">*/}\\n                    <button\\n                        onClick={() => navigate('/create-product')}\\n                        className=\\\"w-full border bg-white border-brand rounded-md px-4 py-2 text-base font-semibold hover:bg-gray-200-100\\\"\\n                    >\\n                        Разместить товар\\n                    </button>\\n                {/*</div>*/}\\n\\n                <div\\n                    onClick={handleMyProductsClick}\\n                    className=\\\"bg-white border border-darkGray rounded-md p-4 mb-4 mt-4 cursor-pointer\\\"\\n                >\\n                    <p className=\\\"text-md font-semibold mb-1\\\">Мои товары</p>\\n                    <p className=\\\"text-sm text-gray-500\\\">Товары по раздачам</p>\\n                </div>\\n\\n                <div\\n                    onClick={handleReportsClick}\\n                    className=\\\"bg-white border border-darkGray rounded-md p-4 mb-4 cursor-pointer\\\"\\n                >\\n                    <p className=\\\"text-md font-semibold mb-1\\\">Отчеты по выкупам</p>\\n                    <p className=\\\"text-sm text-gray-500\\\">\\n                        Просмотр отчетов по покупкам ваших товаров\\n                    </p>\\n                </div>\\n\\n\\n                <div\\n                    onClick={handleSupportClick}\\n                    className=\\\"bg-white border border-brand rounded-xl shadow-sm p-4 mb-4 font-semibold cursor-pointer flex items-center gap-3\\\"\\n                >\\n                    <img src=\\\"/icons/support.png\\\" alt=\\\"Support\\\" className=\\\"w-7 h-7\\\"/>\\n                    <div className=\\\"flex flex-col\\\">\\n                        <span>Техподдержка</span>\\n                        <span className=\\\"text-xs text-gray-500\\\">\\n                            Оперативно ответим на все вопросы\\n                        </span>\\n                    </div>\\n                    <img\\n                        src=\\\"/icons/small_arrow.png\\\"\\n                        alt=\\\"arrow\\\"\\n                        className=\\\"w-5 h-5 ml-auto\\\"\\n                    />\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n\\n\\nexport default SellerCabinet;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/MyOrdersPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {Link, useLocation, useNavigate} from 'react-router-dom';\\nimport {getUserOrders, updateOrderStatus} from '../services/api';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport GetUploadLink from \\\"../components/GetUploadLink\\\";\\n\\nconst STEP_NAMES: { [key: number]: string } = {\\n    1: 'Шаг 1: Поиск товара по ключевому слову',\\n    2: 'Шаг 2: Артикул товара',\\n    3: 'Шаг 3: Добавить в избранное',\\n    4: 'Шаг 4: Ввод реквизитов',\\n    5: 'Шаг 5: Оформление заказа',\\n    6: 'Шаг 6: Получение товара',\\n    7: 'Шаг 7: Отзыв и чек',\\n    8: 'Шаг 8: Все выполнено',\\n};\\n\\nconst getOrderStepLink = (order: Order): string => {\\n    if (order.step >= 1 && order.step <= 7) {\\n        return `/order/${order.id}/step-${order.step + 1}`;\\n    }\\n    return `/order/${order.id}/order-info`;\\n};\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    brand: string;\\n    article: string;\\n    category: string;\\n    key_word: string;\\n    general_repurchases: number;\\n    daily_repurchases: number;\\n    price: number;\\n    wb_price: number;\\n    tg: string;\\n    payment_time: string;\\n    review_requirements: string;\\n    image_path?: string;\\n    seller_id: string;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\\ninterface Order {\\n    id: string;\\n    user_id: string;\\n    product_id: string;\\n    card_number: string;\\n    screenshot_path: string;\\n    status: string;\\n    created_at: string;\\n    updated_at: string;\\n    step: number;\\n    product: Product;\\n    user: {\\n        nickname: string;\\n    };\\n}\\n\\nfunction MyOrdersPage() {\\n    const [orders, setOrders] = useState<Order[]>([]);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const navigate = useNavigate();\\n    const location = useLocation();\\n    const isOnOrders = location.pathname === ('/user/orders');\\n\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(`/`);\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    const fetchOrders = async () => {\\n        try {\\n            const response = await getUserOrders();\\n            setOrders(response.data);\\n        } catch (err) {\\n            console.error('Ошибка при загрузке покупок:', err);\\n            setError('Не удалось загрузить список покупок.');\\n        } finally {\\n            setLoading(false);\\n        }\\n    };\\n\\n    useEffect(() => {\\n        fetchOrders();\\n    }, []);\\n\\n    const filteredOrders = orders.filter(order => order.status !== 'cancelled');\\n\\n    const handleCancelOrder = async (orderId: string, e: React.MouseEvent) => {\\n        e.stopPropagation(); // Предотвращаем переход по карточке\\n        e.preventDefault();\\n        if (!window.confirm('Вы уверены, что хотите отменить заказ?')) return;\\n        try {\\n            const formData = new FormData();\\n            formData.append(\\\"status\\\", \\\"cancelled\\\");\\n            await updateOrderStatus(orderId, formData);\\n            alert(\\\"Заказ отменён\\\");\\n            fetchOrders();\\n        } catch (err) {\\n            console.error(\\\"Ошибка отмены заказа:\\\", err);\\n            alert(\\\"Ошибка отмены заказа\\\");\\n        }\\n    };\\n    const handleCashbackPaid = async (orderId: string, e: React.MouseEvent) => {\\n        e.stopPropagation();\\n        e.preventDefault();\\n        try {\\n            const formData = new FormData();\\n            formData.append(\\\"status\\\", \\\"payment_confirmed\\\");\\n            await updateOrderStatus(orderId, formData);\\n            // Вот эта строка обновит статус в локальном стейте и вызовет перерендер\\n            setOrders(prev =>\\n                prev.map(o =>\\n                    o.id === orderId\\n                        ? { ...o, status: \\\"payment_confirmed\\\" }\\n                        : o\\n                )\\n            );\\n        } catch (err) {\\n            console.error(\\\"Ошибка отметки выплаты кешбека:\\\", err);\\n            alert(\\\"Возникла ошибка, попробуйте позже\\\");\\n        }\\n    };\\n\\n\\n    return (\\n        <div className=\\\"bg-gray-200 bg-fixed min-h-screen\\\">\\n            <div className=\\\"flex w-max mx-auto mb-2 mt-2 bg-gray-200 p-1 rounded-full\\\">\\n                <Link\\n                    to=\\\"/catalog\\\"\\n                    className={`\\n            px-4 py-2 rounded-full\\n            ${!isOnOrders\\n                        ? 'bg-white text-black'\\n                        : 'text-gray-500 hover:text-black'}\\n          `}\\n                >\\n                    Каталог\\n                </Link>\\n\\n                <Link\\n                    to=\\\"/user/orders\\\"\\n                    className={`\\n            px-4 py-2 rounded-full\\n            ${isOnOrders\\n                        ? 'bg-white text-black'\\n                        : 'text-gray-500 hover:text-black'}\\n          `}\\n                >\\n                    Мои покупки\\n                </Link>\\n            </div>\\n            <div className=\\\"sticky top-0 z-10 mt-2 bg-inherit\\\">\\n                <div className=\\\"flex items-center justify-center relative mb-4\\\">\\n                    <h2 className=\\\"text-2xl font-bold text-center\\\">Мои покупки</h2>\\n                </div>\\n\\n                <p className=\\\"text-sm text-gray-600 mb-4 text-center\\\">\\n                    Нажмите на карточку, чтобы открыть инструкцию\\n                </p>\\n            </div>\\n\\n            <div className=\\\"w-full flex flex-col gap-3 mb-4\\\">\\n                {loading ? (\\n                    <div className=\\\"p-4 text-center text-gray-600\\\">\\n                        Загрузка покупок…\\n                    </div>\\n                ) : error ? (\\n                    <div className=\\\"p-4 bg-brandlight border border-brand rounded text-center\\\">\\n                        <p className=\\\"text-sm text-brand\\\">{error}</p>\\n                    </div>\\n                ) : filteredOrders.length === 0 ? (\\n                    <div className=\\\"bg-white rounded-md shadow-sm p-3 text-center\\\">\\n                        Покупки не найдены\\n                    </div>\\n                ) : (\\n                    filteredOrders.map(order => {\\n                        const stepName = STEP_NAMES[order.step + 1] || `Шаг ${order.step + 1}`;\\n                        const linkTo = getOrderStepLink(order);\\n                        return (\\n                            <Link to={linkTo} key={order.id}>\\n                                <div className=\\\"relative bg-white border border-darkGray rounded-md shadow-sm p-3 flex flex-col gap-2 hover:shadow-md transition-shadow\\\">\\n                                    {/* ваш контент карточки */}\\n                                    <button\\n                                        onClick={e => handleCancelOrder(order.id, e)}\\n                                        className=\\\"absolute top-2 right-2 px-2 py-1 border border-red-500 text-red-500 text-xs rounded hover:bg-red-50 transition\\\"\\n                                    >\\n                                        Отменить\\n                                    </button>\\n                                    <div className=\\\"flex items-center gap-3\\\">\\n                                        <div className=\\\"w-16 h-16 bg-gray-200-100 relative flex-shrink-0\\\">\\n                                            {order.product.image_path ? (\\n                                                <img\\n                                                    src={\\n                                                        order.product.image_path.startsWith('http')\\n                                                            ? order.product.image_path\\n                                                            : GetUploadLink(order.product.image_path)\\n                                                    }\\n                                                    alt={order.product.name}\\n                                                    className=\\\"absolute inset-0 object-cover w-full h-full\\\"\\n                                                />\\n                                            ) : (\\n                                                <div\\n                                                    className=\\\"absolute inset-0 flex items-center justify-center text-gray-400 text-xs\\\">\\n                                                    Нет фото\\n                                                </div>\\n                                            )}\\n                                        </div>\\n                                        <div className=\\\"flex-1\\\">\\n                                        <span className=\\\"font-semibold text-sm\\\">\\n                                            {order.product.name}\\n                                        </span>\\n                                            <br/>\\n                                            <span className=\\\"text-md font-bold text-brand\\\">\\n                                            {order.product.price} ₽\\n                                        </span>\\n                                            <br/>\\n                                            <span className=\\\"text-xs text-gray-500\\\">\\n                                            Текущий шаг: {stepName}\\n                                        </span>\\n                                        </div>\\n                                    </div>\\n                                    {order.status === \\\"payment_confirmed\\\" ? (\\n                                        <span className=\\\"absolute top-10 right-2 text-xs font-semibold text-green-700\\\">\\n                                        Кешбек выплачен\\n                                      </span>\\n                                    ) : order.step === 7 ? (\\n                                        <button\\n                                          onClick={e => handleCashbackPaid(order.id, e)}\\n                                          className=\\\"absolute top-10 right-2\\n                                                px-2 py-1\\n                                                border border-blue-500\\n                                                text-blue-500 text-xs\\n                                                rounded\\n                                                hover:bg-blue-50\\n                                                transition\\n                                              \\\"\\n                                        >\\n                                          Кешбек выплачен\\n                                        </button>\\n                                    ) : null}\\n\\n                                </div>\\n                            </Link>\\n                        );\\n                    })\\n                )}\\n            </div>\\n\\n            <div\\n                onClick={handleSupportClick}\\n                className=\\\"bg-white border border-brand rounded-xl shadow-sm p-4 mb-4 font-semibold cursor-pointer flex items-center gap-3\\\"\\n            >\\n                <img src=\\\"/icons/support.png\\\" alt=\\\"Support\\\" className=\\\"w-7 h-7\\\"/>\\n                <div className=\\\"flex flex-col\\\">\\n                    <span>Техподдержка</span>\\n                    <span className=\\\"text-xs text-gray-500\\\">\\n                            Оперативно ответим на все вопросы\\n                        </span>\\n                </div>\\n                <img\\n                    src=\\\"/icons/small_arrow.png\\\"\\n                    alt=\\\"arrow\\\"\\n                    className=\\\"w-5 h-5 ml-auto\\\"\\n                />\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default MyOrdersPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/SellerBalance.tsx\",\n    \"content\": \"import React from 'react';\\nimport { useEffect, useState } from 'react';\\nimport { useNavigate } from 'react-router-dom';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {getMe, getSellerBalance} from \\\"../services/api\\\";\\n\\nfunction SellerBalancePage() {\\n    const handleContactAdmin = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n    const navigate = useNavigate();\\n    const [balance, setBalance] = useState(0);\\n\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/seller-cabinet');\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    useEffect(() => {\\n        const fetchBalance = async () => {\\n            try {\\n                const sellerId = await getMe()\\n                const response = await getSellerBalance(sellerId.toString());\\n                console.log(\\\"response\\\");\\n                console.log(response);\\n                console.log(response.data);\\n                console.log(response.data.balance);\\n                setBalance(response.data);\\n            } catch (error) {\\n                console.error(\\\"Ошибка получения баланса продавца:\\\", error);\\n            }\\n        };\\n        fetchBalance();\\n    }, []);\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 flex flex-col gap-4\\\">\\n\\n            <div className=\\\"border-darkGray border border-darkGray rounded-md p-4 mx-4 mt-4\\\">\\n                <p className=\\\"text-md font-semibold mb-1\\\">Баланс</p>\\n                <p className=\\\"text-2xl font-bold\\\">{balance}</p>\\n                <p className=\\\"text-sm text-gray-500\\\">Доступное количество раздач</p>\\n            </div>\\n            <p className=\\\"text-center text-gray-700 mx-4\\\">\\n                Чтобы пополнить кабинет, свяжитесь с админом.\\n            </p>\\n            <button\\n                onClick={handleContactAdmin}\\n                className=\\\"p-2 rounded-lg mx-4 text-white font-semibold bg-brand hover:bg-brand justify-center\\\"\\n            >\\n                Написать администратору\\n            </button>\\n        </div>\\n    );\\n}\\n\\nexport default SellerBalancePage;\"\n  },\n  {\n    \"path\": \"frontend/src/pages/MyProductsPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate} from 'react-router-dom';\\nimport {getMe, getProductsBySellerId} from '../services/api';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {ProductStatus} from \\\"../enums\\\";\\nimport {MeResponse} from \\\"../types/MeResponse\\\";\\n\\ninterface ModeratorReview {\\n    id: string;\\n    moderator_id: string;\\n    product_id: string;\\n    comment_to_seller?: string;\\n    comment_to_moderator?: string;\\n    status_before: ProductStatus;\\n    status_after: ProductStatus;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    price: number;\\n    status: ProductStatus;\\n    moderator_reviews?: ModeratorReview[];\\n    remaining_products: number;\\n}\\n\\n\\nfunction MyProductsPage() {\\n    const navigate = useNavigate();\\n\\n    const [products, setProducts] = useState<Product[]>([]);\\n    const [seller, setSeller] = useState<MeResponse | undefined>(undefined);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const [searchQuery, setSearchQuery] = useState('');\\n    const [filter, setFilter] = useState<'all' | 'active' | 'created' | 'rejected' | 'archived'>('all');\\n\\n    const totalCount = products.length;\\n    const moderationCount = products.filter(p => p.status === ProductStatus.CREATED || p.status === ProductStatus.DISABLED).length; //todo\\n    const publishedCount = products.filter(p => p.status === ProductStatus.ACTIVE).length;\\n    const archivedCount = products.filter(p => p.status === ProductStatus.NOT_PAID).length;\\n    const totalPlan = products\\n        .filter(p =>\\n            p.status === ProductStatus.ACTIVE ||\\n            p.status === ProductStatus.NOT_PAID\\n        )\\n        .reduce((sum, p) => sum + p.remaining_products, 0);\\n\\n    const filteredProducts = products.filter((product) => {\\n        if (filter !== 'all') {\\n            if (filter === 'created') {\\n                if (\\n                    product.status.toLowerCase() !== ProductStatus.CREATED.toLowerCase() &&\\n                    product.status.toLowerCase() !== ProductStatus.DISABLED.toLowerCase()\\n                ) {\\n                    return false;\\n                }\\n            } else if (product.status.toLowerCase() !== filter.toLowerCase()) {\\n                return false;\\n            }\\n        }\\n        if (searchQuery) {\\n            return product.name.toLowerCase().includes(searchQuery.toLowerCase());\\n        }\\n        return true;\\n    });\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/seller-cabinet');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    useEffect(() => {\\n        async function fetchProducts() {\\n            try {\\n                const response = await getProductsBySellerId();\\n                setProducts(response.data);\\n                setError('');\\n            } catch (err) {\\n                console.error('Ошибка при загрузке товаров продавца:', err);\\n                setError('Не удалось загрузить товары.');\\n            } finally {\\n                setLoading(false);\\n            }\\n        }\\n\\n        fetchProducts();\\n    }, []);\\n\\n    useEffect(() => {\\n        async function fetchSeller() {\\n            try {\\n                const me = await getMe();\\n                setSeller(me);\\n            } catch (err) {\\n                console.error(\\\"Ошибка при получении seller:\\\", err);\\n            }\\n        }\\n\\n        fetchSeller();\\n    }, []);\\n\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    const handleMyBalanceClick = () => {\\n        navigate(`/seller-cabinet/balance`);\\n    };\\n\\n    return (\\n        <div className=\\\"p-4 min-h-screen bg-gray-200 mx-auto\\\">\\n            <div className=\\\"mb-4 p-4 bg-brandlight rounded shadow\\\">\\n                <p className=\\\"text-sm\\\">\\n                    Всего карточек: <strong>{totalCount}</strong>\\n                </p>\\n                <p className=\\\"text-sm\\\">\\n                    На проверке: <strong>{moderationCount}</strong>\\n                </p>\\n                <p className=\\\"text-sm\\\">\\n                    Опубликовано: <strong>{publishedCount}</strong>\\n                </p>\\n                <p className=\\\"text-sm\\\">\\n                    В архиве: <strong>{archivedCount}</strong>\\n                </p>\\n                <p className=\\\"text-sm\\\">\\n                    Заявка оформлена и не оплачена: <strong>{archivedCount}</strong>\\n                </p>\\n                <p className=\\\"text-sm\\\">\\n                    Общий план по раздачам: <strong>{totalPlan}</strong>\\n                </p>\\n                {seller && (() => {\\n                    const missing=Math.max(0, totalPlan - seller.balance)\\n\\n                    return (missing) > 0 ? (\\n                        <p className=\\\"text-sm text-red-800\\\">\\n                            Баланс раздач: <strong>{seller.balance}</strong><br/>\\n                            Для публикации товара необходимо пополнить баланс\\n                            на <strong>{missing}</strong> раздач\\n                        </p>\\n                    ) : (\\n                        <p className=\\\"text-sm text-black\\\">\\n                            Баланс раздач: <strong>{seller.balance}</strong>\\n                        </p>\\n                    );\\n                })()}\\n\\n            </div>\\n            <div className=\\\"sticky top-0 z-10 bg-gray-200\\\">\\n                {/*<div className=\\\"flex justify-end mb-4\\\">*/}\\n                {/*    <button*/}\\n                {/*        onClick={() => navigate('/create-product')}*/}\\n                {/*        className=\\\"border border-brand rounded-md px-4 py-2 text-sm font-semibold hover:bg-gray-200-100\\\"*/}\\n                {/*    >*/}\\n                {/*        Разместить товар*/}\\n                {/*    </button>*/}\\n                {/*</div>*/}\\n\\n                {/* Блок статистики */}\\n\\n\\n                <div className=\\\"relative mb-4\\\">\\n                    <input\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"Поиск\\\"\\n                        value={searchQuery}\\n                        onChange={(e) => setSearchQuery(e.target.value)}\\n                        className=\\\"w-full border border-darkGray rounded-md py-2 pl-10 pr-3 text-sm focus:outline-none\\\"\\n                    />\\n                    <svg\\n                        className=\\\"w-5 h-5 text-gray-400 absolute left-3 top-2.5\\\"\\n                        fill=\\\"none\\\"\\n                        stroke=\\\"currentColor\\\"\\n                        strokeWidth=\\\"2\\\"\\n                        viewBox=\\\"0 0 24 24\\\"\\n                    >\\n                        <path\\n                            strokeLinecap=\\\"round\\\"\\n                            strokeLinejoin=\\\"round\\\"\\n                            d=\\\"M21 21l-4.35-4.35m0 0A7.35 7.35 0 1010.3 4.65a7.35 7.35 0 006.35 11.65z\\\"\\n                        />\\n                    </svg>\\n                </div>\\n\\n                <div className=\\\"mb-4\\\">\\n                    <select\\n                        value={filter}\\n                        onChange={(e) =>\\n                            setFilter(e.target.value as 'all' | 'active' | 'created' | 'rejected' | 'archived')\\n                        }\\n                        className=\\\"w-full border border-darkGray rounded-md py-2 px-3 text-sm focus:outline-none\\\"\\n                    >\\n                        <option value=\\\"all\\\">Все статусы</option>\\n                        <option value=\\\"active\\\">Активный</option>\\n                        <option value=\\\"created\\\">Создано / Отключено</option>\\n                        <option value=\\\"rejected\\\">Отклонено</option>\\n                        <option value=\\\"archived\\\">Архив</option>\\n                    </select>\\n                </div>\\n            </div>\\n\\n            {loading && <p className=\\\"text-sm text-gray-500\\\">Загрузка...</p>}\\n\\n            {!loading && (error || filteredProducts.length === 0) && (\\n                <div className=\\\"p-4 bg-brandlight border border-darkGray rounded text-center\\\">\\n                    <p className=\\\"text-sm text-gray-700\\\">Товары не найдены</p>\\n                </div>\\n            )}\\n\\n            <button\\n                onClick={() => navigate('/create-product')}\\n                className=\\\"w-full border border-brand rounded-md mt-4 px-4 py-2 text-base font-semibold hover:bg-gray-200-100\\\"\\n            >\\n                Разместить товар\\n            </button>\\n\\n            {!loading && !error && filteredProducts.length > 0 && (\\n                <div className=\\\"flex flex-col gap-2 mt-4\\\">\\n                    {filteredProducts.map((product) => (\\n                        <div\\n                            key={product.id}\\n                            onClick={() => navigate(`/product/${product.id}/seller`)}\\n                            className={`relative border border-gray-200 rounded-md p-3 hover:shadow transition-shadow duration-300 cursor-pointer ${\\n                                product.status.toLowerCase() === 'active'\\n                                    ? 'bg-green-100'\\n                                    : product.status.toLowerCase() === 'archived'\\n                                        ? 'bg-gray-200-400 text-black border-dashed'\\n                                        : 'bg-white'\\n                            }`}\\n\\n                        >\\n                            {product.moderator_reviews?.at(-1)?.comment_to_seller && (\\n                                <img\\n                                    src=\\\"/icons/flag.png\\\"\\n                                    alt=\\\"Комментарий\\\"\\n                                    className=\\\"absolute top-2 right-2 w-6 h-6\\\"\\n                                />\\n                            )}\\n                            <h3 className=\\\"text-md font-semibold\\\">{product.name}</h3>\\n                            <p className=\\\"text-sm text-gray-600\\\">\\n                                Цена: {product.price} ₽\\n                            </p>\\n                            <p className={`text-xs ${product.status.toLowerCase() === 'archived' ? 'text-black' : 'text-gray-400'}`}>\\n                                Статус:{' '}\\n                                {product.status === ProductStatus.ACTIVE\\n                                    ? 'Активный'\\n                                    : product.status === ProductStatus.REJECTED\\n                                        ? 'Отклонено'\\n                                        : product.status === ProductStatus.ARCHIVED\\n                                            ? 'Архив'\\n                                            : product.status === ProductStatus.CREATED ||\\n                                            product.status === ProductStatus.DISABLED\\n                                                ? 'Создано / Отключено'\\n                                                : product.status}\\n                            </p>\\n                        </div>\\n                    ))}\\n                </div>\\n            )}\\n\\n            <button\\n                onClick={handleMyBalanceClick}\\n                className=\\\"    w-full\\n                                bg-brand\\n                                text-white\\n                                rounded-full\\n                                shadow-sm\\n                                p-4\\n                                mt-4\\n                                mb-2\\n                                text-sm font-semibold\\n                                text-center\\n                                cursor-pointer\\\"\\n            >\\n                Пополнить кабинет\\n            </button>\\n            <div\\n                onClick={handleSupportClick}\\n                className=\\\"bg-white border border-brand rounded-xl shadow-sm p-4 mt-2 text-sm font-semibold cursor-pointer flex items-center gap-3\\\"\\n            >\\n                <img src=\\\"/icons/support.png\\\" alt=\\\"Support\\\" className=\\\"w-7 h-7\\\"/>\\n                <div className=\\\"flex flex-col\\\">\\n                    <span>Техподдержка</span>\\n                    <span className=\\\"text-xs text-gray-500\\\">\\n                            Оперативно ответим на все вопросы\\n                        </span>\\n                </div>\\n                <img\\n                    src=\\\"/icons/small_arrow.png\\\"\\n                    alt=\\\"arrow\\\"\\n                    className=\\\"w-5 h-5 ml-auto\\\"\\n                />\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default MyProductsPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/CompleteInstructionPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {useLocation, useNavigate} from 'react-router-dom';\\n\\nfunction CompleteInstructionPage() {\\n    const navigate = useNavigate();\\n    const location = useLocation();\\n\\n    const handleHomeClick = () => navigate('/');\\n\\n    const backRoute = location.state?.backRoute || '/';\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate, backRoute]);\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 flex items-center justify-center p-4\\\">\\n            <div className=\\\"max-w-screen-lg w-full bg-white border border-brand rounded-lg shadow-lg p-8 relative\\\">\\n                {/*<div className=\\\"bg-white rounded-lg p-4 mb-8\\\">*/}\\n                    <h2 className=\\\"text-2xl font-bold mb-6 text-center\\\">\\n                        Инструкция выкупа для покупателя\\n                    </h2>\\n                    <p className=\\\"text-base mb-8 text-left\\\">\\n                        ВБ КЭШБЭК — это бот с пошаговой инструкцией для раздачи товаров за отзыв.&nbsp;\\n                        <a\\n                            href=\\\"tg://resolve?domain=Premiumcash1&post=9\\\"\\n                            onClick={e => {\\n                                // если хочешь fallback на веб, можно проверять\\n                            }}\\n                            target=\\\"_blank\\\"\\n                            rel=\\\"noopener noreferrer\\\"\\n                            className=\\\"underline text-blue-600\\\"\\n                        >\\n                            Посмотреть видео инструкцию\\n                        </a>\\n\\n                    </p>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Шаг 1. Ключевое слово</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <li>Напишите ключевое слово и добавьте в корзину несколько товаров конкурентов. Все товары должны быть разных брендов. На этом этапе не ищите товар продавца. Поиск товара на втором шаге</li>\\n                            <li><span className=\\\"font-semibold\\\">Важно! Вводите ключевое слово вручную</span></li>\\n                        </ul>\\n                    </section>\\n\\n                    <hr className=\\\"my-6 border-darkGray\\\"/>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Шаг 2. Поиск товара</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <li>Найдите товар используя фото на втором шаге, скопируйте арткиул и вставьте в поле для проверки</li>\\n                            <p className=\\\"text-sm\\\">Если указан не правильный артикул, система не откроет доступ к следующему шагу. Артикул мы не даем.</p>\\n                            <p><strong>Товара нет в наличии на ВБ</strong></p>\\n                            <li>Добавьте товар в лист ожидания, как товар поступит, откройте инструкцию, дойдите до 5 го шага, если товар доступен к выкупу то можете выкупать</li>\\n                            <p className=\\\"text-sm\\\">Лимит на выкуп может закончится, поэтому обязательно проверьте доступность на 5м шаге</p>\\n                            <p className=\\\"font-bold\\\">Не могу найти товар</p>\\n                            <li>Чтобы быстрее найти товар, используйте фильтры по цене, цвету, размеру и другие</li>\\n                            <p className=\\\"font-bold\\\">Артикул не правильный</p>\\n                            <li>Если система показывает что артикул неправильный, значит это не тот товар</li>\\n                        </ul>\\n                    </section>\\n\\n                    <hr className=\\\"my-6 border-darkGray\\\"/>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Шаг 3. Товар в избранное</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <li>Добавьте товар и бренд в избранное. Скрин прикладывать не требуется</li>\\n                        </ul>\\n                    </section>\\n\\n                    <hr className=\\\"my-6 border-darkGray\\\"/>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Шаг 4. Реквизиты</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <li>Заполняйте реквизиты одного банка. Перевод будет проводится на усмотрение продавца по номеру карты или СБП выбранного банка. Убедитесь, что вы верно указали реквизиты</li>\\n                            <p className=\\\"font-bold\\\">Моего банка нет в списке</p>\\n                            <li>Вы можете выбрать только те банки, которые есть в списке</li>\\n                            <p className=\\\"font-bold\\\">Я указал не те реквизиты</p>\\n                            <li>Если оплата уже проведена, реквизиты поменять нельзя. В других случаях обратитесь в техподдержку</li>\\n                        </ul>\\n                    </section>\\n\\n                    <hr className=\\\"my-6 border-darkGray\\\"/>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Шаг 5. Оформление заказа</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <li>Оформите заказ, сделайте скрин и прикрепите его в отчет.\\n                                {/*Требования к скрину заказа смотрите здесь&nbsp;*/}\\n                                {/*<span onClick={openModal} className=\\\"underline text-blue-600 cursor-pointer\\\">Пример скрина заказа</span>*/}\\n                            </li>\\n                            <p className=\\\"font-bold\\\">Оформила заказ, а лимит закончился</p>\\n                            <li>Свяжитесь с техподдержкой. Мы пожем решить данный вопрос</li>\\n                        </ul>\\n                    </section>\\n\\n                    <hr className=\\\"my-6 border-darkGray\\\"/>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Шаг 6. Получение товара</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <li>Забирайте товар как обычно это делаете или через несколько дней после получения товара</li>\\n                            <li>Сделайте скрин полученного товара в личном кабинете ВБ. На скрине дожна быть указана стоимость товара, дата получения и статус доставки</li>\\n                            <li>Сделайте фото разрезанных штрих кодов на фоне товара без упаковки</li>\\n                            <li>Сдавайте отчет в день получения товара. Дата сдачи отчета и дата получения товара должны быть в один день</li>\\n                        </ul>\\n                    </section>\\n\\n                    <hr className=\\\"my-6 border-darkGray\\\"/>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Шаг 7. Публикация отзыва</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <li>С согласованием. Перед публикацией вам обязательно надо согласовать отзыв с продавцом. Не публикуйте без согласования, даже если продавец не отвечает больше 5 дней</li>\\n                            <li>Без согласования. Публикуйте отзыв через несколько дней после получения товара</li>\\n                            <li>Требования к фото. Делайте фото высокого качества, без упаковки, покажите как используете товар в своей жизни</li>\\n                            <li>Требования к тексту. Пишите больше про свои чувства и ощущения</li>\\n                            <p className=\\\"font-bold\\\">Продавец мне не отвечает несколько дней</p>\\n                            <li>Если продавец прочитал сообщение и не ответил в течение 3х дней напишите ему повторно</li>\\n                            <li>Если продавец не отвечает больше недели, свяжитесь с нами</li>\\n                            <li>Возможно вам не требуется согласование. Проверьте в вашей инструкции</li>\\n                        </ul>\\n                    </section>\\n\\n                    <hr className=\\\"my-6 border-darkGray\\\"/>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h3 className=\\\"text-xl font-bold mb-4 text-left\\\">Кэшбэк</h3>\\n                        <ul className=\\\"list-disc list-inside space-y-2 ml-6\\\">\\n                            <p>3 варианта выплаты кэшбэка:</p>\\n                            <li>После получения товара</li>\\n                            <li>После публикации отзыва</li>\\n                            <li>на 15й день после получения товара</li>\\n                            <p>Выплаты могут задерживаться до 7 дней. Это может быть связано с очередью на оплату. Выплаты проводятся вручную. Наберитесь терпения</p>\\n                            <p>Не надо писать продавцу или в техподдержку раньше чем через 7 дней</p>\\n                        </ul>\\n                    </section>\\n\\n                    <div className=\\\"flex flex-col gap-2\\\">\\n                        <button\\n                            onClick={handleHomeClick}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            На главную\\n                        </button>\\n                    </div>\\n                </div>\\n\\n            {/*</div>*/}\\n        </div>\\n    );\\n}\\n\\nexport default CompleteInstructionPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/CreateProductForm.tsx\",\n    \"content\": \"import React, {ChangeEvent, FormEvent, useEffect, useRef, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {createProduct, getProductById, updateProduct} from '../services/api';\\nimport {Category, PayoutTime} from '../enums';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport FileUploader from \\\"../components/FileUploader\\\";\\nimport {NumericInput} from \\\"../components/NumericInput\\\";\\n\\ninterface ProductFormData {\\n    id?: string;\\n    name: string;\\n    article: string;\\n    brand: string;\\n    category: Category;\\n    key_word: string;\\n    general_repurchases: string;\\n    daily_repurchases: string;\\n    price: string;\\n    wb_price: string;\\n    tg: string;\\n    payment_time: PayoutTime;\\n    review_requirements: string;\\n    requirements_agree: boolean;\\n    image_path?: string;\\n}\\n\\n//todo: написать паттерны в инпуты\\nfunction ProductForm() {\\n    const navigate = useNavigate();\\n    const {productId} = useParams();\\n    const isEditMode = Boolean(productId);\\n    const [originalFormData, setOriginalFormData] = useState<ProductFormData | null>(null);\\n    const [showConfirmation, setShowConfirmation] = useState(false);\\n    const [priceError, setPriceError] = useState('');\\n    const [repurchasesError, setRepurchasesError] = useState('');\\n    const [file, setFile] = useState<File | null>(null);\\n    const [preview, setPreview] = useState<string | null>(null);\\n    const [changedFields, setChangedFields] = useState<Record<string, { old: any, new: any }>>({});\\n\\n\\n    const inputRefs = [\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null),\\n        useRef<HTMLInputElement>(null)\\n    ];\\n\\n    const reviewRequirementsRef = useRef<HTMLTextAreaElement>(null);\\n    const agreeRef = useRef<HTMLInputElement>(null);\\n\\n    useEffect(() => {\\n        if (!file) {\\n            setPreview(null);\\n            return;\\n        }\\n        const url = URL.createObjectURL(file);\\n        setPreview(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file]);\\n\\n    const handleTextareaKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\\n        if (e.key === 'Enter') {\\n            e.preventDefault();\\n        }\\n    };\\n\\n\\n    const [formData, setFormData] = useState<ProductFormData>({\\n        name: '',\\n        article: '',\\n        brand: '',\\n        category: Category.WOMEN,\\n        key_word: '',\\n        general_repurchases: '',\\n        daily_repurchases: '',\\n        price: '',\\n        wb_price: '',\\n        tg: '',\\n        payment_time: PayoutTime.AFTER_REVIEW,\\n        review_requirements: '',\\n        requirements_agree: false,\\n        image_path: '',\\n    });\\n\\n    const handleKeyDown = (index: number) => (e: React.KeyboardEvent<HTMLInputElement>) => {\\n        if (e.key === 'Enter') {\\n            e.preventDefault();\\n            if (index === 8) {\\n                reviewRequirementsRef.current?.focus();\\n            } else {\\n                inputRefs[index + 1]?.current?.focus();\\n            }\\n        }\\n    };\\n\\n\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n\\n\\n    useEffect(() => {\\n        if (!isEditMode) {\\n            setLoading(false);\\n            return;\\n        }\\n\\n        (async () => {\\n            try {\\n                const response = await getProductById(productId!);\\n                const data = response.data;\\n\\n                const loadedData: ProductFormData = {\\n                    id: data.id,\\n                    name: data.name,\\n                    article: data.article,\\n                    brand: data.brand,\\n                    category: data.category,\\n                    key_word: data.key_word,\\n                    general_repurchases: String(data.general_repurchases),\\n                    daily_repurchases: String(data.daily_repurchases),\\n                    price: String(data.price),\\n                    wb_price: String(data.wb_price),\\n                    tg: data.tg,\\n                    payment_time: data.payment_time,\\n                    review_requirements: data.review_requirements,\\n                    requirements_agree: data.requirements_agree ?? false,\\n                    image_path: data.image_path || '', // если есть\\n                };\\n                setFormData(loadedData);\\n                setOriginalFormData(loadedData);\\n\\n                setLoading(false);\\n            } catch (err) {\\n                console.error('Ошибка при загрузке товара:', err);\\n                setError('Не удалось загрузить товар');\\n                setLoading(false);\\n            }\\n        })();\\n    }, [isEditMode, productId]);\\n\\n    // Обработчик для всех NumericInput\\n    const handleNumericFieldChange = (field: string, val: string) => {\\n        setFormData(prev => ({...prev, [field]: val}));\\n    };\\n\\n\\n    const validateField = (name: string, value: any, newFormData: ProductFormData) => {\\n        // Проверяем оба поля цены, если поменяли или цену покупателя, или цену на сайте\\n        if (['price', 'wb_price'].includes(name)) {\\n            const numPrice = Number(newFormData.price);\\n            const numWbPrice = Number(newFormData.wb_price);\\n            if (numPrice > numWbPrice) {\\n                setPriceError('Цена для покупателя не должна быть больше цены на сайте');\\n            } else {\\n                setPriceError('');\\n            }\\n        }\\n\\n        // Аналогично — оба поля выкупа\\n        if (['daily_repurchases', 'general_repurchases'].includes(name)) {\\n            if (newFormData.daily_repurchases > newFormData.general_repurchases) {\\n                setRepurchasesError('Ежедневные выкупы не могут превышать общий план');\\n            } else {\\n                setRepurchasesError('');\\n            }\\n        }\\n    };\\n\\n\\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\\n        const {name, value, type, checked} = e.target as HTMLInputElement;\\n        const newValue = type === 'checkbox'\\n            ? checked\\n            : value;\\n        setFormData(prev => {\\n            const updated = {...prev, [name]: newValue};\\n            validateField(name, newValue, updated);\\n            return updated;\\n        });\\n    }\\n\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const handleSubmit = async (e: FormEvent) => {\\n        e.preventDefault();\\n\\n        if (isEditMode && originalFormData) {\\n            const changes: Record<string, { old: any, new: any }> = {};\\n            Object.keys(formData).forEach((key) => {\\n                if (formData[key as keyof ProductFormData] !== originalFormData[key as keyof ProductFormData]) {\\n                    changes[key] = {\\n                        old: originalFormData[key as keyof ProductFormData],\\n                        new: formData[key as keyof ProductFormData],\\n                    };\\n                }\\n            });\\n            if (Object.keys(changes).length > 0) {\\n                setChangedFields(changes);\\n                setShowConfirmation(true);\\n                return;\\n            }\\n        }\\n        await submitData();\\n    };\\n\\n    const submitData = async () => {\\n\\n        try {\\n            const fd = new FormData();\\n            fd.append('name', formData.name);\\n            fd.append('article', formData.article);\\n            fd.append('brand', formData.brand);\\n            fd.append('category', formData.category);\\n            fd.append('key_word', formData.key_word);\\n            fd.append('general_repurchases', String(formData.general_repurchases));\\n            fd.append('daily_repurchases', String(formData.daily_repurchases));\\n            fd.append('price', String(Number(formData.price)));\\n            fd.append('wb_price', String(formData.wb_price));\\n            fd.append('tg', formData.tg);\\n            fd.append('payment_time', formData.payment_time);\\n            fd.append('review_requirements', formData.review_requirements);\\n            fd.append('requirements_agree', String(formData.requirements_agree));\\n\\n            if (file) {\\n                fd.append('image', file);\\n            }\\n\\n            if (isEditMode) {\\n                await updateProduct(productId!, fd);\\n                navigate(`/product/${productId}/seller`);\\n            } else {\\n                const newId = await createProduct(fd);\\n                navigate(`/product/${newId}/seller`);\\n            }\\n        } catch (err) {\\n            console.error('Ошибка при сохранении товара:', err);\\n            alert('Не удалось сохранить товар');\\n        }\\n    };\\n\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n\\n    if (error) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error}</div>;\\n    }\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-sm bg-gray-200 mx-auto\\\">\\n            <div className=\\\"sticky top-0 z-10 bg-gray-200\\\">\\n                <div className=\\\"flex justify-between items-center px-2 py-1\\\">\\n                    <button\\n                        onClick={() => navigate('/')}\\n                        type=\\\"button\\\"\\n                        className=\\\"inline-flex items-center justify-center whitespace-nowrap py-1 px-1 text-xs font-semibold border border-brand text-brand bg-transparent rounded appearance-none focus:outline-none\\\"\\n                    >\\n                        Отменить\\n                    </button>\\n                </div>\\n                <div className=\\\"px-2\\\">\\n                    <h1 className=\\\"text-center text-base font-bold -mt-1\\\">\\n                        {isEditMode ? 'Редактировать товар' : 'Добавить товар'}\\n                    </h1>\\n                </div>\\n            </div>\\n\\n\\n            <form id=\\\"product-form\\\" onSubmit={handleSubmit} className=\\\"space-y-4\\\">\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Название товара</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        ref={inputRefs[0]}\\n                        onKeyDown={handleKeyDown(0)}\\n                        name=\\\"name\\\"\\n                        value={formData.name}\\n                        onChange={handleInputChange}\\n                        required\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                        placeholder=\\\"Название товара\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Артикул</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        ref={inputRefs[1]}\\n                        onKeyDown={handleKeyDown(1)}\\n                        name=\\\"article\\\"\\n                        value={formData.article}\\n                        onChange={handleInputChange}\\n                        required\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                        placeholder=\\\"Артикул\\\"\\n                    />\\n                </div>\\n\\n                <FileUploader\\n                    label=\\\"Фото товара\\\"\\n                    file={file}\\n                    preview={preview}\\n                    onFileChange={setFile}\\n                />\\n\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Бренд</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        ref={inputRefs[2]}\\n                        onKeyDown={handleKeyDown(2)}\\n                        name=\\\"brand\\\"\\n                        value={formData.brand}\\n                        onChange={handleInputChange}\\n                        required\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Категория</label>\\n                    <select\\n\\n                        name=\\\"category\\\"\\n                        value={formData.category}\\n                        onChange={handleInputChange}\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                    >\\n                        {Object.values(Category).map((cat) => (\\n                            <option key={cat} value={cat}>\\n                                {cat}\\n                            </option>\\n                        ))}\\n                    </select>\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Ключевое слово</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        ref={inputRefs[3]}\\n                        onKeyDown={handleKeyDown(3)}\\n                        name=\\\"key_word\\\"\\n                        value={formData.key_word}\\n                        onChange={handleInputChange}\\n                        required\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                        placeholder=\\\"Например, 'рубашка в клетку'\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Общий план выкупов</label>\\n                    <NumericInput\\n                        name=\\\"general_repurchases\\\"\\n                        ref={inputRefs[4]}\\n                        onKeyDown={handleKeyDown(4)}\\n                        value={formData.general_repurchases}\\n                        onValueChange={handleNumericFieldChange}\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">План выкупов на сутки</label>\\n                    <NumericInput\\n                        name=\\\"daily_repurchases\\\"\\n                        ref={inputRefs[5]}\\n                        onKeyDown={handleKeyDown(5)}\\n                        value={formData.daily_repurchases}\\n                        onValueChange={handleNumericFieldChange}\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                    />\\n                    {repurchasesError && (\\n                        <p className=\\\"text-red-500 text-xs mt-1\\\">{repurchasesError}</p>\\n                    )}\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Цена на сайте WB (₽)</label>\\n                    <NumericInput\\n                        name=\\\"wb_price\\\"\\n                        ref={inputRefs[6]}\\n                        onKeyDown={handleKeyDown(6)}\\n                        value={formData.wb_price}\\n                        onValueChange={handleNumericFieldChange}\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Цена для покупателя (₽)</label>\\n                    <NumericInput\\n                        name=\\\"price\\\"\\n                        ref={inputRefs[7]}\\n                        onKeyDown={handleKeyDown(7)}\\n                        value={formData.price}\\n                        onValueChange={handleNumericFieldChange}\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                    />\\n                    {priceError && (\\n                        <p className=\\\"text-red-500 text-xs mt-1\\\">{priceError}</p>\\n                    )}\\n                </div>\\n\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Телеграм для связи</label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        ref={inputRefs[8]}\\n                        onKeyDown={handleKeyDown(8)}\\n                        name=\\\"tg\\\"\\n                        value={formData.tg}\\n                        onChange={handleInputChange}\\n                        required\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                        placeholder=\\\"@username\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Когда выплата </label>\\n                    <select\\n                        name=\\\"payment_time\\\"\\n                        value={formData.payment_time}\\n                        onChange={handleInputChange}\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                    >\\n                        {Object.values(PayoutTime).map((pt) => (\\n                            <option key={pt} value={pt}>\\n                                {pt}\\n                            </option>\\n                        ))}\\n                    </select>\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium mb-1\\\">Требования к отзыву</label>\\n                    <textarea\\n                        name=\\\"review_requirements\\\"\\n                        ref={reviewRequirementsRef}\\n                        onKeyDown={handleTextareaKeyDown}\\n                        value={formData.review_requirements}\\n                        onChange={handleInputChange}\\n                        rows={3}\\n                        className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                        placeholder=\\\"Опишите требования к отзыву...\\\"\\n                    />\\n                </div>\\n                <div className=\\\"flex items-center space-x-2\\\">\\n                    <input\\n                        type=\\\"checkbox\\\"\\n                        name=\\\"requirements_agree\\\"\\n                        id=\\\"requirements_agree\\\"\\n                        checked={formData.requirements_agree}\\n                        onChange={handleInputChange}\\n                        ref={agreeRef}\\n                        className=\\\"h-4 w-4 text-brand border-darkGray rounded\\\"\\n                    />\\n                    <label htmlFor=\\\"requirements_agree\\\" className=\\\"text-sm\\\">\\n                        Согласовать отзыв\\n                    </label>\\n                </div>\\n                <button\\n                    type=\\\"submit\\\"\\n                    className=\\\"w-full py-3 bg-brand text-white rounded-md text-sm font-semibold hover:bg-brand-dark transition-colors\\\"\\n                >\\n                    Отправить заявку\\n                </button>\\n            </form>\\n            {showConfirmation && (\\n                <div className=\\\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\\\">\\n                    <div className=\\\"bg-white p-6 rounded shadow-lg max-w-md w-full\\\">\\n                        <h2 className=\\\"text-xl font-bold mb-4\\\">Вы изменили:</h2>\\n                        <div className=\\\"bg-brandlight rounded p-4\\\">\\n                            <ul className=\\\"text-sm mb-4\\\">\\n                                {Object.entries(changedFields).map(([field, values]) => (\\n                                    <li key={field}>\\n                                        <strong>{field}</strong>: {String(values.old)} → {String(values.new)}\\n                                    </li>\\n                                ))}\\n                            </ul>\\n                            <div className=\\\"flex justify-end gap-3\\\">\\n                            </div>\\n                        </div>\\n\\n                        <div className=\\\"flex justify-end gap-3 mt-4\\\">\\n                            <button\\n                                onClick={() => setShowConfirmation(false)}\\n                                className=\\\"px-4 py-2 bg-white border border-brand rounded text-brand hover:bg-gray-200-100\\\"\\n                            >\\n                                Отмена\\n                            </button>\\n                            <button\\n                                onClick={async () => {\\n                                    setShowConfirmation(false);\\n                                    await submitData();\\n                                }}\\n                                className=\\\"px-4 py-2 bg-white text-brand rounded border border-brand\\\"\\n                            >\\n                                Все верно. Применить\\n                            </button>\\n                        </div>\\n\\n                    </div>\\n                </div>\\n            )}\\n\\n        </div>\\n    )\\n        ;\\n}\\n\\nexport default ProductForm;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/OrderReportPage.tsx\",\n    \"content\": \"import React, {useCallback, useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {AxiosResponse} from 'axios';\\nimport {getOrderReport, updateOrderStatus} from \\\"../services/api\\\";\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {OrderStatus} from \\\"../enums\\\";\\nimport GetUploadLink from \\\"../components/GetUploadLink\\\";\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    article?: string;\\n    status?: OrderStatus;\\n    cashback: number;\\n}\\n\\nfunction OrderReportPage() {\\n    const {orderId} = useParams<{ orderId: string }>();\\n    const navigate = useNavigate();\\n    const [report, setReport] = useState<OrderReport | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n\\n    const copyToClipboard = useCallback((text: string) => {\\n        navigator.clipboard.writeText(text)\\n            .then(() => {\\n                // Здесь можно заменить alert на Toast или иной UI-фидбэк\\n                alert(`Скопировано: ${text}`);\\n            })\\n            .catch(() => alert('Не удалось скопировать'));\\n    }, []);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReport(response.data);\\n            })\\n            .catch((err: any) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n                setError('Не удалось загрузить отчет');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [orderId]);\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/seller-cabinet/reports');\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const handleCashbackPaid = async (orderId: string) => {\\n        try {\\n            const formData = new FormData();\\n            formData.append('status', OrderStatus.CASHBACK_PAID);\\n            await updateOrderStatus(orderId, formData);\\n            alert('Статус обновлен!');\\n            // При возврате на список, сразу на вкладке \\\"выплаченные\\\"\\n            navigate(\\n                { pathname: '/seller-cabinet/reports', search: '?tab=paid' },\\n                { replace: true }\\n            );\\n\\n        } catch {\\n            alert('Ошибка обновления статуса');\\n        }\\n    };\\n\\n    if (loading) {\\n        return <div className=\\\"p-6 text-center text-xl\\\">Загрузка отчета...</div>;\\n    }\\n    if (error || !report) {\\n        return <div className=\\\"p-6 text-center text-red-600 text-xl\\\">{error || 'Отчет не найден'}</div>;\\n    }\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 py-6\\\">\\n            <div className=\\\"max-w-screen-md mx-auto bg-white shadow-lg rounded-lg p-6\\\">\\n                <h1 className=\\\"text-2xl font-bold mb-6 text-center\\\">Отчет по заказу</h1>\\n\\n                {(report.search_screenshot_path || report.cart_screenshot_path) && (\\n                    <section className=\\\"mb-6 p-4 bg-gray-200 rounded-md\\\">\\n                        <h2 className=\\\"text-xl font-semibold mb-2\\\">Шаг 1. Скрины корзины</h2>\\n                        {report.search_screenshot_path && (\\n                            <img\\n                                src={GetUploadLink(report.search_screenshot_path)}\\n                                alt=\\\"Скрин поискового запроса\\\"\\n                                className=\\\"mt-2 w-full rounded-md\\\"\\n                            />\\n                        )}\\n                        {report.cart_screenshot_path && (\\n                            <img\\n                                src={GetUploadLink(report.cart_screenshot_path)}\\n                                alt=\\\"Скрин корзины\\\"\\n                                className=\\\"mt-2 w-full rounded-md\\\"\\n                            />\\n                        )}\\n                    </section>\\n                )}\\n\\n                {report.article && (\\n                    <section className=\\\"mb-6 p-4 bg-gray-200 rounded-md\\\">\\n                        <h2 className=\\\"text-xl font-semibold mb-2\\\">Шаг 2. Артикул товара</h2>\\n                        <p className=\\\"text-base\\\">{report.article}</p>\\n                    </section>\\n                )}\\n\\n                <section className=\\\"mb-6 p-4 bg-gray-200 rounded-md\\\">\\n                    <h2 className=\\\"text-xl font-semibold mb-2\\\">Шаг 3. Товар и бренд добавлены в избранное</h2>\\n                    <p className=\\\"text-base\\\">Ваш товар и бренд успешно добавлены в избранное.</p>\\n                </section>\\nё\\n\\n                {report.final_cart_screenshot_path && (\\n                    <section className=\\\"mb-6 p-4 bg-gray-200 rounded-md\\\">\\n                        <h2 className=\\\"text-xl font-semibold mb-2\\\">Шаг 4. Финальный скрин корзины</h2>\\n                        <img\\n                            src={GetUploadLink(report.final_cart_screenshot_path)}\\n                            alt=\\\"Финальный скрин корзины\\\"\\n                            className=\\\"mt-2 w-full rounded-md\\\"\\n                        />\\n                    </section>\\n                )}\\n\\n                {(report.delivery_screenshot_path || report.barcodes_screenshot_path) && (\\n                    <section className=\\\"mb-6 p-4 bg-gray-200 rounded-md\\\">\\n                        <h2 className=\\\"text-xl font-semibold mb-2\\\">Шаг 5. Скрины доставки и штрихкодов</h2>\\n                        {report.delivery_screenshot_path && (\\n                            <img\\n                                src={GetUploadLink(report.delivery_screenshot_path)}\\n                                alt=\\\"Скрин доставки\\\"\\n                                className=\\\"mt-2 w-full rounded-md\\\"\\n                            />\\n                        )}\\n                        {report.barcodes_screenshot_path && (\\n                            <img\\n                                src={GetUploadLink(report.barcodes_screenshot_path)}\\n                                alt=\\\"Скрин штрихкодов\\\"\\n                                className=\\\"mt-2 w-full rounded-md\\\"\\n                            />\\n                        )}\\n                    </section>\\n                )}\\n\\n                {(report.review_screenshot_path || report.receipt_screenshot_path || report.receipt_number) && (\\n                    <section className=\\\"mb-6 p-4 bg-gray-200 rounded-md\\\">\\n                        <h2 className=\\\"text-xl font-semibold mb-2\\\">Шаг 6. Скрины отзыва и чека</h2>\\n                        {report.review_screenshot_path && (\\n                            <img\\n                                src={GetUploadLink(report.review_screenshot_path)}\\n                                alt=\\\"Скрин отзыва\\\"\\n                                className=\\\"mt-2 w-full rounded-md\\\"\\n                            />\\n                        )}\\n                        {report.receipt_screenshot_path && (\\n                            <img\\n                                src={GetUploadLink(report.receipt_screenshot_path)}\\n                                alt=\\\"Скрин электронного чека\\\"\\n                                className=\\\"mt-2 w-full rounded-md\\\"\\n                            />\\n                        )}\\n                        {report.receipt_number && (\\n                            <p className=\\\"text-base mt-2\\\">Номер чека: {report.receipt_number}</p>\\n                        )}\\n                    </section>\\n                )}\\n\\n\\n                {(report.card_number || report.phone_number || report.name || report.bank) && (\\n                    <section className=\\\"mb-6 p-4 bg-gray-200 rounded-md\\\">\\n                        <div className=\\\"flex items-center justify-between mb-2\\\">\\n                            <h2 className=\\\"text-xl font-semibold\\\">Реквизиты</h2>\\n                        </div>\\n                        {report.card_number && (\\n                            <div className=\\\"flex items-center justify-between mb-1\\\">\\n                                <span className=\\\"text-base\\\">Номер карты: {report.card_number}</span>\\n                                <button\\n                                    onClick={() => copyToClipboard(report.card_number!)}\\n                                    className=\\\"ml-2\\\"\\n                                >\\n                                    <img\\n                                        src=\\\"/icons/copy.png\\\"\\n                                        alt=\\\"Скопировать\\\"\\n                                        className=\\\"w-5 h-5\\\"\\n                                    />\\n                                </button>\\n                            </div>\\n                        )}\\n                        {report.phone_number && (\\n                            <div className=\\\"flex items-center justify-between mb-1\\\">\\n                                <span className=\\\"text-base\\\">Телефон: {report.phone_number}</span>\\n                                <button\\n                                    onClick={() => copyToClipboard(report.phone_number!)}\\n                                    className=\\\"ml-2\\\"\\n                                >\\n                                    <img\\n                                        src=\\\"/icons/copy.png\\\"\\n                                        alt=\\\"Скопировать\\\"\\n                                        className=\\\"w-5 h-5\\\"\\n                                    />\\n                                </button>\\n                            </div>\\n                        )}\\n                        {report.name && (\\n                            <div className=\\\"flex items-center justify-between mb-1\\\">\\n                                <span className=\\\"text-base\\\">Имя: {report.name}</span>\\n                                <button\\n                                    onClick={() => copyToClipboard(report.name!)}\\n                                    className=\\\"ml-2\\\"\\n                                >\\n                                    <img\\n                                        src=\\\"/icons/copy.png\\\"\\n                                        alt=\\\"Скопировать\\\"\\n                                        className=\\\"w-5 h-5\\\"\\n                                    />\\n                                </button>\\n                            </div>\\n                        )}\\n                        {report.bank && (\\n                            <div className=\\\"flex items-center justify-between mb-1\\\">\\n                                <span className=\\\"text-base\\\">Банк: {report.bank}</span>\\n                                <button\\n                                    onClick={() => copyToClipboard(report.bank!)}\\n                                    className=\\\"ml-2\\\"\\n                                >\\n                                    <img\\n                                        src=\\\"/icons/copy.png\\\"\\n                                        alt=\\\"Скопировать\\\"\\n                                        className=\\\"w-5 h-5\\\"\\n                                    />\\n                                </button>\\n                            </div>\\n                        )}\\n                        {report.cashback && (\\n                            <div className=\\\"flex items-center justify-between\\\">\\n                                <span className=\\\"text-base\\\">Кешбек: {report.cashback}</span>\\n                                <button\\n                                    onClick={() => copyToClipboard(report.cashback.toString()!)}\\n                                    className=\\\"ml-2\\\"\\n                                >\\n                                    <img\\n                                        src=\\\"/icons/copy.png\\\"\\n                                        alt=\\\"Скопировать\\\"\\n                                        className=\\\"w-5 h-5\\\"\\n                                    />\\n                                </button>\\n                            </div>\\n                        )}\\n                    </section>\\n                )}\\n\\n                {report.status === OrderStatus.CASHBACK_NOT_PAID &&\\n                    <button\\n                        onClick={() => handleCashbackPaid(orderId!)}\\n                        className=\\\" w-full py-2 mt-3 rounded bg-green-500 text-white font-semibold text-lg\\\"\\n                    >\\n                        Отметить как выплаченный\\n                    </button>\\n                }\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default OrderReportPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/RequirementsPage.tsx\",\n    \"content\": \"import React, { useEffect, useState } from 'react';\\nimport { on } from \\\"@telegram-apps/sdk\\\";\\nimport { useNavigate } from 'react-router-dom';\\n\\n\\ntype ModalContent = { src: string; isVideo: boolean };\\n\\nfunction RequirementsPage() {\\n    const navigate = useNavigate();\\n\\n\\n    // Пути к картинкам в public\\n    const orderImgPath = '/images/order.jpg';\\n    const receivingImgPath = '/images/receiving.jpg';\\n    const feedbackImgPath = '/images/feedback.jpg';\\n    const barcodeImgPath = '/images/barcode.jpg';\\n    const receiptVideoPath = '/images/electronic_receipt.mp4';\\n\\n    // единственное состояние для модалки\\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\\n\\n    const openModal = (src: string) => {\\n        setModalContent({ src, isVideo: src.endsWith('.mp4') });\\n    };\\n    const closeModal = () => setModalContent(null);\\n\\n    const handleHomeClick = () => navigate('/');\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/about');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 flex items-center justify-center p-4\\\">\\n            <div className=\\\"max-w-screen-md w-full bg-white border border-brand rounded-lg shadow-lg p-8 relative\\\">\\n                <div className=\\\"space-y-8\\\">\\n                    <div className=\\\"mb-4\\\">\\n                        <h2 className=\\\"text-2xl font-bold mb-4 text-left\\\">Требования к отчету</h2>\\n                        <p className=\\\"text-base font-semibold text-left\\\">\\n                            Не закрашивайте и не обрезайте скрины — они должны быть без повреждений.<br />\\n                            За нарушение требований кэшбэк не будет выплачиваться.\\n                        </p>\\n                    </div>\\n\\n                    <hr className=\\\"border-darkGray\\\" />\\n\\n                    <ol className=\\\"list-decimal list-inside space-y-6 text-gray-800\\\">\\n                        <li className=\\\"px-4\\\">\\n                            <p className=\\\"font-semibold mb-1 text-lg\\\">Заказ оформлен</p>\\n                            <p className=\\\"mt-1\\\">\\n                                На скрине должна быть указана цена покупки и адрес ПВЗ.{' '}\\n                                <div\\n                                    onClick={() => openModal(orderImgPath)}\\n                                    className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                                >\\n                  Пример скрина заказа\\n                </div>\\n                            </p>\\n                        </li>\\n                        <li className=\\\"px-4\\\">\\n                            <p className=\\\"font-semibold mb-1 text-lg\\\">Товар получен</p>\\n                            <p className=\\\"mt-1\\\">\\n                                На скрине должен быть указан статус \\\"Доставлено\\\" и дата получения.{' '}\\n                                <div\\n                                    onClick={() => openModal(receivingImgPath)}\\n                                    className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                                >\\n                  Пример скрина получения товара\\n                </div>\\n                            </p>\\n                        </li>\\n                        <li className=\\\"px-4\\\">\\n                            <p className=\\\"font-semibold mb-1 text-lg\\\">Отзыв оставлен</p>\\n                            <p className=\\\"mt-1\\\">\\n                                На скрине должен быть опубликованный отзыв из вашего личного кабинета.{' '}\\n                                <div\\n                                    onClick={() => openModal(feedbackImgPath)}\\n                                    className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                                >\\n                  Пример отзыва\\n                </div>\\n                            </p>\\n                        </li>\\n                        <li className=\\\"px-4\\\">\\n                            <p className=\\\"font-semibold mb-1 text-lg\\\">Разрезанный штрихкод</p>\\n                            <p className=\\\"mt-1\\\">\\n                                Разрежьте штрихкод на мелкие кусочки и сделайте фото на фоне товара.{' '}\\n                                <div\\n                                    onClick={() => openModal(barcodeImgPath)}\\n                                    className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                                >\\n                  Пример разрезанного штрихкода\\n                </div>\\n                            </p>\\n                        </li>\\n                        <li className=\\\"px-4\\\">\\n                            <p className=\\\"font-semibold mb-1 text-lg\\\">Электронный чек</p>\\n                            <p className=\\\"mt-1\\\">\\n                                Для того чтобы получить Электронный чек перейдите в Профиль &rarr;\\n                                Финансы &rarr; вкладка \\\"Эл. чеки\\\" &rarr; Найдите ваш чек, откройте его &rarr;\\n                                Скопируйте номер чека и сделайте скриншот.{' '}\\n                                <div>\\n                                    {/* Кнопка для открытия модального окна */}\\n                                    <div\\n                                        onClick={() => openModal(receiptVideoPath)}\\n                                        className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                                    >\\n                                  Пример получения электронного чека\\n                                </div>\\n                                </div>\\n                            </p>\\n                        </li>\\n                    </ol>\\n\\n                    <hr className=\\\"border-darkGray\\\" />\\n\\n                    <div className=\\\"flex flex-col gap-2\\\">\\n                        <button\\n                            onClick={() => navigate('/about')}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            О сервисе\\n                        </button>\\n                        <button\\n                            onClick={() => navigate('/instruction')}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            Инструкция\\n                        </button>\\n                        <button\\n                            onClick={handleSupportClick}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            Нужна помощь\\n                        </button>\\n                        <button\\n                            onClick={handleHomeClick}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            На главную\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                {modalContent && (\\n                    <div\\n                        className=\\\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\\\"\\n                        onClick={closeModal}\\n                    >\\n                        <div\\n                            className=\\\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\\\"\\n                            onClick={e => e.stopPropagation()}\\n                        >\\n                            {/* Крестик в правом верхнем углу */}\\n                            <button\\n                                onClick={closeModal}\\n                                className=\\\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\\\"\\n                            >\\n                                &times;\\n                            </button>\\n\\n                            {modalContent.isVideo ? (\\n                                <video width=\\\"100%\\\" height=\\\"auto\\\" controls>\\n                                    <source src={modalContent.src} type=\\\"video/mp4\\\" />\\n                                    Ваш браузер не поддерживает видео.\\n                                </video>\\n                            ) : (\\n                                <img src={modalContent.src} alt=\\\"Пример\\\" className=\\\"w-full h-auto\\\" />\\n                            )}\\n                        </div>\\n                    </div>\\n                )}\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default RequirementsPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/ProductDetailPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getProductById} from '../services/api';\\nimport {AxiosResponse} from \\\"axios\\\";\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport GetUploadLink from \\\"../components/GetUploadLink\\\";\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    description?: string;\\n    price: number;\\n    article: string;\\n    image_path?: string;\\n    wb_price: number;\\n    payment_time: string;\\n    shortDescription?: string;\\n    seller_id: string;\\n}\\n\\nfunction ProductDetailPage() {\\n    const {productId} = useParams();\\n    const [product, setProduct] = useState<Product | null>(null);\\n    const navigate = useNavigate();\\n\\n    const handleOpenInstructionClick = () => {\\n        if (product) {\\n            navigate(`/product/${product.id}/instruction`);\\n        }\\n    };\\n\\n    const handleOpenSellerProducts = () => {\\n        if (!product) return;\\n        navigate(`/catalog?seller=${product.seller_id}`);\\n    };\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/catalog');\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    useEffect(() => {\\n        if (!productId) return;\\n        getProductById(productId)\\n            .then((response: AxiosResponse<Product>) => {\\n                setProduct(response.data);\\n            })\\n            .catch((error: unknown) => {\\n                console.error('Ошибка загрузки товара:', error);\\n            });\\n    }, [productId]);\\n\\n    if (!product) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n\\n    const discountPercent = product.wb_price\\n        ? (((product.wb_price - product.price) / product.wb_price) * 100).toFixed(2)\\n        : '0';\\n\\n    const getLink = (path: string) => {\\n        if (path.startsWith('http')) {\\n            return path;\\n        }\\n\\n        let url = GetUploadLink(path)\\n        console.log(`url for photo is ${url}`)\\n        return url;\\n    }\\n\\n    const savedAmount = product.wb_price - product.price;\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto\\\">\\n            <div className=\\\"relative w-full h-[60vh] overflow-hidden\\\">\\n                {product.image_path ? (\\n                    <img\\n                        src={getLink(product.image_path)}\\n                        alt={product.name}\\n                        className=\\\"absolute inset-0 w-full h-full object-cover\\\"\\n                    />\\n                ) : (\\n                    <div className=\\\"w-full h-full flex items-center justify-center text-gray-500\\\">\\n                        Нет фото\\n                    </div>\\n                )}\\n            </div>\\n\\n\\n            <h1 className=\\\"text-2xl font-bold mb-2 text-left\\\">{product.name}</h1>\\n            {product.shortDescription && (\\n                <p className=\\\"text-gray-600 mb-4 text-center\\\">{product.shortDescription}</p>\\n            )}\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                <p className=\\\"text-xl font-bold mb-1 text-brand\\\">\\n                    {product.price} ₽\\n                </p>\\n                {product.description && (\\n                    <p className=\\\"text-sm text-gray-700 mb-2\\\">{product.description}</p>\\n                )}\\n                {product.article && (\\n                    <p className=\\\"text-xs text-gray-500\\\">Арт. {product.article}</p>\\n                )}\\n            </div>\\n\\n            <div className=\\\"flex gap-2 mb-4\\\">\\n                <button\\n                    onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\\n                    className=\\\"flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\\\"\\n                >\\n                    Проверить продавца\\n                </button>\\n\\n                <button\\n                    onClick={handleOpenInstructionClick}\\n                    className=\\\"flex-1 bg-brand text-white py-2 rounded-lg border  text-center\\\"\\n                >\\n                    Выкупить товар\\n                </button>\\n            </div>\\n\\n\\n            <div\\n                onClick={() =>\\n                    navigate(`/product/${product.id}/instruction?preview=1`)\\n                }\\n                className=\\\"flex items-center justify-start mt-2 mb-2 cursor-pointer select-none\\\"\\n            >\\n                <img\\n                    src=\\\"/icons/question.png\\\"\\n                    alt=\\\"Question\\\"\\n                    className=\\\"w-7 h-7 mr-2\\\"\\n                />\\n                <span className=\\\"block text-sm text-gray-600 hover:underline\\\">\\n                Хотите узнать, как выкупить товар?\\n              </span>\\n            </div>\\n\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                <h2 className=\\\"font-semibold mb-2\\\">Условия сделки</h2>\\n                <p className=\\\"text-sm text-gray-700 mb-1\\\">\\n                    Цена на сайте WB: {product.wb_price} руб\\n                </p>\\n                <p className=\\\"text-sm text-gray-700 mb-1\\\">\\n                    Цена для вас: {product.price} руб\\n                </p>\\n                <p className=\\\"text-sm text-gray-700 mb-1\\\">\\n                    Скидка: {discountPercent}% <span className=\\\"text-gray-600\\\">(сэкономите {savedAmount} ₽)</span>\\n                </p>\\n                <p className=\\\"text-sm text-gray-700 mb-1\\\">\\n                    Условия оплаты: {product.payment_time}\\n                </p>\\n            </div>\\n\\n            <button\\n                onClick={handleOpenSellerProducts}\\n                className=\\\"block w-full bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\\\"\\n            >\\n                Перейти к товарам продавца\\n            </button>\\n\\n\\n        </div>\\n    );\\n}\\n\\nexport default ProductDetailPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/QuestionPage.tsx\",\n    \"content\": \"import React, {useEffect} from 'react';\\nimport {useNavigate} from 'react-router-dom';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\n\\nfunction QuestionPage() {\\n    const navigate = useNavigate();\\n    const handleInstruction = () => navigate('/instruction');\\n    const handleRequirements = () => navigate('/requirements');\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n    const handleAbout = () => navigate('/about');\\n    const handleHomeClick = () => navigate('/');\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/about');\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 flex items-center justify-center p-4\\\">\\n            <div className=\\\"max-w-screen-md w-full bg-white border border-brand rounded-lg shadow-lg p-6\\\">\\n                <p className=\\\"italic\\\">\\n                    Привет! Наша команда создала бота, чтобы покупатели и продавцы могли легче заключать сделки.\\n                    <br/><br/>\\n                    <strong>ВАЖНО!</strong> Бот не проводит выплат, не дает никаких гарантий, поэтому будьте осторожны.\\n                    Мы проверяем каждого продавца перед тем как разместить его, но гарантий на 100% нет.\\n                    <br/><br/>\\n                    Перед выкупом проверяйте продавцов через бота{\\\" \\\"}\\n                    <a\\n                        href=\\\"https://t.me/bigblacklist_bot\\\"\\n                        target=\\\"_blank\\\"\\n                        rel=\\\"noopener noreferrer\\\"\\n                        className=\\\"text-blue-500 hover:underline\\\"\\n                    >\\n                        @bigblacklist_bot\\n                    </a>{\\\" \\\"}\\n                    или в других группах, где пишут отзывы. Не выкупайте одновременно много товара — вам никто не возместит деньги, если продавец окажется мошенником.\\n                </p>\\n\\n                {/*<div className=\\\"bg-white rounded-lg p-4 mb-6\\\">*/}\\n                    <h1 className=\\\"text-2xl font-bold mb-6 mt-2 text-left\\\">\\n                        ЧАСТО ЗАДАВАЕМЫЕ ВОПРОСЫ (FAQ):\\n                    </h1>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h2 className=\\\"text-xl font-bold mb-6 text-left\\\">\\n                            1. Общие вопросы\\n                        </h2>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Как работает бот?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Бот помогает покупать товары с кэшбэком, соблюдая пошаговую инструкцию. Выбираете товар\\n                                – проходите инструкцию – оформляете заказ, загружаете отчеты и получаете кэшбэк.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Кто проводит выплаты?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Выплаты осуществляет продавец, а бот помогает фиксировать все этапы сделки.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Как разместить товар в боте?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Если вы продавец, оставьте заявку в боте или напишите в поддержку.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Что делать если продавец оказался мошенником?</h3>\\n                            <ul className=\\\"list-disc list-inside ml-4 mt-1\\\">\\n                                <li>\\n                                    После того как мы выясним, что продавец является мошенником, будет создана группа,\\n                                    куда будут добавлены все обманутые покупатели.\\n                                </li>\\n                                <li>\\n                                    Подробнее читайте{' '}\\n                                    <a\\n                                        href=\\\"https://telegra.ph/Protokol-protiv-moshennikov-03-04\\\"\\n                                        target=\\\"_blank\\\"\\n                                        rel=\\\"noopener noreferrer\\\"\\n                                        className=\\\"text-blue-600 hover:underline\\\"\\n                                    >\\n                                        тут\\n                                    </a>\\n                                </li>\\n                            </ul>\\n                        </div>\\n                        <hr className=\\\"my-6 border-darkGray\\\"/>\\n                    </section>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h2 className=\\\"text-xl font-bold mb-6 text-left\\\">\\n                            2. Выплаты кэшбэка\\n                        </h2>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Когда я получу кэшбэк?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Кэшбэк выплачивается согласно условиям в сделке:\\n                            </p>\\n                            <ul className=\\\"list-disc list-inside ml-4 mt-1\\\">\\n                                <li>После получения товара + 7 дней</li>\\n                                <li>После публикации отзыва + 7 дней</li>\\n                                <li>На 15-й день после получения товара + 7 дней</li>\\n                            </ul>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Возможны ли задержки?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Да, возможны задержки из-за загрузки продавца, выходных или лимитов на переводы. Все\\n                                вопросы по оплате решайте с продавцом.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Как проверить, что кэшбэк отправлен?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Вы получите уведомление в боте (если продавец его отправил). Некоторые продавцы могут не\\n                                отправлять уведомления, поэтому проверяйте поступления в банке.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Какие гарантии выплат?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Нет никаких гарантий, проверяйте продавца перед тем, как заключать сделку. Перед\\n                                покупкой проверяйте отзывы.\\n                                {/*<a*/}\\n                                {/*    href=\\\"https://t.me/bigblacklist_bot\\\"*/}\\n                                {/*    target=\\\"_blank\\\"*/}\\n                                {/*    rel=\\\"noopener noreferrer\\\"*/}\\n                                {/*    className=\\\"text-blue-600 hover:underline\\\"*/}\\n                                {/*>*/}\\n                                {/*    @bigblacklist_bot*/}\\n                                {/*</a>.*/}\\n                            </p>\\n                        </div>\\n                        <hr className=\\\"my-6 border-darkGray\\\"/>\\n                    </section>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h2 className=\\\"text-xl font-bold mb-6 text-left\\\">\\n                            3. Вопросы по инструкции\\n                        </h2>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Что делать, если артикул не проходит проверку?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Если бот не пускает дальше, значит это не тот товар. Попробуйте найти товар заново через\\n                                поиск.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Как поменять реквизиты?</h3>\\n                            <ul className=\\\"list-disc list-inside ml-4 mt-1\\\">\\n                                <li>Если кэшбэк уже отправлен – изменить ничего нельзя.</li>\\n                                <li>Пройдите все этапы до конца, и там будет возможность поменять реквизиты.</li>\\n                            </ul>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Как поменять скриншины в отчете?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Никак. Как только полностью сдадите отчет, свяжитесь с продавцом и направьте ему всю\\n                                информацию.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Можно ли купить у одного продавца несколько\\n                                товаров?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Только после получения кэшбэка за предыдущий товар. Важно! Не выкупайте несколько\\n                                товаров, пока не получите оплату.\\n                            </p>\\n                        </div>\\n                        <hr className=\\\"my-6 border-darkGray\\\"/>\\n                    </section>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h2 className=\\\"text-xl font-bold mb-6 text-left\\\">\\n                            4. Отзывы\\n                        </h2>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Нужно ли согласовывать отзыв с продавцом?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Да, если в инструкции указано \\\"С согласованием\\\".\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Продавец не отвечает на согласование отзыва. Что\\n                                делать?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Пишите повторно. Техподдержка будет решать вопросы только, если продавец окажется\\n                                мошенником.\\n                            </p>\\n                        </div>\\n                        <hr className=\\\"my-6 border-darkGray\\\"/>\\n                    </section>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h2 className=\\\"text-xl font-bold mb-6 text-left\\\">\\n                            5. Проблемы с ботом\\n                        </h2>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Не грузится бот</h3>\\n                            <p\\n                                onClick={handleSupportClick}\\n                                className=\\\"cursor-pointer text-blue-600 underline mt-1\\\"\\n                            >\\n                                Обратитесь в техподдержку\\n                            </p>\\n                        </div>\\n                        <hr className=\\\"my-6 border-darkGray\\\"/>\\n                    </section>\\n\\n                    <section className=\\\"mb-8\\\">\\n                        <h2 className=\\\"text-xl font-bold mb-6 text-left\\\">\\n                            6. Прочие вопросы\\n                        </h2>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Можно ли вернуть товар?</h3>\\n                            <p className=\\\"mt-1\\\">\\n                                Только если обнаружен брак. Подайте заявку на возврат через приложение ВБ, укажите номер\\n                                сделки. Не пишите, что вы выкупали по кэшбэку.\\n                            </p>\\n                        </div>\\n                        <div className=\\\"mb-4 text-left text-sm\\\">\\n                            <h3 className=\\\"text-lg font-bold mb-1\\\">Остались вопросы?</h3>\\n                            <p\\n                                onClick={handleSupportClick}\\n                                className=\\\"cursor-pointer text-blue-600 underline mt-1\\\"\\n                            >\\n                                Обратитесь в техподдержку\\n                            </p>\\n                        </div>\\n                        <hr className=\\\"my-6 border-darkGray\\\"/>\\n                    </section>\\n\\n                    <div className=\\\"flex flex-col gap-2\\\">\\n                        <button\\n                            onClick={handleAbout}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            О сервисе\\n                        </button>\\n                        <button\\n                            onClick={handleInstruction}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            Инструкция\\n                        </button>\\n                        <button\\n                            onClick={handleRequirements}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            Требования к отчету\\n                        </button>\\n                        <button\\n                            onClick={handleSupportClick}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            Нужна помощь\\n                        </button>\\n                        <button\\n                            onClick={handleHomeClick}\\n                            className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                        >\\n                            На главную\\n                        </button>\\n                    </div>\\n                {/*</div>*/}\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default QuestionPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/HomePage.tsx\",\n    \"content\": \"import React from 'react';\\nimport {useNavigate} from 'react-router-dom';\\nimport {getMe} from '../services/api';\\nimport {useAuth} from '../contexts/auth';\\nimport {ReferralGlowingButton} from \\\"../components/ReferralButton\\\";\\n\\nfunction HomePage() {\\n    const navigate = useNavigate();\\n    const {isModerator, loading} = useAuth();\\n\\n    window.onerror = (message, source, lineno, colno, error) => {\\n        if (typeof message === \\\"string\\\" && message.includes(\\\"window.TelegramGameProxy.receiveEvent\\\")) {\\n            return true;\\n        }\\n        console.log(typeof message, typeof message === \\\"string\\\");\\n        return false;\\n    };\\n\\n\\n    const handleAboutClick = () => navigate('/about');\\n    const handleInstructionClick = () => navigate('/instruction', {state: {backRoute: '/'}});\\n    const handleComplaintsClick = () => {\\n        window.open('https://t.me/Premiumcashb/1153', '_blank');\\n    };\\n    const handleMyOrdersClick = async () => {\\n        try {\\n            await getMe();\\n            navigate(`/user/orders`);\\n        } catch (error) {\\n            console.error('Ошибка получения данных пользователя:', error);\\n        }\\n    };\\n    const handleSellerClick = () => {\\n        navigate(`/seller-cabinet`);\\n    };\\n    const handleCatalogClick = () => navigate(`/catalog`);\\n    const handleReferralClick = () => navigate('/invite');\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank');\\n    };\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 p-6 font-body\\\">\\n            <div className=\\\"grid grid-cols-3 gap-4 mb-8\\\">\\n                <div\\n                    onClick={handleAboutClick}\\n                    className=\\\"bg-white border border-darkGray text-center rounded-md shadow-sm p-2 text-xs font-medium cursor-pointer flex flex-col items-center justify-center\\\"\\n                >\\n                    <img src=\\\"/icons/about.png\\\" alt=\\\"О сервисе\\\" className=\\\"w-4 h-4 mb-1\\\"/>\\n                    <span className=\\\"font-body\\\">О сервисе</span> {/* заголовок */}\\n                </div>\\n\\n                <div\\n                    onClick={handleInstructionClick}\\n                    className=\\\"bg-white border border-darkGray text-center rounded-md shadow-sm p-2 text-xs font-medium cursor-pointer flex flex-col items-center justify-center\\\"\\n                >\\n                    <img src=\\\"/icons/instruction.png\\\" alt=\\\"Инструкция\\\" className=\\\"w-4 h-4 mb-1\\\"/>\\n                    <span className=\\\"font-body\\\">Инструкция</span>\\n                </div>\\n\\n                <div\\n                    onClick={handleComplaintsClick}\\n                    className=\\\"bg-white border border-darkGray text-center rounded-md shadow-sm p-2 text-xs font-medium cursor-pointer flex flex-col items-center justify-center\\\"\\n                >\\n                    <img src=\\\"/icons/book.png\\\" alt=\\\"Книга жалоб\\\" className=\\\"w-4 h-4 mb-1\\\"/>\\n                    <span className=\\\"font-body\\\">Книга жалоб</span>\\n                </div>\\n            </div>\\n\\n            <div className=\\\"grid grid-cols-3 gap-4 mb-8\\\">\\n                <div className=\\\"flex flex-col gap-4 col-span-2\\\">\\n                    <div\\n                        onClick={handleMyOrdersClick}\\n                        className=\\\"bg-white border-2 border-brand rounded-lg shadow-sm p-4 text-base font-bold cursor-pointer\\\"\\n                    >\\n                        <div className=\\\"flex items-center justify-between\\\">\\n                            <div className=\\\"flex flex-col\\\">\\n                                {/* заголовок карточки */}\\n                                <span className=\\\"font-heading\\\">Мои покупки</span>\\n                                <span className=\\\"text-xs font-normal text-gray-500\\\">\\n                                    Список ваших покупок\\n                                </span>\\n                            </div>\\n                            <img\\n                                src=\\\"/icons/small_arrow.png\\\"\\n                                alt=\\\"arrow\\\"\\n                                className=\\\"w-5 h-5\\\"\\n                            />\\n                        </div>\\n                    </div>\\n\\n                    <div\\n                        onClick={handleSellerClick}\\n                        className=\\\"bg-white border-2 border-brand rounded-lg shadow-sm p-4 text-base font-bold cursor-pointer\\\"\\n                    >\\n                        <div className=\\\"flex items-center justify-between\\\">\\n                            <div className=\\\"flex flex-col\\\">\\n                                <span className=\\\"font-heading\\\">Кабинет продавца</span>\\n                                <span className=\\\"text-xs font-normal text-gray-500\\\">\\n                                    Для продавцов\\n                                </span>\\n                            </div>\\n                            <img\\n                                src=\\\"/icons/small_arrow.png\\\"\\n                                alt=\\\"arrow\\\"\\n                                className=\\\"w-5 h-5\\\"\\n                            />\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div\\n                    onClick={handleCatalogClick}\\n                    className=\\\"bg-brand rounded-lg px-1 py-4 text-sm font-semibold text-white cursor-pointer relative\\\"\\n                >\\n                    <span className=\\\"block text-left font-heading\\\">\\n                        Каталог актуальных товаров\\n                    </span>\\n                    <img\\n                        src=\\\"/icons/arrow.png\\\"\\n                        alt=\\\"arrow\\\"\\n                        className=\\\"w-11 h-11 absolute top-28 right-2\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            {/*<div*/}\\n            {/*    onClick={handleReferralClick}*/}\\n            {/*    className=\\\"bg-white border border-brand rounded-full shadow-sm p-4 mb-4 text-lg font-semibold cursor-pointer text-center\\\"*/}\\n            {/*>*/}\\n            {/*    <span className=\\\"font-body\\\">Реферальная программа</span>*/}\\n            {/*</div>*/}\\n\\n            {/* Центрируем и задаём форму как у «Помодерируем?» */}\\n\\n            <div className=\\\"flex justify-center\\\">\\n                <ReferralGlowingButton\\n                    onClick={handleReferralClick}\\n                    className=\\\"\\n                      bg-white border border-brand\\n                      rounded-full shadow-sm p-4 mb-6\\n                      text-sm font-semibold text-center\\n                      cursor-pointer w-full\\\"\\n                />\\n            </div>\\n\\n            {!loading && isModerator && (\\n                <div\\n                    onClick={() => navigate('/moderator')}\\n                    className=\\\"\\n                    bg-white border border-brand\\n                     rounded-full shadow-sm p-4 mb-4\\n                      text-sm font-semibold cursor-pointer text-center\\\"\\n                >\\n                    <span className=\\\"font-body\\\">Помодерируем?</span>\\n                </div>\\n            )}\\n\\n            <div className=\\\"flex flex-col gap-4\\\">\\n                <div\\n                    onClick={handleChannelClick}\\n                    className=\\\"bg-white border border-brand rounded-xl shadow-sm p-4 text-sm font-semibold cursor-pointer flex items-center gap-3\\\"\\n                >\\n                    <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-7 h-7\\\"/>\\n                    <div className=\\\"flex flex-col\\\">\\n                        <span className=\\\"font-body\\\">@Premiumcash1</span>\\n                        <span className=\\\"text-xs text-gray-500\\\">Подпишись на канал</span>\\n                    </div>\\n                    <img\\n                        src=\\\"/icons/small_arrow.png\\\"\\n                        alt=\\\"arrow\\\"\\n                        className=\\\"w-5 h-5 ml-auto\\\"\\n                    />\\n                </div>\\n\\n                <div\\n                    onClick={handleSupportClick}\\n                    className=\\\"bg-white border border-brand rounded-xl shadow-sm p-4 text-sm font-semibold cursor-pointer flex items-center gap-3\\\"\\n                >\\n                    <img src=\\\"/icons/support.png\\\" alt=\\\"Support\\\" className=\\\"w-7 h-7\\\"/>\\n                    <div className=\\\"flex flex-col\\\">\\n                        <span className=\\\"font-body\\\">Техподдержка</span>\\n                        <span className=\\\"text-xs text-gray-500\\\">\\n                            Оперативно ответим на все вопросы\\n                        </span>\\n                    </div>\\n                    <img\\n                        src=\\\"/icons/small_arrow.png\\\"\\n                        alt=\\\"arrow\\\"\\n                        className=\\\"w-5 h-5 ml-auto\\\"\\n                    />\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n\\n\\nexport default HomePage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/PushAdminPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {deletePush, fetchPushes} from '../../services/api';\\nimport {useNavigate} from 'react-router-dom';\\nimport {on} from '@telegram-apps/sdk';\\n\\ninterface Push {\\n    id: string;\\n    title: string;\\n    text: string;\\n    button_text?: string;\\n    button_link?: string;\\n}\\n\\nconst PushAdminPage: React.FC = () => {\\n    const navigate = useNavigate();\\n\\n    const [pushes, setPushes] = useState<Push[]>([]);\\n    const [isLoading, setIsLoading] = useState<boolean>(true);\\n    const [error, setError] = useState<string>('');\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/moderator');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    // Load pushes on mount\\n    useEffect(() => {\\n        const loadPushes = async () => {\\n            setIsLoading(true);\\n            try {\\n                const data = await fetchPushes();\\n                setPushes(data);\\n            } catch (err) {\\n                setError('Ошибка загрузки рассылок');\\n            } finally {\\n                setIsLoading(false);\\n            }\\n        };\\n        loadPushes();\\n    }, []);\\n\\n    const handleDeletePush = async (id: string, event: React.MouseEvent) => {\\n        event.stopPropagation(); // Prevent row click\\n        if (!window.confirm('Вы действительно хотите удалить эту рассылку?')) return;\\n        try {\\n            await deletePush(id);\\n            const updatedPushes = await fetchPushes();\\n            setPushes(updatedPushes);\\n            alert('Рассылка удалена');\\n        } catch (err) {\\n            alert('Ошибка удаления рассылки');\\n            console.error(err);\\n        }\\n    };\\n\\n    return (\\n        <div className=\\\"p-4\\\">\\n            <h1 className=\\\"text-2xl font-bold mb-4 text-brand\\\">Управление рассылками</h1>\\n            {isLoading ? (\\n                <div>Загрузка...</div>\\n            ) : error ? (\\n                <div className=\\\"text-red-500\\\">{error}</div>\\n            ) : (\\n                <>\\n                    <table className=\\\"min-w-full table-fixed border border-darkGray\\\">\\n                        <thead className=\\\"bg-brandlight\\\">\\n                        <tr>\\n                            <th className=\\\"border border-darkGray p-2 text-left text-base\\\">Название</th>\\n                            <th className=\\\"border border-darkGray p-2 text-left text-base\\\">Текст рассылки</th>\\n                            <th className=\\\"border border-darkGray p-2 text-left text-base\\\">Кнопка</th>\\n                            <th className=\\\"border border-darkGray p-2 w-12\\\"></th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        {pushes.map((push) => (\\n                            <tr\\n                                key={push.id}\\n                                className=\\\"cursor-pointer hover:bg-gray-200-50\\\"\\n                                onClick={() => navigate(`/moderator/pushes/${push.id}`)}\\n                            >\\n                                <td className=\\\"border border-darkGray p-2 text-base\\\">{push.title}</td>\\n                                <td className=\\\"border border-darkGray p-2 text-base\\\">{push.text}</td>\\n                                <td className=\\\"border border-darkGray p-2 text-base\\\">\\n                                    {push.button_text ? (\\n                                        <span>{push.button_text}</span>\\n                                    ) : (\\n                                        '—'\\n                                    )}\\n                                </td>\\n                                <td className=\\\"border border-darkGray p-2 text-center w-12\\\">\\n                                    <img\\n                                        src=\\\"/icons/trash.png\\\"\\n                                        alt=\\\"Удалить\\\"\\n                                        className=\\\"w-4 h-4 cursor-pointer\\\"\\n                                        onClick={(e) => handleDeletePush(push.id, e)}\\n                                    />\\n                                </td>\\n                            </tr>\\n                        ))}\\n                        {pushes.length === 0 && (\\n                            <tr>\\n                                <td colSpan={4} className=\\\"border border-darkGray p-2 text-center\\\">\\n                                    Нет созданных рассылок.\\n                                </td>\\n                            </tr>\\n                        )}\\n                        </tbody>\\n                    </table>\\n\\n                    <div className=\\\"fixed bottom-4 right-4\\\">\\n                        <button\\n                            onClick={() => navigate(`/moderator/pushes/new`)}\\n                            className=\\\"flex items-center justify-center w-12 h-12 rounded-full bg-green-500 text-white shadow-xl hover:bg-green-600\\\"\\n                            title=\\\"Добавить новую рассылку\\\"\\n                        >\\n                            +\\n                        </button>\\n                    </div>\\n                </>\\n            )}\\n        </div>\\n    );\\n};\\n\\nexport default PushAdminPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/PushDetailsPage.tsx\",\n    \"content\": \"import React, {useEffect, useRef, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {on} from '@telegram-apps/sdk';\\nimport {\\n    activatePush,\\n    deletePush,\\n    getBannedUsers,\\n    getClients,\\n    getModerators,\\n    getPush,\\n    getSellers,\\n    getUsers,\\n} from '../../services/api';\\nimport GetUploadLink from '../../components/GetUploadLink';\\n\\ninterface Push {\\n    id: string;\\n    title: string;\\n    text: string;\\n    image_path?: string;\\n    button_text?: string;\\n    button_link?: string;\\n    creator: User;\\n}\\n\\ninterface User {\\n    id: string;\\n    name: string;\\n    nickname: string;\\n}\\n\\nconst PushDetailsPage: React.FC = () => {\\n    const {pushId} = useParams<{ pushId: string }>();\\n    const navigate = useNavigate();\\n\\n    const [push, setPush] = useState<Push | null>(null);\\n    const [filter, setFilter] = useState<string>('all');\\n    const [users, setUsers] = useState<User[]>([]);\\n    const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\\n    const [loadingUsers, setLoadingUsers] = useState<boolean>(false);\\n    const [loadingPush, setLoadingPush] = useState<boolean>(false);\\n    const [error, setError] = useState<string>('');\\n\\n    const [actionsOpen, setActionsOpen] = useState<boolean>(false);\\n    const menuRef = useRef<HTMLDivElement>(null);\\n\\n    useEffect(() => {\\n        const handleClickOutside = (event: MouseEvent) => {\\n            if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\\n                setActionsOpen(false);\\n            }\\n        };\\n        document.addEventListener('mousedown', handleClickOutside);\\n        return () => {\\n            document.removeEventListener('mousedown', handleClickOutside);\\n        };\\n    }, []);\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/moderator/pushes');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    useEffect(() => {\\n        const fetchPushDetails = async () => {\\n            if (!pushId) return;\\n            setLoadingPush(true);\\n            try {\\n                const response = await getPush(pushId);\\n                setPush(response.data);\\n            } catch (err) {\\n                console.error('Ошибка загрузки рассылки:', err);\\n                setError('Ошибка загрузки рассылки');\\n            } finally {\\n                setLoadingPush(false);\\n            }\\n        };\\n        fetchPushDetails();\\n    }, [pushId]);\\n\\n    const fetchUsers = async () => {\\n        setLoadingUsers(true);\\n        try {\\n            let response;\\n            switch (filter) {\\n                case 'moderators':\\n                    response = await getModerators();\\n                    break;\\n                case 'sellers':\\n                    response = await getSellers();\\n                    break;\\n                case 'banned':\\n                    response = await getBannedUsers();\\n                    break;\\n                case 'clients':\\n                    response = await getClients();\\n                    break;\\n                case 'all':\\n                default:\\n                    response = await getUsers();\\n                    break;\\n            }\\n            setUsers(response.data);\\n        } catch (err) {\\n            console.error('Ошибка при получении пользователей:', err);\\n            setError('Ошибка загрузки пользователей');\\n        } finally {\\n            setLoadingUsers(false);\\n        }\\n    };\\n\\n    useEffect(() => {\\n        fetchUsers();\\n    }, [filter]);\\n\\n    const handleUserSelect = (userId: string) => {\\n        setSelectedUserIds((prev) =>\\n            prev.includes(userId) ? prev.filter((id) => id !== userId) : [...prev, userId]\\n        );\\n    };\\n\\n    const handleActivatePush = async () => {\\n        if (!pushId) return;\\n        try {\\n            const data = {userIds: selectedUserIds};\\n            await activatePush(pushId, data);\\n            alert('Push успешно активирован!');\\n        } catch (err) {\\n            console.error('Ошибка активации push:', err);\\n            alert('Ошибка активации push');\\n        }\\n    };\\n\\n    const handleDeletePush = async () => {\\n        if (!pushId) return;\\n        if (!window.confirm('Вы действительно хотите удалить рассылку?')) return;\\n        try {\\n            await deletePush(pushId);\\n            alert('Рассылка удалена');\\n            navigate('/moderator/pushes');\\n        } catch (err) {\\n            console.error('Ошибка удаления push:', err);\\n            alert('Ошибка удаления push');\\n        }\\n    };\\n\\n    const handleUpdatePush = () => {\\n        if (!pushId) return;\\n        navigate(`/moderator/pushes/${pushId}/edit`);\\n    };\\n\\n    return (\\n        <div className=\\\"p-4\\\">\\n            <h1 className=\\\"text-2xl font-bold mb-4 text-brand\\\">Детали рассылки Push</h1>\\n            {error && <div className=\\\"text-red-500 mb-4\\\">{error}</div>}\\n            {loadingPush ? (\\n                <div>Загрузка рассылки...</div>\\n            ) : push ? (\\n                <div className=\\\"bg-brandlight border border-darkGray p-6 rounded mb-6 shadow relative\\\">\\n                    <div className=\\\"flex justify-between items-start mb-4\\\">\\n                        <div>\\n                            <h2 className=\\\"text-xl font-semibold\\\">{push.title}</h2>\\n                            <p className=\\\"mt-2\\\">{push.text}</p>\\n                            {push.image_path && (\\n                                <img\\n                                    src={GetUploadLink(push.image_path)}\\n                                    alt=\\\"Изображение рассылки\\\"\\n                                    className=\\\"mt-4 rounded\\\"\\n                                />\\n                            )}\\n                            {push.button_text && (\\n                                <div className=\\\"mt-4\\\">\\n                                    <strong>Кнопка: </strong>\\n                                    {push.button_link ? (\\n                                        <a\\n                                            href={push.button_link}\\n                                            target=\\\"_blank\\\"\\n                                            rel=\\\"noopener noreferrer\\\"\\n                                            className=\\\"text-blue-600 hover:underline\\\"\\n                                        >\\n                                            {push.button_text}\\n                                        </a>\\n                                    ) : (\\n                                        <span>{push.button_text}</span>\\n                                    )}\\n                                </div>\\n                            )}\\n                        </div>\\n                        <div ref={menuRef} className=\\\"relative\\\">\\n                            <img\\n                                src=\\\"/icons/menu.png\\\"\\n                                alt=\\\"Меню\\\"\\n                                className=\\\"w-6 h-6 cursor-pointer\\\"\\n                                onClick={() => setActionsOpen((prev) => !prev)}\\n                            />\\n                            {actionsOpen && (\\n                                <div\\n                                    className=\\\"absolute right-0 mt-2 w-32 bg-white border border-darkGray rounded shadow z-10\\\">\\n                                    <button\\n                                        onClick={() => {\\n                                            setActionsOpen(false);\\n                                            handleUpdatePush();\\n                                        }}\\n                                        className=\\\"w-full text-left px-2 py-1 text-sm hover:bg-brandlight\\\"\\n                                    >\\n                                        Редактировать\\n                                    </button>\\n                                    <button\\n                                        onClick={() => {\\n                                            setActionsOpen(false);\\n                                            handleDeletePush();\\n                                        }}\\n                                        className=\\\"w-full text-left px-2 py-1 text-sm hover:bg-brandlight text-red-500\\\"\\n                                    >\\n                                        Удалить\\n                                    </button>\\n                                </div>\\n                            )}\\n                        </div>\\n                    </div>\\n                </div>\\n            ) : (\\n                <div>Рассылка не найдена.</div>\\n            )}\\n\\n            <div className=\\\"mb-4 flex items-center gap-4\\\">\\n                <label className=\\\"font-semibold\\\">Фильтр пользователей:</label>\\n                <select\\n                    value={filter}\\n                    onChange={(e) => setFilter(e.target.value)}\\n                    className=\\\"border p-2 rounded\\\"\\n                >\\n                    <option value=\\\"all\\\">Все</option>\\n                    <option value=\\\"moderators\\\">Модераторы</option>\\n                    <option value=\\\"sellers\\\">Продавцы</option>\\n                    <option value=\\\"banned\\\">Забаненные</option>\\n                    <option value=\\\"clients\\\">Клиенты</option>\\n                </select>\\n            </div>\\n\\n            <div className=\\\"bg-white border border-darkGray rounded shadow overflow-auto\\\">\\n                <table className=\\\"min-w-full\\\">\\n                    <thead className=\\\"bg-gray-200-100\\\">\\n                    <tr>\\n                        <th className=\\\"p-2 text-left\\\">Выбрать</th>\\n                        <th className=\\\"p-2 text-left\\\">Никнейм</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                    {loadingUsers ? (\\n                        <tr>\\n                            <td className=\\\"p-2\\\" colSpan={2}>\\n                                Загрузка пользователей...\\n                            </td>\\n                        </tr>\\n                    ) : users.length > 0 ? (\\n                        users.map((user) => (\\n                            <tr key={user.id} className=\\\"hover:bg-gray-200-50\\\">\\n                                <td className=\\\"p-2\\\">\\n                                    <input\\n                                        type=\\\"checkbox\\\"\\n                                        checked={selectedUserIds.includes(user.id)}\\n                                        onChange={() => handleUserSelect(user.id)}\\n                                        className=\\\"cursor-pointer\\\"\\n                                    />\\n                                </td>\\n                                <td className=\\\"p-2\\\">{user.nickname}</td>\\n                            </tr>\\n                        ))\\n                    ) : (\\n                        <tr>\\n                            <td className=\\\"p-2\\\" colSpan={2}>\\n                                Пользователи не найдены.\\n                            </td>\\n                        </tr>\\n                    )}\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <div className=\\\"mt-6 flex justify-center\\\">\\n                <button\\n                    onClick={handleActivatePush}\\n                    className=\\\"px-6 py-3 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\\\"\\n                    disabled={selectedUserIds.length === 0}\\n                >\\n                    Отправить push\\n                </button>\\n            </div>\\n        </div>\\n    );\\n};\\n\\nexport default PushDetailsPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/ModeratorUserPage.tsx\",\n    \"content\": \"import React, { useEffect, useState } from 'react';\\nimport { useNavigate } from 'react-router-dom';\\nimport {\\n    getUsers,\\n    getModerators,\\n    getSellers,\\n    getBannedUsers, getUser,\\n    // banUser,\\n    // unbanUser,\\n    // promoteUser,\\n    // demoteUser,\\n    // increaseSellerBalance\\n} from '../../services/api';\\nimport { UserRole } from '../../enums';\\nimport { on } from '@telegram-apps/sdk';\\nimport { useAuth } from '../../contexts/auth';\\nimport CopyableUuid from '../../components/CopyableUuid';\\n\\ninterface User {\\n    id: string;\\n    telegram_id: bigint;\\n    nickname: string;\\n    role: UserRole;\\n    is_banned: boolean;\\n    is_seller: boolean;\\n    balance: number;\\n    invited_by?: string;\\n    inviter_tg?: string;\\n}\\n\\ntype FilterType = 'all' | 'moderators' | 'sellers' | 'banned';\\n\\nfunction ModeratorUsersPage() {\\n    const [users, setUsers] = useState<User[]>([]);\\n    const [loading, setLoading] = useState(false);\\n    const [filter, setFilter] = useState<FilterType>('all');\\n    const { isAdmin } = useAuth();\\n    const navigate = useNavigate();\\n\\n    const [searchQuery, setSearchQuery] = useState('');\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/moderator');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const fetchUsers = async () => {\\n        setLoading(true);\\n        try {\\n            let response;\\n            switch (filter) {\\n                case 'moderators':\\n                    response = await getModerators();\\n                    break;\\n                case 'sellers':\\n                    response = await getSellers();\\n                    break;\\n                case 'banned':\\n                    response = await getBannedUsers();\\n                    break;\\n                case 'all':\\n                default:\\n                    response = await getUsers();\\n                    break;\\n            }\\n\\n            // rawUsers — это список сразу после API\\n            const rawUsers: User[] = response.data;\\n\\n            // теперь «обогащаем» каждого: если есть invited_by, достаём inviter_tg\\n            const enriched: User[] = await Promise.all(\\n                rawUsers.map(async u => {\\n                    if (!u.invited_by) return u;\\n                    try {\\n                        const res = await getUser(u.invited_by);\\n                        return {\\n                            ...u,\\n                            inviter_tg: res.data.nickname,\\n                        };\\n                    } catch {\\n                        // если по какой-то причине не удалось — возвращаем без inviter_tg\\n                        return u;\\n                    }\\n                })\\n            );\\n\\n            setUsers(enriched);\\n        } catch (error) {\\n            console.error('Ошибка при получении пользователей:', error);\\n        } finally {\\n            setLoading(false);\\n        }\\n    };\\n\\n\\n    useEffect(() => {\\n        fetchUsers();\\n    }, [filter]);\\n\\n\\n    // Фильтруем пользователей по нику\\n    const filteredUsers = users.filter(user =>\\n        user.nickname.toLowerCase().includes(searchQuery.toLowerCase())\\n    );\\n\\n    return (\\n        <div className=\\\"bg-gray-200 h-screen p-2\\\">\\n            <h1 className=\\\"text-xl font-bold mb-3 text-center\\\">\\n                Управление пользователями\\n            </h1>\\n\\n            {/* Блок с поиском и фильтром */}\\n            <div className=\\\"mb-4 flex gap-2 bg-white p-4 rounded shadow\\\">\\n                <div className=\\\"flex-1\\\">\\n                    <input\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"Поиск по нику\\\"\\n                        value={searchQuery}\\n                        onChange={(e) => setSearchQuery(e.target.value)}\\n                        className=\\\"w-full border border-darkGray rounded p-2 text-sm\\\"\\n                    />\\n                </div>\\n                <div className=\\\"flex-1 flex items-center\\\">\\n                    <label\\n                        htmlFor=\\\"userFilter\\\"\\n                        className=\\\"mr-2 text-sm font-medium whitespace-nowrap\\\"\\n                    >\\n                        Фильтр:\\n                    </label>\\n                    <select\\n                        id=\\\"userFilter\\\"\\n                        value={filter}\\n                        onChange={(e) => setFilter(e.target.value as FilterType)}\\n                        className=\\\"w-full border p-2 rounded text-sm\\\"\\n                    >\\n                        <option value=\\\"all\\\">Все пользователи</option>\\n                        <option value=\\\"moderators\\\">Модераторы</option>\\n                        <option value=\\\"sellers\\\">Продавцы</option>\\n                        <option value=\\\"banned\\\">Забаненные</option>\\n                    </select>\\n                </div>\\n            </div>\\n\\n            {loading ? (\\n                <p className=\\\"text-center text-xs\\\">Загрузка...</p>\\n            ) : (\\n                <div className=\\\"w-full overflow-x-auto\\\">\\n                    <table className=\\\"w-full table-auto divide-y divide-gray-200 text-[8px]\\\">\\n                        <thead className=\\\"bg-brand text-white text-center\\\">\\n                        <tr>\\n                            <th className=\\\"py-1 px-1\\\">ID</th>\\n                            <th className=\\\"py-1 px-1\\\">Telegram ID</th>\\n                            <th className=\\\"py-1 px-1\\\">Никнейм</th>\\n                            <th className=\\\"py-1 px-1\\\">Роль</th>\\n                            <th className=\\\"py-1 px-1\\\">Забанен</th>\\n                            <th className=\\\"py-1 px-1\\\">Продавец</th>\\n                            <th className=\\\"py-1 px-1\\\">Баланс</th>\\n                            <th className=\\\"py-1 px-1\\\">Пригласивший</th>\\n                        </tr>\\n                        </thead>\\n                        <tbody className=\\\"bg-white divide-y divide-gray-200 text-center\\\">\\n                        {filteredUsers.map(user => (\\n                            <tr\\n                                key={user.id}\\n                                className=\\\"hover:bg-gray-200-50 cursor-pointer\\\"\\n                                onClick={() => navigate(`/moderator/users/${user.id}`)}\\n                            >\\n                                <td className=\\\"px-1 py-1 text-[5px]\\\">\\n                                    <CopyableUuid uuid={user.id} />\\n                                </td>\\n                                <td className=\\\"px-1 py-1 text-[7px]\\\">\\n                                    {user.telegram_id.toString()}\\n                                </td>\\n                                <td className=\\\"px-1 py-1\\\">\\n                                    <a\\n                                        href={`https://t.me/${user.nickname}`}\\n                                        target=\\\"_blank\\\"\\n                                        rel=\\\"noopener noreferrer\\\"\\n                                        className=\\\"text-blue-500 hover:underline\\\"\\n                                        onClick={e => e.stopPropagation()}\\n                                    >\\n                                        {user.nickname}\\n                                    </a>\\n                                </td>\\n                                <td className=\\\"px-1 py-1\\\">{user.role}</td>\\n                                <td className=\\\"px-1 py-1\\\">{user.is_banned ? \\\"Да\\\" : \\\"Нет\\\"}</td>\\n                                <td className=\\\"px-1 py-1\\\">{user.is_seller ? \\\"Да\\\" : \\\"Нет\\\"}</td>\\n                                <td className=\\\"px-1 py-1\\\">{user.balance || 0}</td>\\n                                <td className=\\\"px-1 py-1 text-[7px]\\\">\\n                                    {user.invited_by && user.inviter_tg ? (\\n                                        <a\\n                                            href={`https://t.me/${user.inviter_tg}`}\\n                                            target=\\\"_blank\\\"\\n                                            rel=\\\"noopener noreferrer\\\"\\n                                            className=\\\"text-blue-500 hover:underline\\\"\\n                                            onClick={e => e.stopPropagation()}\\n                                        >\\n                                            @{user.inviter_tg}\\n                                        </a>\\n                                    ) : (\\n                                        <span className=\\\"text-gray-400\\\">—</span>\\n                                    )}\\n                                </td>\\n\\n                            </tr>\\n                        ))}\\n                        </tbody>\\n                    </table>\\n                </div>\\n            )}\\n\\n        </div>\\n    );\\n}\\n\\nexport default ModeratorUsersPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/PushFormPage.tsx\",\n    \"content\": \"import React, { useEffect, useState } from 'react';\\nimport { useNavigate, useParams } from 'react-router-dom';\\nimport { createPush, updatePush, getPush } from '../../services/api';\\nimport { on } from \\\"@telegram-apps/sdk\\\";\\n\\ninterface Push {\\n    id: string;\\n    title: string;\\n    text: string;\\n}\\n\\nconst PushFormPage: React.FC = () => {\\n    const { pushId } = useParams<{ pushId?: string }>();\\n    const isEditMode = Boolean(pushId);\\n    const navigate = useNavigate();\\n\\n    const [title, setTitle] = useState<string>('');\\n    const [text, setText] = useState<string>('');\\n    const [imageFile, setImageFile] = useState<File | null>(null);\\n    const [buttonText, setButtonText] = useState<string>('');\\n    const [buttonLink, setButtonLink] = useState<string>('');\\n\\n    const [loading, setLoading] = useState<boolean>(false);\\n    const [error, setError] = useState<string>('');\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            if (isEditMode && pushId) {\\n                navigate(`/moderator/pushes/${pushId}`);\\n            } else {\\n                navigate(`/moderator/pushes`);\\n            }\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate, isEditMode, pushId]);\\n\\n    useEffect(() => {\\n        if (isEditMode && pushId) {\\n            setLoading(true);\\n            getPush(pushId)\\n                .then((response) => {\\n                    const pushData = response.data as Push;\\n                    setTitle(pushData.title);\\n                    setText(pushData.text);\\n\\n                    if ((response.data as any).button_text) {\\n                        setButtonText((response.data as any).button_text);\\n                    }\\n                    if ((response.data as any).button_link) {\\n                        setButtonLink((response.data as any).button_link);\\n                    }\\n                })\\n                .catch((err) => {\\n                    console.error('Ошибка получения рассылки:', err);\\n                    setError('Не удалось загрузить данные рассылки');\\n                })\\n                .finally(() => setLoading(false));\\n        }\\n    }, [isEditMode, pushId]);\\n\\n    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n        if (e.target.files && e.target.files[0]) {\\n            setImageFile(e.target.files[0]);\\n        }\\n    };\\n\\n    const handleFormSubmit = async (e: React.FormEvent) => {\\n        e.preventDefault();\\n        if (!title.trim() || !text.trim()) {\\n            alert('Пожалуйста, заполните все обязательные поля.');\\n            return;\\n        }\\n        setLoading(true);\\n        try {\\n            const formData = new FormData();\\n            formData.append('title', title);\\n            formData.append('text', text);\\n            if (imageFile) {\\n                formData.append('image', imageFile);\\n            }\\n            formData.append('button_text', buttonText);\\n            formData.append('button_link', buttonLink);\\n\\n            if (isEditMode && pushId) {\\n                await updatePush(pushId, formData);\\n                alert('Рассылка успешно обновлена!');\\n                navigate(`/moderator/pushes/${pushId}`);\\n            } else {\\n                await createPush(formData);\\n                alert('Рассылка успешно создана!');\\n                navigate('/moderator/pushes');\\n            }\\n        } catch (err) {\\n            console.error('Ошибка отправки формы:', err);\\n            setError('Ошибка сохранения данных. Попробуйте еще раз.');\\n        } finally {\\n            setLoading(false);\\n        }\\n    };\\n\\n    return (\\n        <div className=\\\"p-4 max-w-lg mx-auto bg-gray-200-100 rounded shadow\\\">\\n            <h1 className=\\\"text-2xl font-bold mb-4\\\">\\n                {isEditMode ? 'Редактировать рассылку' : 'Создать новую рассылку'}\\n            </h1>\\n            {error && <div className=\\\"text-red-500 mb-4\\\">{error}</div>}\\n            {loading ? (\\n                <div>Загрузка...</div>\\n            ) : (\\n                <form onSubmit={handleFormSubmit} className=\\\"space-y-4\\\">\\n                    <div>\\n                        <label htmlFor=\\\"title\\\" className=\\\"block text-sm font-medium mb-1\\\">\\n                            Название\\n                        </label>\\n                        <input\\n                            id=\\\"title\\\"\\n                            type=\\\"text\\\"\\n                            value={title}\\n                            onChange={(e) => setTitle(e.target.value)}\\n                            className=\\\"w-full p-2 border border-darkGray rounded\\\"\\n                            required\\n                        />\\n                    </div>\\n                    <div>\\n                        <label htmlFor=\\\"text\\\" className=\\\"block text-sm font-medium mb-1\\\">\\n                            Текст рассылки\\n                        </label>\\n                        <textarea\\n                            id=\\\"text\\\"\\n                            value={text}\\n                            onChange={(e) => setText(e.target.value)}\\n                            className=\\\"w-full p-2 border border-darkGray rounded\\\"\\n                            rows={4}\\n                            required\\n                        ></textarea>\\n                    </div>\\n                    <div>\\n                        <label htmlFor=\\\"image\\\" className=\\\"block text-sm font-medium mb-1\\\">\\n                            Изображение (опционально)\\n                        </label>\\n                        <input\\n                            id=\\\"image\\\"\\n                            type=\\\"file\\\"\\n                            accept=\\\"image/*\\\"\\n                            onChange={handleImageChange}\\n                            className=\\\"w-full\\\"\\n                        />\\n                    </div>\\n                    <div>\\n                        <label htmlFor=\\\"buttonText\\\" className=\\\"block text-sm font-medium mb-1\\\">\\n                            Текст кнопки (опционально)\\n                        </label>\\n                        <input\\n                            id=\\\"buttonText\\\"\\n                            type=\\\"text\\\"\\n                            value={buttonText}\\n                            onChange={(e) => setButtonText(e.target.value)}\\n                            placeholder=\\\"Введите текст кнопки\\\"\\n                            className=\\\"w-full p-2 border border-darkGray rounded\\\"\\n                        />\\n                    </div>\\n                    <div>\\n                        <label htmlFor=\\\"buttonLink\\\" className=\\\"block text-sm font-medium mb-1\\\">\\n                            Ссылка для кнопки (опционально)\\n                        </label>\\n                        <input\\n                            id=\\\"buttonLink\\\"\\n                            type=\\\"text\\\"\\n                            value={buttonLink}\\n                            onChange={(e) => setButtonLink(e.target.value)}\\n                            placeholder=\\\"Введите URL для кнопки\\\"\\n                            className=\\\"w-full p-2 border border-darkGray rounded\\\"\\n                        />\\n                    </div>\\n                    <div className=\\\"flex justify-end space-x-2\\\">\\n                        <button\\n                            type=\\\"button\\\"\\n                            onClick={() => navigate(isEditMode && pushId ? `/moderator/pushes/${pushId}` : '/moderator/pushes')}\\n                            className=\\\"px-4 py-2 border border-darkGray rounded\\\"\\n                        >\\n                            Отмена\\n                        </button>\\n                        <button\\n                            type=\\\"submit\\\"\\n                            className=\\\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\\\"\\n                        >\\n                            {isEditMode ? 'Сохранить изменения' : 'Создать рассылку'}\\n                        </button>\\n                    </div>\\n                </form>\\n            )}\\n        </div>\\n    );\\n};\\n\\nexport default PushFormPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/ModeratorDashboard.tsx\",\n    \"content\": \"import React, {useEffect} from 'react';\\nimport {useNavigate} from 'react-router-dom';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\n\\nfunction ModeratorDashboard() {\\n    const navigate = useNavigate();\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const handleUsersClick = () => navigate('/moderator/users');\\n    const handleProductsClick = () => navigate('/moderator/products');\\n    const handlePushClick = () => navigate('/moderator/pushes');\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 p-6\\\">\\n            <h1 className=\\\"text-xl font-bold mb-4\\\">Панель модератора</h1>\\n            <div className=\\\"grid grid-cols-2 gap-4\\\">\\n                <div\\n                    onClick={handleUsersClick}\\n                    className=\\\"bg-white border border-brand text-center rounded-md shadow-sm p-4 cursor-pointer\\\"\\n                >\\n                    <span>Управление пользователями</span>\\n                </div>\\n                <div\\n                    onClick={handleProductsClick}\\n                    className=\\\"bg-white border border-brand text-center rounded-md shadow-sm p-4 cursor-pointer\\\"\\n                >\\n                    <span>Проверка товаров</span>\\n                </div>\\n                <div\\n                    onClick={handlePushClick}\\n                    className=\\\"bg-white border border-brand text-center rounded-md shadow-sm p-4 cursor-pointer\\\"\\n                >\\n                    <span>Управление рассылками</span>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default ModeratorDashboard;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/ModeratorProductReviewPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getModeratorProductById, reviewProduct} from '../../services/api';\\nimport {ProductStatus} from '../../enums';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\n\\nfunction ModeratorProductReviewPage() {\\n    const {productId} = useParams<{ productId: string }>();\\n    const [product, setProduct] = useState<any>(null);\\n    const [loading, setLoading] = useState(false);\\n    const [status, setStatus] = useState('');\\n    const [commentModerator, setCommentModerator] = useState('');\\n    const [commentSeller, setCommentSeller] = useState('');\\n    const navigate = useNavigate();\\n\\n    const fetchProduct = async () => {\\n        setLoading(true);\\n        try {\\n            const response = await getModeratorProductById(productId!);\\n            setProduct(response.data);\\n            setStatus(response.data.status);\\n        } catch (error) {\\n            console.error('Ошибка при получении продукта:', error);\\n        } finally {\\n            setLoading(false);\\n        }\\n    };\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/moderator/products');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    useEffect(() => {\\n        fetchProduct();\\n    }, [productId]);\\n\\n    const handleSubmit = async () => {\\n        try {\\n            const payload = {\\n                    status,\\n                    commentModerator,\\n                    commentSeller\\n            };\\n            await reviewProduct(productId!, payload);\\n            alert('Проверка продукта обновлена!');\\n            navigate('/moderator/products');\\n        } catch (error) {\\n            console.error('Ошибка при обновлении проверки продукта:', error);\\n        }\\n    };\\n\\n    if (loading || !product) return <p>Загрузка...</p>;\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 p-6\\\">\\n            <h1 className=\\\"text-2xl font-bold mb-6 text-center\\\">\\n                Проверка продукта: {product.name}\\n            </h1>\\n\\n            <div className=\\\"bg-white shadow rounded p-6 mb-6\\\">\\n                <h2 className=\\\"text-lg font-semibold mb-4\\\">Информация о продукте</h2>\\n                {product.image_path && (\\n                    <img\\n                        src={GetUploadLink(product.image_path)}\\n                        alt={product.name}\\n                        className=\\\"w-40 h-40 object-cover mb-6\\\"\\n                    />\\n                )}\\n                <div className=\\\"grid grid-cols-1 sm:grid-cols-2 gap-4\\\">\\n                    <p><strong>ID:</strong> {product.id}</p>\\n                    <p><strong>Название:</strong> {product.name}</p>\\n                    <p><strong>Бренд:</strong> {product.brand}</p>\\n                    <p><strong>Артикул:</strong> {product.article}</p>\\n                    <p><strong>Категория:</strong> {product.category}</p>\\n                    <p><strong>Ключевое слово:</strong> {product.key_word}</p>\\n                    <p><strong>Общее количество выкупов:</strong> {product.general_repurchases}</p>\\n                    <p><strong>Ежедневные выкупы:</strong> {product.daily_repurchases}</p>\\n                    <p><strong>Цена:</strong> {product.price}</p>\\n                    <p><strong>Цена WB:</strong> {product.wb_price}</p>\\n                    <p><strong>Телеграм:</strong> {product.tg}</p>\\n                    <p><strong>Время оплаты:</strong> {product.payment_time}</p>\\n                    <p><strong>Требования к отзыву:</strong> {product.review_requirements}</p>\\n                    <p><strong>ID продавца:</strong> {product.seller_id}</p>\\n                    <p><strong>Статус:</strong> {product.status}</p>\\n                    <p><strong>Создано:</strong> {new Date(product.created_at).toLocaleString()}</p>\\n                    <p><strong>Обновлено:</strong> {new Date(product.updated_at).toLocaleString()}</p>\\n                </div>\\n            </div>\\n\\n            {product.moderator_reviews && product.moderator_reviews.length > 0 && (\\n                <div className=\\\"bg-white shadow rounded p-6 mb-6\\\">\\n                    <h3 className=\\\"text-xl font-bold mb-4\\\">Комментарии модераторов</h3>\\n                    {product.moderator_reviews.map((review: any) => (\\n                        <div key={review.id} className=\\\"border p-4 mb-4 rounded\\\">\\n                            {review.comment_to_moderator && (\\n                                <div className=\\\"bg-brandlight p-2 rounded mb-2\\\">\\n                                    <p>\\n                                        <strong>Комментарий для модераторов:</strong> {review.comment_to_moderator}\\n                                    </p>\\n                                </div>\\n                            )}\\n                            {review.comment_to_seller && (\\n                                <div className=\\\"bg-brandlight p-2 rounded mb-2\\\">\\n                                    <p>\\n                                        <strong>Комментарий для продавца:</strong> {review.comment_to_seller}\\n                                    </p>\\n                                </div>\\n                            )}\\n                            <p className=\\\"text-xs text-gray-500\\\">\\n                                Дата: {new Date(review.created_at).toLocaleString()}\\n                            </p>\\n                        </div>\\n                    ))}\\n                </div>\\n            )}\\n\\n\\n            <div className=\\\"border-l-4 border-blue-500 pl-4\\\">\\n                <h3 className=\\\"text-lg font-semibold mb-4\\\">Детали проверки</h3>\\n                <div className=\\\"mb-4\\\">\\n                    <label className=\\\"block mb-2\\\">Статус:</label>\\n                    <select\\n                        value={status}\\n                        onChange={(e) => setStatus(e.target.value)}\\n                        className=\\\"border p-2 rounded w-full\\\"\\n                    >\\n                        {Object.values(ProductStatus).map((value) => (\\n                            <option key={value} value={value}>\\n                                {value.charAt(0).toUpperCase() + value.slice(1)}\\n                            </option>\\n                        ))}\\n                    </select>\\n                </div>\\n\\n                <div className=\\\"mb-4\\\">\\n                    <label className=\\\"block mb-2\\\">Комментарий (между модераторами):</label>\\n                    <textarea\\n                        value={commentModerator}\\n                        onChange={(e) => setCommentModerator(e.target.value)}\\n                        className=\\\"border p-2 rounded w-full\\\"\\n                        rows={3}\\n                    ></textarea>\\n                </div>\\n\\n                <div className=\\\"mb-4\\\">\\n                    <label className=\\\"block mb-2\\\">Комментарий для продавца:</label>\\n                    <textarea\\n                        value={commentSeller}\\n                        onChange={(e) => setCommentSeller(e.target.value)}\\n                        className=\\\"border p-2 rounded w-full\\\"\\n                        rows={3}\\n                    ></textarea>\\n                </div>\\n\\n                <button\\n                    onClick={handleSubmit}\\n                    className=\\\"bg-blue-500 text-white px-4 py-2 rounded-lg\\\"\\n                >\\n                    Отправить\\n                </button>\\n            </div>¬\\n        </div>\\n    );\\n}\\n\\nexport default ModeratorProductReviewPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/ModeratorProductsPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {getProductsToReview} from '../../services/api';\\nimport {useNavigate} from 'react-router-dom';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {ProductStatus} from \\\"../../enums\\\";\\n\\ninterface ModeratorReview {\\n    id: string;\\n    moderator_id: string;\\n    product_id: string;\\n    comment_to_seller?: string;\\n    comment_to_moderator?: string;\\n    status_before: ProductStatus;\\n    status_after: ProductStatus;\\n    created_at: string;\\n    updated_at: string;\\n}\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    price: number;\\n    status: ProductStatus;\\n    moderator_reviews?: ModeratorReview[];\\n}\\n\\nfunction ModeratorProductsPage() {\\n    const [products, setProducts] = useState<Product[]>([]);\\n    const [loading, setLoading] = useState(false);\\n    const [error, setError] = useState('');\\n    const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'created' | 'rejected' | 'archived'>('all');\\n    const [activeTab, setActiveTab] = useState<'pending' | 'reviewed'>('pending');\\n    const navigate = useNavigate();\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/moderator');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    const fetchProducts = async () => {\\n        setLoading(true);\\n        try {\\n            const response = await getProductsToReview();\\n            setProducts(response.data);\\n            console.log(response.data);\\n        } catch (error) {\\n            console.error('Ошибка при получении продуктов:', error);\\n            setError('Не удалось загрузить продукты.');\\n        } finally {\\n            setLoading(false);\\n        }\\n    };\\n\\n    useEffect(() => {\\n        fetchProducts();\\n    }, []);\\n\\n    const pendingProducts = products.filter(product =>\\n        product.status.toLowerCase() === ProductStatus.CREATED.toLowerCase() ||\\n        product.status.toLowerCase() === ProductStatus.DISABLED.toLowerCase()\\n    );\\n    const reviewedProducts = products.filter(product =>\\n        product.status.toLowerCase() === ProductStatus.ACTIVE.toLowerCase() ||\\n        product.status.toLowerCase() === ProductStatus.REJECTED.toLowerCase() ||\\n        product.status.toLowerCase() === ProductStatus.ARCHIVED.toLowerCase()\\n    );\\n\\n    const filterByStatus = (list: Product[]) => {\\n        if (statusFilter === 'all') {\\n            return list;\\n        }\\n        if (statusFilter === 'created') {\\n            return list.filter(product =>\\n                product.status.toLowerCase() === ProductStatus.CREATED.toLowerCase() ||\\n                product.status.toLowerCase() === ProductStatus.DISABLED.toLowerCase()\\n            );\\n        }\\n        return list.filter(product =>\\n            product.status.toLowerCase() === statusFilter.toLowerCase()\\n        );\\n    };\\n\\n    const filteredPending = filterByStatus(pendingProducts);\\n    const filteredReviewed = filterByStatus(reviewedProducts);\\n\\n    const handleReview = (productId: string) => {\\n        navigate(`/moderator/products/${productId}`);\\n    };\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 p-6\\\">\\n            <h1 className=\\\"text-2xl font-bold mb-6 text-center\\\">Товары для проверки</h1>\\n            <div className=\\\"mb-4 flex justify-end\\\">\\n                <select\\n                    value={statusFilter}\\n                    onChange={(e) =>\\n                        setStatusFilter(e.target.value as 'all' | 'active' | 'created' | 'rejected' | 'archived')\\n                    }\\n                    className=\\\"border border-darkGray rounded-md py-2 px-3 text-sm focus:outline-none\\\"\\n                >\\n                    <option value=\\\"all\\\">Все статусы</option>\\n                    <option value=\\\"active\\\">Активный</option>\\n                    <option value=\\\"created\\\">Создано / Отключено</option>\\n                    <option value=\\\"rejected\\\">Отклонено</option>\\n                    <option value=\\\"archived\\\">Архив</option>\\n                </select>\\n            </div>\\n\\n            <div className=\\\"flex border-b border-darkGray mb-6\\\">\\n                <button\\n                    className={`px-4 py-2 font-semibold ${activeTab === 'pending'\\n                        ? 'border-b-2 border-blue-500 text-blue-500'\\n                        : 'text-gray-500 hover:text-blue-500'\\n                    }`}\\n                    onClick={() => setActiveTab('pending')}\\n                >\\n                    Заявки для проверки\\n                </button>\\n                <button\\n                    className={`px-4 py-2 font-semibold ${activeTab === 'reviewed'\\n                        ? 'border-b-2 border-blue-500 text-blue-500'\\n                        : 'text-gray-500 hover:text-blue-500'\\n                    }`}\\n                    onClick={() => setActiveTab('reviewed')}\\n                >\\n                    Проверенные заявки\\n                </button>\\n            </div>\\n\\n            {loading ? (\\n                <p className=\\\"text-center\\\">Загрузка...</p>\\n            ) : error ? (\\n                <div className=\\\"p-4 bg-brandlight border border-darkGray rounded text-center\\\">\\n                    <p className=\\\"text-sm text-gray-700\\\">{error}</p>\\n                </div>\\n            ) : (\\n                <>\\n                    {activeTab === 'pending' && (\\n                        <div className=\\\"mb-8\\\">\\n                            <h2 className=\\\"text-xl font-semibold mb-4\\\">Заявки для проверки</h2>\\n                            {filteredPending.length === 0 ? (\\n                                <p className=\\\"text-center text-sm text-gray-500\\\">Нет заявок для проверки</p>\\n                            ) : (\\n                                <div className=\\\"flex flex-col gap-2\\\">\\n                                    {filteredPending.map(product => (\\n                                        <div\\n                                            key={product.id}\\n                                            onClick={() => handleReview(product.id)}\\n                                            className=\\\"relative border border-gray-200 rounded-md p-3 hover:shadow transition-shadow duration-300 cursor-pointer bg-white\\\"\\n                                        >\\n                                            {product.moderator_reviews?.some(review => review.comment_to_moderator) && (\\n                                                <img\\n                                                    src=\\\"/icons/flag.png\\\"\\n                                                    alt=\\\"Комментарий\\\"\\n                                                    className=\\\"absolute top-2 right-2 w-6 h-6\\\"\\n                                                />\\n                                            )}\\n                                            <h3 className=\\\"text-md font-semibold\\\">{product.name}</h3>\\n                                            <p className=\\\"text-sm text-gray-600\\\">\\n                                                Цена: {product.price} ₽\\n                                            </p>\\n                                            <p className=\\\"text-xs text-gray-400\\\">\\n                                                Статус:{' '}\\n                                                {product.status === ProductStatus.ACTIVE\\n                                                    ? 'Активный'\\n                                                    : product.status === ProductStatus.REJECTED\\n                                                        ? 'Отклонено'\\n                                                        : product.status === ProductStatus.ARCHIVED\\n                                                            ? 'Архив'\\n                                                            : product.status === ProductStatus.CREATED ||\\n                                                            product.status === ProductStatus.DISABLED\\n                                                                ? 'Создано / Отключено'\\n                                                                : product.status}\\n                                            </p>\\n                                        </div>\\n                                    ))}\\n                                </div>\\n                            )}\\n                        </div>\\n                    )}\\n                    {activeTab === 'reviewed' && (\\n                        <div>\\n                            <h2 className=\\\"text-xl font-semibold mb-4\\\">Проверенные заявки</h2>\\n                            {filteredReviewed.length === 0 ? (\\n                                <p className=\\\"text-center text-sm text-gray-500\\\">Нет проверенных заявок</p>\\n                            ) : (\\n                                <div className=\\\"flex flex-col gap-2\\\">\\n                                    {filteredReviewed.map(product => (\\n                                        <div\\n                                            key={product.id}\\n                                            onClick={() => handleReview(product.id)}\\n                                            className={`relative border border-gray-200 rounded-md p-3 hover:shadow transition-shadow duration-300 cursor-pointer ${\\n                                                product.status.toLowerCase() === 'archived'\\n                                                    ? 'border-darkGray text-black border-dashed'\\n                                                    : 'bg-white'\\n                                            }`}\\n                                        >\\n                                            {product.moderator_reviews?.some(review => review.comment_to_moderator) && (\\n                                                <img\\n                                                    src=\\\"/icons/flag.png\\\"\\n                                                    alt=\\\"Комментарий\\\"\\n                                                    className=\\\"absolute top-2 right-2 w-6 h-6\\\"\\n                                                />\\n                                            )}\\n                                            <h3 className=\\\"text-md font-semibold\\\">{product.name}</h3>\\n                                            <p className=\\\"text-sm\\\">\\n                                                Цена: {product.price} ₽\\n                                            </p>\\n                                            <p className=\\\"text-xs\\\">\\n                                                Статус:{' '}\\n                                                {product.status === ProductStatus.ACTIVE\\n                                                    ? 'Активный'\\n                                                    : product.status === ProductStatus.REJECTED\\n                                                        ? 'Отклонено'\\n                                                        : product.status === ProductStatus.ARCHIVED\\n                                                            ? 'Архив'\\n                                                            : product.status === ProductStatus.CREATED ||\\n                                                            product.status === ProductStatus.DISABLED\\n                                                                ? 'Создано / Отключено'\\n                                                                : product.status}\\n                                            </p>\\n                                        </div>\\n                                    ))}\\n                                </div>\\n                            )}\\n                        </div>\\n                    )}\\n                </>\\n            )}\\n\\n            <div\\n                onClick={() => {\\n                    if (window.Telegram?.WebApp?.close) {\\n                        window.Telegram.WebApp.close();\\n                    }\\n                    window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n                }}\\n                className=\\\"bg-white border border-brand rounded-xl shadow-sm p-4 mt-4 text-sm font-semibold cursor-pointer flex items-center gap-3\\\"\\n            >\\n                <img src=\\\"/icons/support.png\\\" alt=\\\"Support\\\" className=\\\"w-7 h-7\\\"/>\\n                <div className=\\\"flex flex-col\\\">\\n                    <span>Техподдержка</span>\\n                    <span className=\\\"text-xs text-gray-500\\\">\\n                        Оперативно ответим на все вопросы\\n                    </span>\\n                </div>\\n                <img\\n                    src=\\\"/icons/small_arrow.png\\\"\\n                    alt=\\\"arrow\\\"\\n                    className=\\\"w-5 h-5 ml-auto\\\"\\n                />\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default ModeratorProductsPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/moderator/ModeratorUserDetailPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {\\n    banUser,\\n    demoteUser,\\n    getUser,\\n    increaseReferralBonus,\\n    increaseSellerBalance,\\n    promoteUser,\\n    unbanUser,\\n    useDiscount\\n} from '../../services/api';\\nimport {UserRole} from '../../enums';\\nimport {on} from '@telegram-apps/sdk';\\n\\ninterface User {\\n    id: string;\\n    telegram_id: number;\\n    nickname: string;\\n    role: UserRole;\\n    is_banned: boolean;\\n    is_seller: boolean;\\n    balance: number;\\n    invited_by: string | null;\\n    has_discount: boolean;\\n    referrer_bonus: number;\\n    inviter: User;\\n}\\n\\nfunction ModeratorUserDetailPage() {\\n    const {userId} = useParams<{ userId: string }>();\\n    const navigate = useNavigate();\\n    const [user, setUser] = useState<User | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [searchQuery, setSearchQuery] = useState('');\\n\\n    // Состояния для пополнения/списания баланса продавца\\n    const [balanceInput, setBalanceInput] = useState('');\\n    // Состояния для реферального бонуса\\n    const [bonusInput, setBonusInput] = useState('');\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate('/moderator/users');\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n    useEffect(() => {\\n        if (!userId) return;\\n        getUser(userId)\\n            .then((res) => setUser(res.data))\\n            .finally(() => setLoading(false));\\n    }, [userId]);\\n\\n    if (loading || !user) return <div className=\\\"p-4\\\">Загрузка...</div>;\\n\\n    const handleBanToggle = async () => {\\n        try {\\n            if (user.is_banned) {\\n                await unbanUser(user.id);\\n            } else {\\n                await banUser(user.id);\\n            }\\n            setUser({...user, is_banned: !user.is_banned});\\n        } catch (error) {\\n            console.error('Ошибка при изменении статуса бана:', error);\\n        }\\n    };\\n\\n    const handleRoleToggle = async () => {\\n        try {\\n            if (user.role === UserRole.MODERATOR) {\\n                await demoteUser(user.id);\\n                setUser({...user, role: UserRole.USER});\\n            } else {\\n                await promoteUser(user.id);\\n                setUser({...user, role: UserRole.MODERATOR});\\n            }\\n        } catch (error) {\\n            console.error('Ошибка при изменении роли:', error);\\n        }\\n    };\\n\\n\\n    // Функции для баланса продавца\\n    const handleBalanceIncrease = async () => {\\n        const amount = parseInt(balanceInput, 10);\\n        if (!amount || amount <= 0) return;\\n        const fd = new FormData();\\n        fd.append(\\\"balance\\\", amount.toString());\\n        try {\\n            await increaseSellerBalance(user.id, fd);\\n            setUser({...user, balance: user.balance + amount});\\n            setBalanceInput('');\\n            alert('Баланс пополнен!');\\n        } catch (error) {\\n            console.error(\\\"Ошибка при пополнении баланса:\\\", error);\\n            alert(\\\"Не удалось пополнить баланс\\\");\\n        }\\n    };\\n\\n    const handleBalanceDecrease = async () => {\\n        const amount = parseInt(balanceInput, 10);\\n        if (!amount || amount <= 0) return;\\n        const fd = new FormData();\\n        // Передаем отрицательное число для списания\\n        fd.append(\\\"balance\\\", (-amount).toString());\\n        try {\\n            await increaseSellerBalance(user.id, fd);\\n            setUser({...user, balance: user.balance - amount});\\n            setBalanceInput('');\\n            alert('Баланс списан!');\\n        } catch (error) {\\n            console.error(\\\"Ошибка при списании баланса:\\\", error);\\n            alert(\\\"Не удалось списать баланс\\\");\\n        }\\n    };\\n\\n    const handleBalanceClear = async () => {\\n        if (user.balance <= 0) return;\\n        const fd = new FormData();\\n        fd.append(\\\"balance\\\", (-user.balance).toString());\\n        try {\\n            await increaseSellerBalance(user.id, fd);\\n            setUser({...user, balance: 0});\\n            alert('Баланс списан!');\\n        } catch (error) {\\n            console.error(\\\"Ошибка при полном списании баланса:\\\", error);\\n            alert(\\\"Не удалось списать весь баланс\\\");\\n        }\\n    };\\n\\n    // Функции для реферального бонуса\\n    const handleReferralBonusIncrease = async () => {\\n        const amount = parseInt(bonusInput, 10);\\n        if (!amount || amount <= 0) return;\\n        try {\\n            await increaseReferralBonus(user.id, {bonus: amount});\\n            setUser({...user, referrer_bonus: user.referrer_bonus + amount});\\n            setBonusInput('');\\n            alert('Реферальный бонус начислен!');\\n        } catch (error) {\\n            console.error(\\\"Ошибка при начислении бонуса:\\\", error);\\n            alert(\\\"Не удалось начислить бонус\\\");\\n        }\\n    };\\n\\n    const handleReferralBonusDecrease = async () => {\\n        const amount = parseInt(bonusInput, 10);\\n        if (!amount || amount <= 0) return;\\n        try {\\n            await increaseReferralBonus(user.id, {bonus: -amount});\\n            setUser({...user, referrer_bonus: user.referrer_bonus - amount});\\n            setBonusInput('');\\n            alert('Реферальный бонус списан!');\\n        } catch (error) {\\n            console.error(\\\"Ошибка при списании бонуса:\\\", error);\\n            alert(\\\"Не удалось списать бонус\\\");\\n        }\\n    };\\n\\n    const handleReferralBonusClear = async () => {\\n        if (user.referrer_bonus <= 0) return;\\n        const fd = new FormData();\\n        fd.append(\\\"bonus\\\", (-user.referrer_bonus).toString());\\n        try {\\n            await increaseReferralBonus(user.id, {bonus: -user.referrer_bonus});\\n            setUser({...user, referrer_bonus: 0});\\n            alert('Реферальный бонус списан!');\\n        } catch (error) {\\n            console.error(\\\"Ошибка при полном списании бонуса:\\\", error);\\n            alert(\\\"Не удалось списать весь бонус\\\");\\n        }\\n    };\\n\\n\\n    const handleDiscountUsed = async () => {\\n        try {\\n            // eslint-disable-next-line react-hooks/rules-of-hooks\\n            await useDiscount(user.id);\\n            setUser({...user, has_discount: false});\\n            alert('Использование скидки отмечено!');  // <-- вот здесь\\n        } catch (error) {\\n            console.error(\\\"Ошибка при использовании скидки:\\\", error);\\n            alert(\\\"Не удалось отметить использование скидки\\\");\\n        }\\n    };\\n\\n\\n    return (\\n        <div className=\\\"p-4 bg-gray-200-100 min-h-screen\\\">\\n            <h1 className=\\\"text-2xl font-bold text-center mb-4 text-brand\\\">Профиль пользователя</h1>\\n\\n            <div className=\\\"bg-white rounded shadow p-4 mb-4\\\">\\n                <p><strong>ID:</strong> {user.id}</p>\\n                <p><strong>Telegram ID:</strong> {user.telegram_id}</p>\\n                <p><strong>Никнейм:</strong> {user.nickname}</p>\\n                <p><strong>Роль:</strong> {user.role}</p>\\n                <p><strong>Забанен:</strong> {user.is_banned ? 'Да' : 'Нет'}</p>\\n                <p><strong>Продавец:</strong> {user.is_seller ? 'Да' : 'Нет'}</p>\\n                <strong>Баланс:</strong> {user.balance != null ? user.balance + ' раздач' : '0 раздач'}\\n                <p>\\n                    <strong>Пригласивший:</strong>{' '}\\n                    {user.inviter && user.inviter.nickname ? (\\n                        <a\\n                            href={`https://t.me/${user.inviter.nickname}`}\\n                            target=\\\"_blank\\\"\\n                            rel=\\\"noopener noreferrer\\\"\\n                            className=\\\"text-blue-600 hover:underline\\\"\\n                        >\\n                            {user.inviter.nickname}\\n                        </a>\\n                    ) : (\\n                        '—'\\n                    )}\\n                </p>\\n                <strong>Реферальный\\n                    бонус:</strong> {user.referrer_bonus != null ? user.referrer_bonus + ' руб' : '0 руб'}\\n                {user.invited_by && user.has_discount ? (\\n                    <p><strong>Есть скидка</strong></p>\\n                ) : null}\\n\\n\\n            </div>\\n\\n            {/* Действия над пользователем */}\\n            <div className=\\\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4\\\">\\n                <button\\n                    onClick={handleBanToggle}\\n                    className=\\\"bg-red-500 text-white p-2 rounded\\\"\\n                >\\n                    {user.is_banned ? 'Разбанить' : 'Забанить'}\\n                </button>\\n                <button\\n                    onClick={handleRoleToggle}\\n                    className=\\\"bg-yellow-500 text-white p-2 rounded\\\"\\n                >\\n                    {user.role === 'moderator' ? 'Разжаловать' : 'Назначить модератором'}\\n                </button>\\n            </div>\\n\\n            {/* Блок для управления балансом продавца */}\\n            {user.is_seller && (\\n                <div className=\\\"mb-4 p-4 bg-white rounded shadow\\\">\\n                    <h2 className=\\\"text-lg font-bold mb-2 text-brand\\\">Баланс продавца</h2>\\n                    <div className=\\\"flex gap-2 mb-2\\\">\\n                        <input\\n                            type=\\\"number\\\"\\n                            placeholder=\\\"Сумма\\\"\\n                            value={balanceInput}\\n                            onChange={(e) => setBalanceInput(e.target.value)}\\n                            className=\\\"border p-2 rounded flex-1 text-sm min-w-0\\\"\\n                        />\\n                        <button\\n                            onClick={handleBalanceIncrease}\\n                            className=\\\"bg-brand text-white px-2 py-1 rounded text-sm\\\"\\n                        >\\n                            Пополнить\\n                        </button>\\n                        <button\\n                            onClick={handleBalanceDecrease}\\n                            className=\\\"bg-red-500 text-white px-2 py-1 rounded text-sm\\\"\\n                        >\\n                            Списать\\n                        </button>\\n                    </div>\\n                    <button\\n                        onClick={handleBalanceClear}\\n                        className=\\\"bg-brandlight text-brand px-2 py-1 rounded text-sm w-full\\\"\\n                    >\\n                        Списать весь баланс\\n                    </button>\\n                </div>\\n            )}\\n\\n            {/* Блок для управления реферальным бонусом */}\\n            {user.invited_by && (\\n                <div className=\\\"mb-4 p-4 bg-white rounded shadow\\\">\\n                    <h2 className=\\\"text-lg font-bold mb-2 text-brand\\\">Реферальный бонус</h2>\\n                    <div className=\\\"flex gap-2 mb-2\\\">\\n                        <input\\n                            type=\\\"number\\\"\\n                            placeholder=\\\"Сумма бонуса\\\"\\n                            value={bonusInput}\\n                            onChange={(e) => setBonusInput(e.target.value)}\\n                            className=\\\"border p-2 rounded flex-1 text-sm min-w-0\\\"\\n                        />\\n                        <button\\n                            onClick={handleReferralBonusIncrease}\\n                            className=\\\"bg-brand text-white px-2 py-1 rounded text-sm\\\"\\n                        >\\n                            Начислить\\n                        </button>\\n                        <button\\n                            onClick={handleReferralBonusDecrease}\\n                            className=\\\"bg-red-500 text-white px-2 py-1 rounded text-sm\\\"\\n                        >\\n                            Списать\\n                        </button>\\n                    </div>\\n                    <button\\n                        onClick={handleReferralBonusClear}\\n                        className=\\\"bg-brandlight text-brand px-2 py-1 rounded text-sm w-full\\\"\\n                    >\\n                        Списать весь бонус\\n                    </button>\\n                    {user.invited_by && user.has_discount && (\\n                        <button\\n                            onClick={handleDiscountUsed}\\n                            className=\\\"mt-2 bg-brandlight text-brand p-2 rounded text-sm w-full\\\"\\n                        >\\n                            Использовал скидку\\n                        </button>\\n                    )}\\n\\n                </div>\\n            )}\\n\\n        </div>\\n    );\\n}\\n\\nexport default ModeratorUserDetailPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/CartScreenshotPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {createOrder, getMe, getProductById} from '../../services/api';\\nimport {AxiosResponse} from 'axios';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport FileUploader from \\\"../../components/FileUploader\\\";\\n\\ninterface Product {\\n    id: string;\\n    article: string;\\n    key_word: string;\\n    seller_id: string;\\n}\\n\\ntype ModalContent = { src: string};\\n\\n\\nfunction CartScreenshotPage() {\\n    const {productId} = useParams<{ productId: string }>();\\n    const navigate = useNavigate();\\n\\n    const [product, setProduct] = useState<Product | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n\\n    const [file1, setFile1] = useState<File | null>(null);\\n    const [preview1, setPreview1] = useState<string | null>(null);\\n\\n    // для второго скрина\\n    const [file2, setFile2] = useState<File | null>(null);\\n    const [preview2, setPreview2] = useState<string | null>(null);\\n\\n\\n    useEffect(() => {\\n        if (!file1) {\\n            setPreview1(null);\\n            return;\\n        }\\n        const url = URL.createObjectURL(file1);\\n        setPreview1(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file1]);\\n\\n    // создаём preview URL для file2\\n    useEffect(() => {\\n        if (!file2) {\\n            setPreview2(null);\\n            return;\\n        }\\n        const url = URL.createObjectURL(file2);\\n        setPreview2(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file2]);\\n\\n    const canContinue = Boolean(file1 && file2);\\n\\n    useEffect(() => {\\n        if (file2) {\\n            const url = URL.createObjectURL(file2);\\n            setPreview2(url);\\n            return () => URL.revokeObjectURL(url);\\n        }\\n        setPreview2(null);\\n    }, [file2]);\\n\\n\\n    useEffect(() => {\\n        if (!productId) return;\\n        getProductById(productId)\\n            .then((response: AxiosResponse<Product>) => {\\n                setProduct(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке товара:', err);\\n                setError('Не удалось загрузить данные о товаре');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [productId]);\\n\\n    const handleContinue = async () => {\\n        if (!canContinue) return;\\n        try {\\n            const me = await getMe();\\n            const userId = me.id;\\n            const formData = new FormData();\\n            formData.append('user_id', userId);\\n            formData.append('step', '1');\\n            formData.append('seller_id', product!.seller_id);\\n            formData.append('product_id', productId || '');\\n            formData.append('search_query_screenshot', file1 as File);\\n            formData.append('cart_screenshot', file2 as File);\\n\\n            const response = await createOrder(formData);\\n            const createdOrderId = response.data; // Ожидается, что backend вернет объект заказа с полем id\\n\\n            navigate(`/order/${createdOrderId}/step-2`);\\n        } catch (err) {\\n            console.error('Ошибка при создании заказа', err);\\n        }\\n    };\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [productId, navigate]);\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n    if (error || !product) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error || 'Товар не найден'}</div>;\\n    }\\n\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\\n    };\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto space-y-4 relative\\\">\\n\\n            <div className=\\\"bg-white border border-brand rounded-lg shadow p-4 text-sm text-gray-700 space-y-2\\\">\\n                <h2 className=\\\"text-lg font-semibold top-10 text-brand\\\">Шаг 1. Загрузите скриншоты по поиску товара</h2>\\n\\n                <p>\\n                    <strong>ВАЖНО!</strong> Оформление заказа происходит только на 5-м шаге.\\n                </p>\\n                <p>\\n                    Сначала выполните поиск нашего товара по ключевому слову, затем добавьте несколько товаров в\\n                    корзину.\\n                </p>\\n                <p>\\n                    <strong>Сделайте два скриншота</strong>: первый – скриншот поискового запроса, второй – скриншот корзины.\\n                </p>\\n                <p>\\n                    Ключевое слово: <strong>{product.key_word}</strong>\\n                </p>\\n\\n                <p className=\\\"mb-2 text-xs text-gray-500\\\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \\\"МОИ ПОКУПКИ\\\"</p>\\n            </div>\\n\\n\\n            <FileUploader\\n                label=\\\"1.Скриншот поискового запроса\\\"\\n                file={file1}\\n                preview={preview1}\\n                onFileChange={setFile1}\\n            />\\n            <FileUploader\\n                label=\\\"2.Скриншот корзины\\\"\\n                file={file2}\\n                preview={preview2}\\n                onFileChange={setFile2}\\n            />\\n\\n\\n            <button\\n                onClick={handleContinue}\\n                disabled={!canContinue}\\n                className={`w-full py-2 rounded-lg text-brand font-semibold ${\\n                    canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\\n                }`}\\n            >\\n                Продолжить\\n            </button>\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-3 mt-4 text-center\\\">\\n                <button\\n                    onClick={handleChannelClick}\\n                    className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\\n                    justify-center gap-2\\\">\\n                    <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-6 h-6\\\"/>\\n                    <span>Подписаться на канал</span>\\n                </button>\\n                <button\\n                    onClick={handleSupportClick}\\n                    className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\\\"\\n                >\\n                    Нужна помощь\\n                </button>\\n\\n            </div>\\n\\n        </div>\\n    );\\n}\\n\\nexport default CartScreenshotPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/ProductFindPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {AxiosResponse} from 'axios';\\nimport {getMe, getOrderById, getOrderReport, updateOrder} from \\\"../../services/api\\\";\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    description?: string;\\n    price: number;\\n    article: string;\\n    image_path?: string;\\n    key_word?: string;\\n}\\n\\ninterface Order {\\n    id: string;\\n    product: Product;\\n}\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n}\\n\\nfunction ProductFindPage() {\\n    const {orderId} = useParams<{ orderId: string }>();\\n    const navigate = useNavigate();\\n\\n    const [order, setOrder] = useState<Order | null>(null);\\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const [enteredArticle, setEnteredArticle] = useState('');\\n    const [articleStatus, setArticleStatus] = useState('');\\n    const [showReport, setShowReport] = useState(false);\\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\\n    const [flashInvalid, setFlashInvalid] = useState(false);\\n\\n    const isEmpty        = enteredArticle.trim() === \\\"\\\";\\n    const isCorrect      = order && enteredArticle.trim() === order.product.article;\\n    const minLengthReached = enteredArticle.trim().length >= 8;\\n    const isIncorrect      = minLengthReached && !isCorrect;\\n\\n    const toggleStep = (step: number) => {\\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\\n    };\\n\\n    const onArticleBlur = () => {\\n        if (!order) return;\\n        if (enteredArticle.trim() !== order.product.article) {\\n            setFlashInvalid(true);\\n        }\\n    };\\n\\n\\n    useEffect(() => {\\n        if (!order) return;\\n        if (enteredArticle.trim() === order.product.article) {\\n            setArticleStatus('Артикул правильный');\\n        } else {\\n            setArticleStatus('');\\n        }\\n    }, [enteredArticle, order]);\\n\\n\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderById(orderId)\\n            .then((response: AxiosResponse<Order>) => {\\n                setOrder(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке заказа:', err);\\n                setError('Не удалось загрузить заказ');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [orderId]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReportData(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n            });\\n    }, [orderId]);\\n\\n    useEffect(() => {\\n        if (!order) return;\\n        if (enteredArticle.trim() === order.product.article) {\\n            setArticleStatus('Артикул правильный');\\n        } else {\\n            setArticleStatus('');\\n        }\\n    }, [enteredArticle, order]);\\n\\n    const canContinue = articleStatus === 'Артикул правильный';\\n\\n    const handleContinue = async () => {\\n        if (!canContinue || !orderId) return;\\n        try {\\n            await updateOrder(orderId, {step: 2});\\n            navigate(`/order/${orderId}/step-3`);\\n        } catch (err) {\\n            console.error('Ошибка при обновлении заказа:', err);\\n        }\\n    };\\n\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            if (!orderId) return;\\n            getOrderById(orderId)\\n                .then((response: AxiosResponse<Order>) => {\\n                    const productId = response.data.product.id;\\n                    navigate(-1);\\n                })\\n                .catch((err) => {\\n                    console.error('Ошибка при загрузке заказа:', err);\\n                    setError('Не удалось загрузить заказ');\\n                });\\n        });\\n        // return () => removeBackListener();\\n    }, [orderId, navigate]);\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n    if (error || !order) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error || 'Заказ не найден'}</div>;\\n    }\\n\\n    const {product} = order;\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\\n    };\\n\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto\\\">\\n            <div className=\\\"bg-white border border-brand p-4 rounded-lg shadow mb-4\\\">\\n                <h2 className=\\\"text-lg font-bold mb-2 text-brand\\\">Шаг 2. Найдите наш товар</h2>\\n                <ul className=\\\"list-disc list-inside text-sm text-gray-700 space-y-1\\\">\\n                    <li>Найдите наш товар на сайте или в приложении WB</li>\\n                    <li>\\n                        Используйте ключевое слово{product.key_word ? `: «${product.key_word}»` : ''}\\n                    </li>\\n                    <li>Фото товара ниже</li>\\n                    <li>\\n                        <strong>Введите артикул товара для проверки</strong>\\n                    </li>\\n                    <p>\\n                        Если артикул правильный, вы перейдёте на следующий шаг\\n                    </p>\\n                    <p className=\\\"mb-2 text-xs text-gray-500\\\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \\\"МОИ ПОКУПКИ\\\"</p>\\n\\n                </ul>\\n            </div>\\n\\n            <div className=\\\"mb-4\\\">\\n                <label htmlFor=\\\"articleInput\\\" className=\\\"block text-sm font-medium mb-1\\\">\\n                    Артикул товара\\n                </label>\\n                <input\\n                    id=\\\"articleInput\\\"\\n                    type=\\\"text\\\"\\n                    value={enteredArticle}\\n                    onChange={e => setEnteredArticle(e.target.value)}\\n                    onBlur={onArticleBlur}\\n                    placeholder=\\\"Введите артикул...\\\"\\n                    className={`\\n      rounded-md p-2 w-full text-sm\\n      border transition-colors duration-200\\n      ${\\n                        flashInvalid\\n                            ? 'flash-border'\\n                            : articleStatus === 'Артикул правильный'\\n                                ? 'border-green-500'\\n                                : 'border-gray-300'\\n                    }\\n    `}\\n                    onAnimationEnd={() => setFlashInvalid(false)}\\n                />\\n                {articleStatus === 'Артикул правильный' && (\\n                    <p className=\\\"mt-2 text-sm font-semibold text-green-600\\\">\\n                        Артикул правильный\\n                    </p>\\n                )}\\n            </div>\\n\\n\\n\\n            <button\\n                onClick={handleContinue}\\n                disabled={!canContinue}\\n                className={`w-full py-2 mb-4 rounded-lg text-brand border border-brand font-semibold text-center ${\\n                    canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\\n                }`}\\n            >\\n                Продолжить\\n            </button>\\n\\n\\n            <div className=\\\"mb-4\\\">\\n                <div className=\\\"w-full aspect-[3/4] bg-gray-200-100 rounded overflow-hidden relative\\\">\\n                    {product.image_path ? (\\n                        <img\\n                            src={\\n                                product.image_path.startsWith('http')\\n                                    ? product.image_path\\n                                    : GetUploadLink(product.image_path)\\n                            }\\n                            alt={product.name}\\n                            className=\\\"absolute inset-0 w-full h-full object-cover\\\"\\n                        />\\n                    ) : (\\n                        <div className=\\\"absolute inset-0 flex items-center justify-center text-gray-400\\\">\\n                            Нет фото\\n                        </div>\\n                    )}\\n                </div>\\n            </div>\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-3 mt-4\\\">\\n                <button\\n                    onClick={() => setShowReport(prev => !prev)}\\n                    className=\\\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\\\"\\n                >\\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\\n                </button>\\n\\n                {showReport && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                        <h3 className=\\\"text-lg font-bold mb-2\\\">Отчет</h3>\\n                        {reportData ? (\\n                            <div className=\\\"space-y-2\\\">\\n                                {/* Шаг 1 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(1)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 1. Скрины корзины</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[1] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[1] && (\\n                                        <div className=\\\"border-t p-4 space-y-3\\\">\\n                                            {reportData.search_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин поискового запроса</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\\n                                                        alt=\\\"Скрин поискового запроса\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                            {reportData.cart_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\\n                                                        alt=\\\"Скрин корзины\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n\\n                                <div className=\\\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\\\">\\n                                    <div className=\\\"font-semibold text-black\\\">Шаг 2. Найдите наш товар\\n                                    </div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 3. Добавить товар в избранное\\n                                    </div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 4. Реквизиты для перевода кэшбэка\\n                                    </div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 5. Оформление заказа</div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 6. Получение товара</div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 7. Отзыв</div>\\n                                </div>\\n\\n\\n                            </div>\\n                        ) : (\\n                            <p className=\\\"text-sm text-gray-500\\\">Отчет пока пуст.</p>\\n                        )}\\n                    </div>\\n                )}\\n                <div className=\\\"flex flex-col gap-3 text-center\\\">\\n\\n                    <button\\n                        onClick={handleChannelClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\\n                         justify-center gap-2\\\">\\n                        <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-6 h-6\\\"/>\\n                        <span>Подписаться на канал</span>\\n                    </button>\\n                    <button\\n                        onClick={handleSupportClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\\\">\\n                        Нужна помощь\\n                    </button>\\n                    <button\\n                        onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\\n                        className=\\\"flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\\\"\\n                    >\\n                        Проверить продавца\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default ProductFindPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/StepOrderPlacement.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getOrderReport, updateOrder} from '../../services/api';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {AxiosResponse} from 'axios';\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\nimport FileUploader from \\\"../../components/FileUploader\\\";\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    article?: string;\\n}\\n\\ntype ModalContent = { src: string};\\n\\nfunction StepOrderPlacement() {\\n    const navigate = useNavigate();\\n    const {orderId} = useParams<{ orderId: string }>();\\n\\n    const [isOrderPlaced, setIsOrderPlaced] = useState(false);\\n    // const [screenshotFile, setScreenshotFile] = useState<File | null>(null);\\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\\n    const [showReport, setShowReport] = useState(false);\\n    const [file, setFile] = useState<File | null>(null);\\n    const [preview, setPreview] = useState<string | null>(null);\\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\\n    const orderImgPath = '/images/order.jpg';\\n\\n\\n    const openModal = (src: string) => {\\n        setModalContent({ src });\\n    };\\n    const closeModal = () => setModalContent(null);\\n\\n    const toggleStep = (step: number) => {\\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\\n    };\\n    useEffect(() => {\\n        if (!file) {\\n            setPreview(null);\\n            return;\\n        }\\n        const url = URL.createObjectURL(file);\\n        setPreview(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file]);\\n\\n    const canContinue = isOrderPlaced && file;\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [orderId, navigate]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReportData(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n            });\\n    }, [orderId]);\\n\\n    // const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    //     if (e.target.files && e.target.files.length > 0) {\\n    //         setScreenshotFile(e.target.files[0]);\\n    //     } else {\\n    //         setScreenshotFile(null);\\n    //     }\\n    // };\\n\\n    const handleOrderPlacedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n        setIsOrderPlaced(e.target.checked);\\n        if (!e.target.checked) {\\n            setFile(null);\\n        }\\n    };\\n\\n    const handleContinue = async () => {\\n        if (!canContinue || !orderId) return;\\n        try {\\n            await updateOrder(orderId, {\\n                step: 5,\\n                final_cart_screenshot: file,\\n            });\\n            navigate(`/order/${orderId}/step-6`);\\n        } catch (err) {\\n            console.error('Ошибка при обновлении заказа:', err);\\n        }\\n    };\\n\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\\n    };\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto\\\">\\n\\n            <div className=\\\"bg-white border border-brand rounded-md p-4 text-sm text-gray-700 mb-4 space-y-2\\\">\\n                <h1 className=\\\"text-lg font-bold mb-4 text-brand\\\">Шаг 5. Оформление заказа</h1>\\n                <p>1. Оформите заказ на Wildberries</p>\\n                <p>2. Сделайте скрин из раздела «Доставки» в личном кабинете</p>\\n                <p>3. На скрине обязательно должна быть указана цена</p>\\n                <p>4. Загрузите скрин заказа в отчет</p>\\n                <div\\n                    onClick={() => openModal(orderImgPath)}\\n                    className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                >\\n                    Пример скрина заказа\\n                </div>\\n                <p className=\\\"mb-2 text-xs text-gray-500\\\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \\\"МОИ ПОКУПКИ\\\"</p>\\n\\n            </div>\\n\\n            <div className=\\\"flex items-center mb-4\\\">\\n                <input\\n                    type=\\\"checkbox\\\"\\n                    id=\\\"orderPlaced\\\"\\n                    checked={isOrderPlaced}\\n                    onChange={handleOrderPlacedChange}\\n                    className=\\\"mr-2\\\"\\n                />\\n                <label htmlFor=\\\"orderPlaced\\\" className=\\\"text-sm text-gray-700\\\">\\n                    Оформил(а) заказ\\n                </label>\\n            </div>\\n\\n            {isOrderPlaced && (\\n                <FileUploader\\n                    label=\\\"Фото товара\\\"\\n                    file={file}\\n                    preview={preview}\\n                    onFileChange={setFile}\\n                />\\n            )}\\n\\n\\n            <button\\n                onClick={handleContinue}\\n                disabled={!canContinue}\\n                className={`w-full py-2 rounded text-brand mb-4 mt-4 ${\\n                    canContinue\\n                        ? 'bg-brand hover:bg-brand'\\n                        : 'bg-gray-200-400 border border-brand cursor-not-allowed'\\n                }`}\\n            >\\n                Продолжить\\n            </button>\\n\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n\\n            <div className=\\\"flex flex-col gap-3 mt-4\\\">\\n                <button\\n                    onClick={() => setShowReport(prev => !prev)}\\n                    className=\\\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\\\"\\n                >\\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\\n                </button>\\n\\n                {showReport && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                        <h3 className=\\\"text-lg font-bold mb-2\\\">Отчет</h3>\\n                        {reportData ? (\\n                                <div className=\\\"space-y-2\\\">\\n                                    {/* Шаг 1 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(1)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 1. Скрины корзины</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[1] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[1] && (\\n                                            <div className=\\\"border-t p-4 space-y-3\\\">\\n                                                {reportData.search_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин поискового запроса</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.search_screenshot_path)}\\n                                                            alt=\\\"Скрин поискового запроса\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                                {reportData.cart_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.cart_screenshot_path)}\\n                                                            alt=\\\"Скрин корзины\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 2 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(2)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 2. Артикул товара</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[2] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[2] && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm\\\">{reportData.article}</p>\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 3 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(3)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 3. Товар и бренд в избранное</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[3] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[3] && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm\\\">Ваш товар и бренд успешно добавлены в избранное.</p>\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 4 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(4)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 4. Реквизиты</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[4] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[4] && (\\n                                            <div className=\\\"border-t p-4 space-y-1\\\">\\n                                                {reportData.card_number &&\\n                                                    <p className=\\\"text-sm\\\">Номер карты: {reportData.card_number}</p>}\\n                                                {reportData.phone_number &&\\n                                                    <p className=\\\"text-sm\\\">Телефон: {reportData.phone_number}</p>}\\n                                                {reportData.name && <p className=\\\"text-sm\\\">Имя: {reportData.name}</p>}\\n                                                {reportData.bank && <p className=\\\"text-sm\\\">Банк: {reportData.bank}</p>}\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n\\n\\n\\n                                    <div className=\\\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\\\">\\n                                        <div className=\\\"font-semibold text-black\\\">Шаг 5. Оформление заказа</div>\\n                                        <div className=\\\"font-semibold text-gray-400\\\">Шаг 6. Получение товара</div>\\n                                        <div className=\\\"font-semibold text-gray-400\\\">Шаг 7. Отзыв</div>\\n\\n                                    </div>\\n                                </div>\\n\\n                            ) :\\n                            <p className=\\\"text-sm text-gray-500\\\">Отчет пока пуст.</p>\\n                        }\\n                    </div>\\n                )}\\n                <div className=\\\"flex flex-col gap-3 mt-2 text-center\\\">\\n\\n                    <button\\n                        onClick={handleChannelClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\\n                         justify-center gap-2\\\">\\n                        <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-6 h-6\\\"/>\\n                        <span>Подписаться на канал</span>\\n                    </button>\\n                    <button\\n                        onClick={handleSupportClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\\\">\\n                        Нужна помощь\\n                    </button>\\n                </div>\\n            </div>\\n            {modalContent && (\\n                <div\\n                    className=\\\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\\\"\\n                    onClick={closeModal}\\n                >\\n                    <div\\n                        className=\\\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\\\"\\n                        onClick={e => e.stopPropagation()}\\n                    >\\n                        {/* Крестик в правом верхнем углу */}\\n                        <button\\n                            onClick={closeModal}\\n                            className=\\\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\\\"\\n                        >\\n                            &times;\\n                        </button>\\n\\n                        {/* Вот здесь вставляем картинку */}\\n                        <img\\n                            src={modalContent.src}\\n                            alt=\\\"Пример\\\"\\n                            className=\\\"w-full h-auto mt-4\\\"\\n                        />\\n                    </div>\\n                </div>\\n            )}\\n            </div>\\n\\n    );\\n}\\n\\nexport default StepOrderPlacement;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/ProductFavoritePage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getOrderById, getOrderReport, updateOrder} from \\\"../../services/api\\\";\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {AxiosResponse} from 'axios';\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    description?: string;\\n    price: number;\\n    article: string;\\n    image_path?: string;\\n    key_word?: string;\\n}\\n\\ninterface Order {\\n    id: string;\\n    product: Product;\\n    // Другие поля заказа, если необходимо\\n}\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    article?: string;\\n}\\n\\nfunction ProductFavoritePage() {\\n    const navigate = useNavigate();\\n    const {orderId} = useParams<{ orderId: string }>();\\n\\n    const [addedToFavorite, setAddedToFavorite] = useState(false);\\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\\n    const [showReport, setShowReport] = useState(false);\\n    const canContinue = addedToFavorite;\\n    const [order, setOrder] = useState<Order | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\\n\\n    const toggleStep = (step: number) => {\\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\\n    };\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [orderId, navigate]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderById(orderId)\\n            .then((response: AxiosResponse<Order>) => {\\n                setOrder(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке заказа:', err);\\n                setError('Не удалось загрузить заказ');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [orderId]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReportData(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n            });\\n    }, [orderId]);\\n\\n    const handleContinue = async () => {\\n        if (!canContinue || !orderId) return;\\n        try {\\n            await updateOrder(orderId, {step: 3});\\n            navigate(`/order/${orderId}/step-4`);\\n        } catch (err) {\\n            console.error('Ошибка при обновлении заказа:', err);\\n        }\\n    };\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n    if (error || !order) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error || 'Заказ не найден'}</div>;\\n    }\\n\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\\n    };\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto\\\">\\n\\n            <div className=\\\"bg-white border border-brand p-4 rounded-lg shadow mb-4 text-sm text-gray-700\\\">\\n                <h1 className=\\\"text-lg font-bold mb-4 text-brand\\\">Шаг 3. Добавить товар в избранное</h1>\\n                <p className=\\\"mb-2\\\">• Добавьте товар в избранное</p>\\n                <p className=\\\"mb-2\\\">• Добавьте бренд в избранное</p>\\n                <p className=\\\"mb-2 text-xs text-gray-500\\\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \\\"МОИ ПОКУПКИ\\\"</p>\\n            </div>\\n\\n            <div className=\\\"flex items-center mb-4\\\">\\n                <input\\n                    type=\\\"checkbox\\\"\\n                    id=\\\"favoriteCheckbox\\\"\\n                    checked={addedToFavorite}\\n                    onChange={(e) => setAddedToFavorite(e.target.checked)}\\n                    className=\\\"mr-2\\\"\\n                />\\n                <label htmlFor=\\\"favoriteCheckbox\\\" className=\\\"text-sm text-gray-700\\\">\\n                    Добавил товар в избранное\\n                </label>\\n            </div>\\n\\n            <button\\n                onClick={handleContinue}\\n                disabled={!canContinue}\\n                className={`block w-full py-2 mb-4 rounded-lg text-brand font-semibold text-center ${\\n                    canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\\n                }`}\\n            >\\n                Продолжить\\n            </button>\\n\\n\\n            <div className=\\\"mb-4\\\">\\n                <div className=\\\"w-full aspect-[3/4] bg-gray-200-100 rounded overflow-hidden relative\\\">\\n                    {order!.product.image_path ? (\\n                        <img\\n                            src={\\n                                order!.product.image_path.startsWith('http')\\n                                    ? order!.product.image_path\\n                                    : GetUploadLink(order!.product.image_path)\\n                            }\\n                            alt={order!.product.name}\\n                            className=\\\"absolute inset-0 w-full h-full object-cover\\\"\\n                        />\\n                    ) : (\\n                        <div className=\\\"absolute inset-0 flex items-center justify-center text-gray-400\\\">\\n                            Нет фото\\n                        </div>\\n                    )}\\n                </div>\\n            </div>\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-3 mt-4\\\">\\n                <button\\n                    onClick={() => setShowReport(prev => !prev)}\\n                    className=\\\"w-full py-2 mb-4 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\\\"\\n                >\\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\\n                </button>\\n\\n                {showReport && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                        <h3 className=\\\"text-lg font-bold mb-2\\\">Отчет</h3>\\n                        {reportData ? (\\n                            <div className=\\\"space-y-2\\\">\\n                                {/* Шаг 1 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(1)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 1. Скрины корзины</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[1] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[1] && (\\n                                        <div className=\\\"border-t p-4 space-y-3\\\">\\n                                            {reportData.search_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин поискового запроса</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\\n                                                        alt=\\\"Скрин поискового запроса\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                            {reportData.cart_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\\n                                                        alt=\\\"Скрин корзины\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 2 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(2)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 2. Артикул товара</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[2] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[2] && (\\n                                        <div className=\\\"border-t p-4\\\">\\n                                            <p className=\\\"text-sm\\\">{reportData.article}</p>\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                <div className=\\\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\\\">\\n                                    <div className=\\\"font-semibold text-black\\\">Шаг 3. Добавить товар в избранное\\n                                    </div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 4. Реквизиты для перевода кэшбэка\\n                                    </div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 5. Оформление заказа</div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 6. Получение товара</div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 7. Отзыв</div>\\n                                </div>\\n\\n\\n                            </div>\\n                        ) : (\\n                            <p className=\\\"text-sm text-gray-500\\\">Отчет пока пуст.</p>\\n                        )}\\n                    </div>\\n                )}\\n            </div>\\n                <div className=\\\"flex flex-col gap-3 mt-2 text-center\\\">\\n\\n                    <button\\n                        onClick={handleChannelClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\\n                         justify-center gap-2\\\">\\n                        <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-6 h-6\\\"/>\\n                        <span>Подписаться на канал</span>\\n                    </button>\\n                    <button\\n                        onClick={handleSupportClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\\\">\\n                        Нужна помощь\\n                    </button>\\n                </div>\\n            </div>\\n    );\\n}\\n\\nexport default ProductFavoritePage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/StepReviewReportPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getOrderById, getOrderReport, updateOrder} from '../../services/api';\\nimport {AxiosResponse} from 'axios';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\nimport FileUploader from \\\"../../components/FileUploader\\\";\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    brand: string;\\n    article: string;\\n    price: number;\\n    wb_price: number;\\n    requirements_agree: boolean;\\n    tg: string;\\n}\\n\\ninterface Order {\\n    id: string;\\n    product: Product;\\n    seller: User\\n}\\n\\ninterface User {\\n    nickname: string\\n}\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    article?: string;\\n}\\n\\ntype ModalContent = { src: string};\\n\\nfunction StepReviewReportPage() {\\n    const {orderId} = useParams<{ orderId: string }>();\\n    const navigate = useNavigate();\\n\\n    const [order, setOrder] = useState<Order | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\\n\\n    const [leftReview, setLeftReview] = useState(false);\\n    // const [reviewScreenshot, setReviewScreenshot] = useState<File | null>(null);\\n    // const [checkScreenshot, setCheckScreenshot] = useState<File | null>(null);\\n    const [checkNumber, setCheckNumber] = useState('');\\n    const [showReport, setShowReport] = useState(false);\\n    const [file1, setFile1] = useState<File | null>(null);\\n    const [preview1, setPreview1] = useState<string | null>(null);\\n\\n    const [file2, setFile2] = useState<File | null>(null);\\n    const [preview2, setPreview2] = useState<string | null>(null);\\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\\n\\n    const openModal = (src: string) => {\\n        setModalContent({ src });\\n    };\\n    const closeModal = () => setModalContent(null);\\n\\n    const feedbackImgPath = '/images/feedback.jpg';\\n\\n    const toggleStep = (step: number) => {\\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\\n    };\\n\\n    useEffect(() => {\\n        if (!file1) {\\n            setPreview1(null);\\n            return;\\n        }\\n        const url = URL.createObjectURL(file1);\\n        setPreview1(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file1]);\\n\\n    useEffect(() => {\\n        if (!file2) {\\n            setPreview2(null);\\n            return;\\n        }\\n        const url = URL.createObjectURL(file2);\\n        setPreview2(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file2]);\\n\\n    const canContinue =\\n        leftReview &&\\n        file1 !== null &&\\n        file2 !== null &&\\n        checkNumber.trim() !== '';\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            if (!orderId) return;\\n            navigate(-1);\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate, orderId]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReportData(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n            });\\n    }, [orderId]);\\n\\n    useEffect(() => {\\n        if (!orderId) {\\n            setError('Не указан orderId');\\n            setLoading(false);\\n            return;\\n        }\\n        getOrderById(orderId)\\n            .then((res: AxiosResponse<Order>) => {\\n                setOrder(res.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке заказа:', err);\\n                setError('Не удалось загрузить данные о заказе');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [orderId]);\\n\\n    // const handleReviewScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    //     if (e.target.files && e.target.files.length > 0) {\\n    //         setReviewScreenshot(e.target.files[0]);\\n    //     } else {\\n    //         setReviewScreenshot(null);\\n    //     }\\n    // };\\n    //\\n    // const handleCheckScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    //     if (e.target.files && e.target.files.length > 0) {\\n    //         setCheckScreenshot(e.target.files[0]);\\n    //     } else {\\n    //         setCheckScreenshot(null);\\n    //     }\\n    // };\\n\\n    const handleLeftReviewChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n        const checked = e.target.checked;\\n        setLeftReview(checked);\\n        if (!checked) {\\n            setFile1(null);\\n            setFile2(null);\\n            setCheckNumber('');\\n        }\\n    };\\n\\n    const handleCheckSeller = () => {\\n        if (order && order.seller && order.seller.nickname) {\\n            window.open(`https://t.me/${order.seller.nickname}`, '_blank');\\n        } else {\\n            alert(\\\"Информация о продавце недоступна\\\");\\n        }\\n    };\\n\\n\\n    const handleContinue = async () => {\\n        if (!canContinue || !orderId) return;\\n        try {\\n            await updateOrder(orderId, {\\n                step: 7,\\n                review_screenshot: file1,\\n                receipt_screenshot: file2,\\n                receipt_number: checkNumber,\\n            });\\n            navigate(`/order/${orderId}/order-info`);\\n        } catch (err) {\\n            console.error('Ошибка при обновлении заказа:', err);\\n        }\\n    };\\n\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\\n    };\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    if (loading) return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    if (error || !order) return <div className=\\\"p-4 text-red-600\\\">{error || 'Заказ не найден'}</div>;\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto\\\">\\n            <div className=\\\"flex items-center justify-between mb-4\\\">\\n\\n                <button\\n                    onClick={handleCheckSeller}\\n                    className=\\\"flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\\\"\\n                >\\n                    <svg\\n                        xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                        viewBox=\\\"0 0 240 240\\\"\\n                        className=\\\"w-5 h-5\\\"\\n                        fill=\\\"currentColor\\\"\\n                    >\\n                        <path\\n                            d=\\\"M120 0C53.73 0 0 53.73 0 120s53.73 120 120 120 120-53.73 120-120S186.27 0 120 0zm57.07 84.27l-18.96 89.38c-1.44 6.48-5.27 8.08-10.7 5.03l-29.51-21.76-14.23 13.7c-1.57 1.57-2.87 2.87-5.83 2.87l2.09-29.63 53.95-48.66c2.35-2.09-.51-3.25-3.64-1.16l-66.55 41.91-28.68-9.0c-6.25-2.0-6.38-6.25 1.31-9.25l112.3-43.38c5.25-2.0 9.87 1.31 8.91 9.06z\\\"\\n                        />\\n                    </svg>\\n                    <span>Написать продавцу</span>\\n                </button>\\n\\n            </div>\\n\\n            <div className=\\\"bg-white border border-brand p-3 rounded-md text-sm text-gray-700 space-y-2 mb-4\\\">\\n                <h1 className=\\\"text-lg font-bold\\\">Шаг 7. Отзыв</h1>\\n                <p className=\\\"mb-2\\\">1. Согласуйте отзыв с продавцом.</p>\\n                {order.product.requirements_agree ? (\\n                    <>\\n                        <p className=\\\"mb-2 text-brand\\\">\\n                            Обратите внимание, что это обязательное условие для получения кешбека!\\n                            <p className=\\\"mb-2 text-black\\\">2. Фото, видео, текст, оценка 5.</p>\\n                        </p>\\n                    </>\\n                ) : (\\n                    <p className=\\\"mb-2\\\">\\n                        1. Напишите отзыв. Фото, видео, текст, оценка 5.\\n                    </p>\\n                )}\\n                <div\\n                    onClick={() => openModal(feedbackImgPath)}\\n                    className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                >\\n                  Пример отзыва\\n                </div>\\n                <p className=\\\"mb-2 text-xs text-gray-500\\\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \\\"МОИ ПОКУПКИ\\\"</p>\\n\\n            </div>\\n\\n            <div className=\\\"flex items-center mb-4\\\">\\n                <input\\n                    type=\\\"checkbox\\\"\\n                    id=\\\"leftReview\\\"\\n                    className=\\\"mr-2\\\"\\n                    checked={leftReview}\\n                    onChange={handleLeftReviewChange}\\n                />\\n                <label htmlFor=\\\"leftReview\\\" className=\\\"text-sm text-gray-700\\\">\\n                    Оставил(а) отзыв\\n                </label>\\n            </div>\\n\\n            {leftReview && (\\n                <>\\n                    <FileUploader\\n                        label=\\\"Скрин статуса «Доставка» (из личного кабинета)\\\"\\n                        file={file1}\\n                        preview={preview1}\\n                        onFileChange={setFile1}\\n                    />\\n                    <FileUploader\\n                        label=\\\"Фото разрезанных штрихкодов на фоне товара\\\"\\n                        file={file2}\\n                        preview={preview2}\\n                        onFileChange={setFile2}\\n                    />\\n                </>\\n            )}\\n\\n\\n            <div>\\n                <label className=\\\"block text-sm font-medium mb-1 mt-2\\\">\\n                    Номер чека\\n                </label>\\n                <input\\n                    type=\\\"text\\\"\\n                    value={checkNumber}\\n                    onChange={(e) => setCheckNumber(e.target.value)}\\n                    placeholder=\\\"Введите номер чека\\\"\\n                    className=\\\"w-full border border-darkGray rounded-md p-2 text-sm\\\"\\n                />\\n            </div>\\n            <div className=\\\"flex gap-2 mb-4 mt-4\\\">\\n                <button\\n                    onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\\n                    className=\\\"flex-1 bg-white text-gray-700 text-sm py-2 rounded-lg border border-brand text-center\\\"\\n                >\\n                    Проверить продавца\\n                </button>\\n                <button\\n                    onClick={handleContinue}\\n                    disabled={!canContinue}\\n                    className={`flex-1 py-2 rounded text-brand text-sm ${\\n                        canContinue ? 'bg-brand hover:bg-brand-dark' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\\n                    }`}\\n                >\\n                    Продолжить\\n                </button>\\n            </div>\\n\\n            {/* Инструкции */}\\n            <div className=\\\"bg-white rounded-lg shadow p-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция на отзыв</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция на отзыв\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4 mt-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция на чек</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция на чек\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4 mt-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция на номер чека</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция на номер чека\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-3 mt-4\\\">\\n                <button\\n                    onClick={() => setShowReport(prev => !prev)}\\n                    className=\\\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\\\"\\n                >\\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\\n                </button>\\n                {showReport && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                        <h3 className=\\\"text-lg font-bold mb-2\\\">Отчет</h3>\\n                        {reportData ? (\\n                                <div className=\\\"space-y-2\\\">\\n                                    {/* Шаг 1 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(1)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 1. Скрины корзины</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[1] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[1] && (\\n                                            <div className=\\\"border-t p-4 space-y-3\\\">\\n                                                {reportData.search_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин поискового запроса</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.search_screenshot_path)}\\n                                                            alt=\\\"Скрин поискового запроса\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                                {reportData.cart_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.cart_screenshot_path)}\\n                                                            alt=\\\"Скрин корзины\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 2 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(2)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 2. Артикул товара</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[2] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[2] && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm\\\">{reportData.article}</p>\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 3 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(3)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 3. Товар и бренд в избранное</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[3] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[3] && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm\\\">Ваш товар и бренд успешно добавлены в избранное.</p>\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 4 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(4)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 4. Реквизиты</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[4] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[4] && (\\n                                            <div className=\\\"border-t p-4 space-y-1\\\">\\n                                                {reportData.card_number &&\\n                                                    <p className=\\\"text-sm\\\">Номер карты: {reportData.card_number}</p>}\\n                                                {reportData.phone_number &&\\n                                                    <p className=\\\"text-sm\\\">Телефон: {reportData.phone_number}</p>}\\n                                                {reportData.name && <p className=\\\"text-sm\\\">Имя: {reportData.name}</p>}\\n                                                {reportData.bank && <p className=\\\"text-sm\\\">Банк: {reportData.bank}</p>}\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 5 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(5)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 5. Финальный скрин корзины</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[5] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[5] && reportData.final_cart_screenshot_path && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                <img\\n                                                    src={GetUploadLink(reportData.final_cart_screenshot_path)}\\n                                                    alt=\\\"Финальный скрин корзины\\\"\\n                                                    className=\\\"w-full rounded\\\"\\n                                                />\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 6 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(6)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 6. Скрины доставки и штрихкодов</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[6] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[6] && (\\n                                            <div className=\\\"border-t p-4 space-y-3\\\">\\n                                                {reportData.delivery_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин доставки</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.delivery_screenshot_path)}\\n                                                            alt=\\\"Скрин доставки\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                                {reportData.barcodes_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин штрихкодов</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.barcodes_screenshot_path)}\\n                                                            alt=\\\"Скрин штрихкодов\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    <div className=\\\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\\\">\\n                                        <div className=\\\"font-semibold text-black\\\">Шаг 7. Отзыв</div>\\n                                    </div>\\n                                </div>\\n\\n                            ) :\\n                            <p className=\\\"text-sm text-gray-500\\\">Отчет пока пуст.</p>\\n                        }\\n                    </div>\\n                )}\\n\\n            </div>\\n\\n\\n\\n            <div className=\\\"flex flex-col gap-3 mt-4 text-center\\\">\\n                <button\\n                    onClick={handleChannelClick}\\n                    className=\\\"w-full bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex\\n                    items-center justify-center gap-2\\\"\\n                >\\n                    <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-6 h-6\\\"/>\\n                    Подписаться на канал\\n                </button>\\n                <button\\n                    onClick={handleSupportClick}\\n                    className=\\\"w-full bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\\\"\\n                >\\n                    Нужна помощь\\n                </button>\\n            </div>\\n            {modalContent && (\\n                <div\\n                    className=\\\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\\\"\\n                    onClick={closeModal}\\n                >\\n                    <div\\n                        className=\\\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\\\"\\n                        onClick={e => e.stopPropagation()}\\n                    >\\n                        {/* Крестик в правом верхнем углу */}\\n                        <button\\n                            onClick={closeModal}\\n                            className=\\\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\\\"\\n                        >\\n                            &times;\\n                        </button>\\n\\n                        {/* Вот здесь вставляем картинку */}\\n                        <img\\n                            src={modalContent.src}\\n                            alt=\\\"Пример\\\"\\n                            className=\\\"w-full h-auto mt-4\\\"\\n                        />\\n                    </div>\\n                </div>\\n            )}\\n        </div>\\n\\n\\n    )\\n        ;\\n}\\n\\nexport default StepReviewReportPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/ProductPickupPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getOrderById, getOrderReport, updateOrder} from '../../services/api';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {AxiosResponse} from 'axios';\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\nimport FileUploader from \\\"../../components/FileUploader\\\";\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    brand: string;\\n    article: string;\\n    price: number;\\n    wb_price: number;\\n    tg: string;\\n}\\n\\ninterface Order {\\n    id: string;\\n    product: Product;\\n}\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    article?: string;\\n}\\n\\ntype ModalContent = { src: string; isVideo: boolean };\\n\\nfunction ProductPickupPage() {\\n    const {orderId} = useParams<{ orderId: string }>();\\n    const navigate = useNavigate();\\n\\n    const [order, setOrder] = useState<Order | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\\n\\n    const [pickedUp, setPickedUp] = useState(false);\\n    // const [deliveryScreenshot, setDeliveryScreenshot] = useState<File | null>(null);\\n    // const [barcodeScreenshot, setBarcodeScreenshot] = useState<File | null>(null);\\n    const [showReport, setShowReport] = useState(false);\\n    const [file1, setFile1] = useState<File | null>(null);\\n    const [preview1, setPreview1] = useState<string | null>(null);\\n\\n    const [file2, setFile2] = useState<File | null>(null);\\n    const [preview2, setPreview2] = useState<string | null>(null);\\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\\n    const receiptVideoPath = '/images/electronic_receipt.mp4';\\n    const receivingImgPath = '/images/receiving.jpg';\\n    const barcodeImgPath = '/images/barcode.jpg';\\n\\n    // единственное состояние для модалки\\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\\n\\n    const openModal = (src: string) => {\\n        setModalContent({ src, isVideo: src.endsWith('.mp4') });\\n    };\\n    const closeModal = () => setModalContent(null);\\n\\n    const toggleStep = (step: number) => {\\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\\n    };\\n\\n    useEffect(() => {\\n        if (!file1) return setPreview1(null);\\n        const url = URL.createObjectURL(file1);\\n        setPreview1(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file1]);\\n\\n    useEffect(() => {\\n        if (!file2) return setPreview2(null);\\n        const url = URL.createObjectURL(file2);\\n        setPreview2(url);\\n        return () => URL.revokeObjectURL(url);\\n    }, [file2]);\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate, orderId]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReportData(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n            });\\n    }, [orderId]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderById(orderId)\\n            .then((res: AxiosResponse<Order>) => {\\n                setOrder(res.data);\\n            })\\n            .catch(err => {\\n                console.error('Ошибка при загрузке заказа:', err);\\n                setError('Не удалось загрузить данные о заказе');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [orderId]);\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n    if (error || !order) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error || 'Заказ не найден'}</div>;\\n    }\\n\\n    const cashback = order.product.wb_price - order.product.price;\\n    const canContinue = pickedUp && file1 && file2;\\n\\n    // const handleDeliveryScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    //     if (e.target.files && e.target.files.length > 0) {\\n    //         setDeliveryScreenshot(e.target.files[0]);\\n    //     } else {\\n    //         setDeliveryScreenshot(null);\\n    //     }\\n    // };\\n    //\\n    // const handleBarcodeScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    //     if (e.target.files && e.target.files.length > 0) {\\n    //         setBarcodeScreenshot(e.target.files[0]);\\n    //     } else {\\n    //         setBarcodeScreenshot(null);\\n    //     }\\n    // };\\n\\n    const handlePickedUpChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n        setPickedUp(e.target.checked);\\n        if (!e.target.checked) {\\n            setFile1(null);\\n            setFile2(null);\\n        }\\n    };\\n\\n\\n    const handleContinue = async () => {\\n        if (!canContinue || !orderId) return;\\n        try {\\n            await updateOrder(orderId, {\\n                step: 6,\\n                delivery_screenshot: file1,\\n                barcodes_screenshot: file2,\\n            });\\n            navigate(`/order/${orderId}/step-7`);\\n        } catch (err) {\\n            console.error('Ошибка при обновлении заказа:', err);\\n        }\\n    };\\n\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank');\\n    };\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto\\\">\\n\\n\\n            <div className=\\\"bg-white border border-brand p-3 rounded-md text-sm text-gray-700 space-y-2 mb-4\\\">\\n                <h1 className=\\\"text-lg font-bold text-brand\\\">Шаг 6. Получение товара</h1>\\n                <p>\\n                    Заберите товар как обычно, сделайте скрин раздела «доставки» из личного кабинета, где указана дата\\n                    получения и статус \\\"Доставлено\\\". После этого разрежьте штрихкод и сделайте фото разрезанного\\n                    штрихкода на фоне товара без упаковки.\\n                    <div\\n                        onClick={() => openModal(receivingImgPath)}\\n                        className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                    >\\n                  Пример скрина получения товара\\n                </div>\\n                    <div\\n                        onClick={() => openModal(barcodeImgPath)}\\n                        className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                    >\\n                  Пример разрезанного штрихкода\\n                </div>\\n                    <div\\n                        onClick={() => openModal(receiptVideoPath)}\\n                        className=\\\"underline text-blue-600 cursor-pointer\\\"\\n                    >\\n                  Пример получения электронного чека\\n                </div>\\n                </p>\\n                <p>\\n                    Ваш кэшбэк: <strong>{cashback} руб.</strong>\\n                </p>\\n                <p className=\\\"mb-2 text-xs text-gray-500\\\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \\\"МОИ ПОКУПКИ\\\"</p>\\n            </div>\\n\\n            <div className=\\\"flex items-center mb-4\\\">\\n                <input\\n                    type=\\\"checkbox\\\"\\n                    id=\\\"pickedUp\\\"\\n                    className=\\\"mr-2\\\"\\n                    checked={pickedUp}\\n                    onChange={handlePickedUpChange}\\n                />\\n                <label htmlFor=\\\"pickedUp\\\" className=\\\"text-sm text-gray-700\\\">\\n                    Забрал(а) товар\\n                </label>\\n            </div>\\n\\n            {pickedUp && (\\n                <>\\n                    <FileUploader\\n                        label=\\\"Скрин статуса «Доставка» (из личного кабинета)\\\"\\n                        file={file1}\\n                        preview={preview1}\\n                        onFileChange={setFile1}\\n                    />\\n                    <FileUploader\\n                        label=\\\"Фото разрезанных штрихкодов на фоне товара\\\"\\n                        file={file2}\\n                        preview={preview2}\\n                        onFileChange={setFile2}\\n                    />\\n                </>\\n            )}\\n\\n\\n            <div className=\\\"flex flex-col gap-2 mb-4 mt-4\\\">\\n                {/*<button*/}\\n                {/*    onClick={() => window.open('https://t.me/bigblacklist_bot', '_blank')}*/}\\n                {/*    className=\\\"flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\\\"*/}\\n                {/*>*/}\\n                {/*    Проверить продавца*/}\\n                {/*</button>*/}\\n                <button\\n                    onClick={handleContinue}\\n                    disabled={!canContinue}\\n                    className={`w-full py-2 rounded text-brand mb-4 ${canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'}`}\\n                >\\n                    Продолжить\\n                </button>\\n            </div>\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4 mt-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-3 mt-4\\\">\\n                <button\\n                    onClick={() => setShowReport(prev => !prev)}\\n                    className=\\\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\\\"\\n                >\\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\\n                </button>\\n\\n                {showReport && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                        <h3 className=\\\"text-lg font-bold mb-2\\\">Отчет</h3>\\n                        {reportData ? (\\n                                <div className=\\\"space-y-2\\\">\\n                                    {/* Шаг 1 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(1)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 1. Скрины корзины</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[1] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[1] && (\\n                                            <div className=\\\"border-t p-4 space-y-3\\\">\\n                                                {reportData.search_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин поискового запроса</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.search_screenshot_path)}\\n                                                            alt=\\\"Скрин поискового запроса\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                                {reportData.cart_screenshot_path && (\\n                                                    <div>\\n                                                        <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                        <img\\n                                                            src={GetUploadLink(reportData.cart_screenshot_path)}\\n                                                            alt=\\\"Скрин корзины\\\"\\n                                                            className=\\\"mt-1 w-full rounded\\\"\\n                                                        />\\n                                                    </div>\\n                                                )}\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 2 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(2)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 2. Артикул товара</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[2] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[2] && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm\\\">{reportData.article}</p>\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 3 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(3)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 3. Товар и бренд в избранное</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[3] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[3] && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm\\\">Ваш товар и бренд успешно добавлены в избранное.</p>\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 4 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(4)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 4. Реквизиты</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[4] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[4] && (\\n                                            <div className=\\\"border-t p-4 space-y-1\\\">\\n                                                {reportData.card_number &&\\n                                                    <p className=\\\"text-sm\\\">Номер карты: {reportData.card_number}</p>}\\n                                                {reportData.phone_number &&\\n                                                    <p className=\\\"text-sm\\\">Телефон: {reportData.phone_number}</p>}\\n                                                {reportData.name && <p className=\\\"text-sm\\\">Имя: {reportData.name}</p>}\\n                                                {reportData.bank && <p className=\\\"text-sm\\\">Банк: {reportData.bank}</p>}\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    {/* Шаг 5 */}\\n                                    <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                        <button\\n                                            onClick={() => toggleStep(5)}\\n                                            className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                        >\\n                                            <span className=\\\"font-semibold\\\">Шаг 5. Финальный скрин корзины</span>\\n                                            <svg\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                                className={`w-5 h-5 transform transition-transform ${\\n                                                    expandedSteps[5] ? 'rotate-180' : ''\\n                                                }`}\\n                                                fill=\\\"none\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                            >\\n                                                <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                      d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                            </svg>\\n                                        </button>\\n                                        {expandedSteps[5] && reportData.final_cart_screenshot_path && (\\n                                            <div className=\\\"border-t p-4\\\">\\n                                                <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                <img\\n                                                    src={GetUploadLink(reportData.final_cart_screenshot_path)}\\n                                                    alt=\\\"Финальный скрин корзины\\\"\\n                                                    className=\\\"w-full rounded\\\"\\n                                                />\\n                                            </div>\\n                                        )}\\n                                    </div>\\n\\n                                    <div className=\\\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\\\">\\n                                        <div className=\\\"font-semibold text-black\\\">Шаг 6. Получение товара</div>\\n                                        <div className=\\\"font-semibold text-gray-400\\\">Шаг 7. Отзыв</div>\\n                                    </div>\\n                                </div>\\n\\n                            ) :\\n                            <p className=\\\"text-sm text-gray-500\\\">Отчет пока пуст.</p>\\n                        }\\n                    </div>\\n                )}\\n                <div className=\\\"flex flex-col gap-3 text-center\\\">\\n\\n                    <button\\n                        onClick={handleChannelClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\\n                         justify-center gap-2\\\">\\n                        <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-6 h-6\\\"/>\\n                        <span>Подписаться на канал</span>\\n                    </button>\\n                    <button\\n                        onClick={handleSupportClick}\\n                        className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\\\">\\n                        Нужна помощь\\n                    </button>\\n                </div>\\n                {modalContent && (\\n                    <div\\n                        className=\\\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\\\"\\n                        onClick={closeModal}\\n                    >\\n                        <div\\n                            className=\\\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\\\"\\n                            onClick={e => e.stopPropagation()}\\n                        >\\n                            {/* Крестик в правом верхнем углу */}\\n                            <button\\n                                onClick={closeModal}\\n                                className=\\\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\\\"\\n                            >\\n                                &times;\\n                            </button>\\n\\n                            {modalContent.isVideo ? (\\n                                <video width=\\\"100%\\\" height=\\\"auto\\\" controls>\\n                                    <source src={modalContent.src} type=\\\"video/mp4\\\" />\\n                                    Ваш браузер не поддерживает видео.\\n                                </video>\\n                            ) : (\\n                                <img src={modalContent.src} alt=\\\"Пример\\\" className=\\\"w-full h-auto\\\" />\\n                            )}\\n                        </div>\\n                    </div>\\n                )}\\n\\n            </div>\\n        </div>\\n    )\\n        ;\\n}\\n\\nexport default ProductPickupPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/FinalDealPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getOrderById, getOrderReport} from '../../services/api';\\nimport {AxiosResponse} from 'axios';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\nimport {OrderStatus, PayoutTime} from \\\"../../enums\\\";\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    price?: number;\\n    wb_price?: number;\\n    seller_id: string;\\n    payment_time: string;\\n    tg: string;\\n    image_path: string;\\n}\\n\\ninterface UserInOrder {\\n    nickname: string;\\n}\\n\\ninterface Order {\\n    id: string;\\n    product: Product;\\n    user: UserInOrder;\\n    sellerNickname?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    bank?: string;\\n    name?: string;\\n    status?: OrderStatus;\\n}\\n\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    article?: string;\\n}\\n\\n// function getDeadline(): string {\\n//     const now = new Date();\\n//     const plusTwoWeeks = new Date(now.getTime() + 14 * 24 * 60 * 60 * 1000);\\n//     const day = String(plusTwoWeeks.getDate()).padStart(2, '0');\\n//     const month = String(plusTwoWeeks.getMonth() + 1).padStart(2, '0');\\n//     const year = plusTwoWeeks.getFullYear();\\n//     return `${day}.${month}.${year}`;\\n// }\\n\\nfunction FinalDealPage() {\\n    const {orderId} = useParams<{ orderId: string }>();\\n    const [order, setOrder] = useState<Order | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const navigate = useNavigate();\\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\\n    const [showReport, setShowReport] = useState(false);\\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\\n\\n    const toggleStep = (step: number) => {\\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\\n    };\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate]);\\n\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReportData(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n            });\\n    }, [orderId]);\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderById(orderId)\\n            .then((response: AxiosResponse<Order>) => {\\n                setOrder(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке заказа:', err);\\n                setError('Не удалось загрузить заказ');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [orderId]);\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n    if (error || !order) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error || 'Заказ не найден'}</div>;\\n    }\\n\\n    const {product, status} = order;\\n    const productName = product.name || 'Без названия';\\n    const productPrice = product.price ?? 0;\\n    const productWbPrice = product.wb_price ?? 0;\\n    const cashback = productWbPrice - productPrice;\\n    // const deadline = getDeadline();\\n    const handleHomeClick = () => navigate('/');\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto space-y-4\\\">\\n\\n            <div className=\\\"flex items-center space-x-3\\\">\\n                <img\\n                    src={GetUploadLink(product.image_path)}\\n                    alt=\\\"Фото товара\\\"\\n                    className=\\\"w-12 h-12 rounded-full object-cover\\\"\\n                />\\n                <div>\\n                    <div className=\\\"font-semibold text-sm\\\">{productName}</div>\\n                    <div className=\\\"text-xs text-gray-600\\\">\\n                        {productPrice ? `${productPrice} руб.` : 'NaN руб'}\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div className=\\\"bg-white border border-brand p-3 rounded-md text-sm text-gray-700 space-y-2\\\">\\n                <p>Ваш отчет передан продавцу.</p>\\n                <p>\\n                    В случае задержек оплаты и любые другие вопросы по кэшбэку решайте напрямую\\n                    с продавцом.\\n                </p>\\n                <p>\\n                    Если продавец окажется мошенником, будет создана отдельная группа, куда будут\\n                    добавлены все обманутые покупатели и продавец.\\n                </p>\\n                <p>\\n                    Ваш кэшбэк: <strong>{cashback} руб.</strong>\\n                </p>\\n                {/*<p>*/}\\n                {/*    Крайний срок выплаты кешбека: <strong>{deadline}</strong>*/}\\n                {/*</p>*/}\\n                {/*<p>*/}\\n                {/*    Статус: <strong>{status || 'Неизвестен'}</strong>*/}\\n                {/*</p>*/}\\n            </div>\\n\\n\\n            <div className=\\\"flex justify-between items-center text-sm\\\">\\n                <div>Покупатель: {order.user.nickname}</div>\\n\\n                <div>Продавец: {order.product.tg}</div>\\n            </div>\\n\\n            <div className=\\\"bg-white border border-brand p-3 rounded-md space-y-1 text-sm\\\">\\n                <div className=\\\"font-semibold\\\">Сделка</div>\\n                <div>Условия оплаты: {product.payment_time}</div>\\n                <div>Сумма покупки: {productWbPrice} руб.</div>\\n                <div>Цена для вас: {productPrice} руб.</div>\\n                <div>Кэшбэк: {cashback} руб.</div>\\n                {/*<div>Крайний срок: {deadline}</div>*/}\\n                <div>Статус оплаты: {status || 'Неизвестен'}</div>\\n            </div>\\n\\n            <div className=\\\"bg-white border border-brand p-3 rounded-md space-y-1 text-sm\\\">\\n                <div className=\\\"font-semibold\\\">Реквизиты</div>\\n                <div>Номер карты: {order.card_number || '—'}</div>\\n                <div>Номер телефона: {order.phone_number || '—'}</div>\\n                <div>Банк: {order.bank || '—'}</div>\\n                <div>Получатель: {order.name || '—'}</div>\\n            </div>\\n\\n            <div className=\\\"flex flex-col space-y-2\\\">\\n                <button\\n                    onClick={() => setShowReport(prev => !prev)}\\n                    className=\\\"w-full py-2 mb-4 bg-white rounded-lg border border-brand text-gray-600 font-semibold text-center\\\"\\n                >\\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\\n                </button>\\n\\n\\n                {showReport && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                        <h3 className=\\\"text-lg font-bold mb-2\\\">Отчет</h3>\\n                        {reportData ? (\\n                            <div className=\\\"space-y-2\\\">\\n                                {/* Шаг 1 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(1)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 1. Скрины корзины</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[1] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[1] && (\\n                                        <div className=\\\"border-t p-4 space-y-3\\\">\\n                                            {reportData.search_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин поискового запроса</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\\n                                                        alt=\\\"Скрин поискового запроса\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                            {reportData.cart_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\\n                                                        alt=\\\"Скрин корзины\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 2 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(2)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 2. Артикул товара</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[2] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[2] && (\\n                                        <div className=\\\"border-t p-4\\\">\\n                                            <p className=\\\"text-sm\\\">{reportData.article}</p>\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 3 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(3)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 3. Товар и бренд в избранное</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[3] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[3] && (\\n                                        <div className=\\\"border-t p-4\\\">\\n                                            <p className=\\\"text-sm\\\">Ваш товар и бренд успешно добавлены в избранное.</p>\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 4 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(4)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 4. Реквизиты</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[4] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[4] && (\\n                                        <div className=\\\"border-t p-4 space-y-1\\\">\\n                                            {reportData.card_number &&\\n                                                <p className=\\\"text-sm\\\">Номер карты: {reportData.card_number}</p>}\\n                                            {reportData.phone_number &&\\n                                                <p className=\\\"text-sm\\\">Телефон: {reportData.phone_number}</p>}\\n                                            {reportData.name && <p className=\\\"text-sm\\\">Имя: {reportData.name}</p>}\\n                                            {reportData.bank && <p className=\\\"text-sm\\\">Банк: {reportData.bank}</p>}\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 5 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(5)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 5. Финальный скрин корзины</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[5] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[5] && reportData.final_cart_screenshot_path && (\\n                                        <div className=\\\"border-t p-4\\\">\\n                                            <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                            <img\\n                                                src={GetUploadLink(reportData.final_cart_screenshot_path)}\\n                                                alt=\\\"Финальный скрин корзины\\\"\\n                                                className=\\\"w-full rounded\\\"\\n                                            />\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 6 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(6)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 6. Скрины доставки и штрихкодов</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[6] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[6] && (\\n                                        <div className=\\\"border-t p-4 space-y-3\\\">\\n                                            {reportData.delivery_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин доставки</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.delivery_screenshot_path)}\\n                                                        alt=\\\"Скрин доставки\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                            {reportData.barcodes_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин штрихкодов</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.barcodes_screenshot_path)}\\n                                                        alt=\\\"Скрин штрихкодов\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 7 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(7)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 7. Отзыв и чек</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[7] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[7] && (\\n                                        <div className=\\\"border-t p-4 space-y-3\\\">\\n                                            {reportData.review_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин отзыва</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.review_screenshot_path)}\\n                                                        alt=\\\"Скрин отзыва\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                            {reportData.receipt_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин электронного чека</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.receipt_screenshot_path)}\\n                                                        alt=\\\"Скрин электронного чека\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                            {reportData.receipt_number && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Номер чека</p>\\n                                                    <p className=\\\"text-sm\\\">{reportData.receipt_number}</p>\\n                                                </div>\\n                                            )}\\n\\n                                        </div>\\n                                    )}\\n                                </div>\\n                            </div>\\n                        ) :\\n                            <p className=\\\"text-sm text-gray-500\\\">Отчет пока пуст.</p>\\n                        }\\n                    </div>\\n\\n                )}\\n                <button\\n                    onClick={handleHomeClick}\\n                    className=\\\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\\\"\\n                >\\n                    На главную\\n                </button>\\n            </div>\\n        </div>\\n    )\\n}\\n\\nexport default FinalDealPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/InstructionPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useLocation, useNavigate, useParams} from 'react-router-dom';\\nimport {getProductById} from '../../services/api';\\nimport {AxiosResponse} from 'axios';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\n\\nfunction translatePaymentTime(value: string): string {\\n    switch (value) {\\n        case 'AFTER_REVIEW':\\n            return 'После отзыва';\\n        case 'AFTER_DELIVERY':\\n            return 'После получения товара';\\n        case 'ON_15TH_DAY':\\n            return 'На 15-й день';\\n        default:\\n            return value;\\n    }\\n}\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    brand: string;\\n    article: string;\\n    price: number;\\n    wb_price: number;\\n    tg: string;\\n    payment_time: string;\\n    review_requirements: string;\\n}\\n\\nfunction InstructionPage() {\\n    const {productId} = useParams<{ productId: string }>();\\n    const navigate = useNavigate();\\n\\n    const [product, setProduct] = useState<Product | null>(null);\\n    const [loading, setLoading] = useState(true);\\n    const [error, setError] = useState('');\\n    const { search } = useLocation();\\n    const preview = new URLSearchParams(search).get('preview') === '1';\\n\\n    const [agreeRules, setAgreeRules] = useState(false);\\n    const [agreePersonalData, setAgreePersonalData] = useState(false);\\n\\n    useEffect(() => {\\n        if (!productId) return;\\n        getProductById(productId)\\n            .then((response: AxiosResponse<Product>) => {\\n                setProduct(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке товара:', err);\\n                setError('Не удалось загрузить данные о товаре');\\n            })\\n            .finally(() => setLoading(false));\\n    }, [productId]);\\n\\n    const canContinue = agreeRules && agreePersonalData;\\n\\n    const getTelegramLink = (tg: string) => {\\n        const username = tg.startsWith('@') ? tg.slice(1) : tg;\\n        return `https://t.me/${username}`;\\n    };\\n\\n    const handleContinue = () => {\\n        if (!canContinue) return;\\n        navigate(`/product/${productId}/step-1`);\\n    };\\n    const handleHomeClick = () => {\\n        navigate(`/`);\\n    };\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [productId, navigate]);\\n\\n    if (loading) {\\n        return <div className=\\\"p-4\\\">Загрузка...</div>;\\n    }\\n    if (error || !product) {\\n        return <div className=\\\"p-4 text-red-600\\\">{error || 'Товар не найден'}</div>;\\n    }\\n\\n    return (\\n        <div className=\\\"min-h-screen bg-gray-200 flex items-center justify-center p-4\\\">\\n            <div className=\\\"fixed top-6 left-6 z-50 bg-brandlight rounded-lg p-2 flex items-center justify-center\\\">\\n                <button onClick={handleHomeClick} aria-label=\\\"На главную\\\">\\n                    <img src=\\\"/icons/home.png\\\" alt=\\\"Домой\\\" className=\\\"w-6 h-6\\\" />\\n                </button>\\n            </div>\\n            <div className=\\\"max-w-screen-md w-full bg-white rounded-lg shadow-lg p-6\\\">\\n                <h1 className=\\\"text-2xl font-bold mb-6 text-center\\\">Правила и условия</h1>\\n                <p className=\\\"text-base text-gray-800 mb-4\\\">\\n                    Перед тем как начнем, пожалуйста, внимательно прочитайте все условия:\\n                </p>\\n\\n                {/* Блок с правилами */}\\n                <div className=\\\"mb-6\\\">\\n                    <h2 className=\\\"text-xl font-semibold text-blue-600 mb-3\\\">Правила:</h2>\\n                    <div className=\\\"bg-white rounded-lg p-4 border border-darkGray\\\">\\n                        <ol className=\\\"list-decimal list-inside text-base text-gray-800 space-y-2\\\">\\n                            <li>\\n                                Вы заключаете сделку с продавцом{' '}\\n                                <strong>\\n                                    <a\\n                                        href={getTelegramLink(product.tg)}\\n                                        target=\\\"_blank\\\"\\n                                        rel=\\\"noopener noreferrer\\\"\\n                                        className=\\\"text-blue-600 hover:underline\\\"\\n                                    >\\n                                        {product.tg}\\n                                    </a>\\n                                </strong>. Бот не несет ответственности за выплату.\\n                            </li>\\n                            <li>\\n                                При задержках оплаты и любые другие вопросы по кэшбэку решайте напрямую с продавцом.\\n                            </li>\\n                            <li>\\n                                Если продавец окажется мошенником, будет создана отдельная группа для обманутых\\n                                покупателей.\\n                            </li>\\n                            <li>\\n                                Бот — это пошаговая инструкция, и мы не несем ответственность за выплату.\\n                            </li>\\n                            <li>\\n                                Продолжая, вы соглашаетесь с указанными условиями сделки.\\n                            </li>\\n                        </ol>\\n                    </div>\\n                </div>\\n\\n                <div className=\\\"mb-6\\\">\\n                    <h2 className=\\\"text-xl font-bold mb-3 text-blue-600\\\">Условия сделки:</h2>\\n                    <div className=\\\"bg-white rounded-lg p-4 border border-darkGray\\\">\\n                        <ol className=\\\"list-decimal list-inside text-base text-gray-800 space-y-2\\\">\\n                            <li>\\n                                Цена на сайте: <strong>{product.wb_price} руб.</strong>\\n                            </li>\\n                            <li>\\n                                <span className=\\\"font-semibold text-brand\\\">Цена для вас:</span>\\n                                <strong> {product.price} руб.</strong>\\n                            </li>\\n                            <li>\\n                                Кэшбэк: <strong>{translatePaymentTime(product.payment_time)}</strong>\\n                            </li>\\n                            <li>\\n                                Если возникнут вопросы — напишите продавцу в Telegram:{' '}\\n                                <strong>\\n                                    <a\\n                                        href={getTelegramLink(product.tg)}\\n                                        target=\\\"_blank\\\"\\n                                        rel=\\\"noopener noreferrer\\\"\\n                                        className=\\\"text-blue-600 hover:underline\\\"\\n                                    >\\n                                        {product.tg}\\n                                    </a>\\n                                </strong>\\n                            </li>\\n                        </ol>\\n                    </div>\\n                </div>\\n                {!preview && (\\n                <div className=\\\"mb-6\\\">\\n                    <div className=\\\"flex items-center mb-3\\\">\\n                        <input\\n                            type=\\\"checkbox\\\"\\n                            id=\\\"agreeRules\\\"\\n                            className=\\\"mr-3\\\"\\n                            checked={agreeRules}\\n                            onChange={(e) => setAgreeRules(e.target.checked)}\\n                        />\\n                        <label htmlFor=\\\"agreeRules\\\" className=\\\"text-base text-gray-800\\\">\\n                            Я соглашаюсь с условиями сделки\\n                        </label>\\n                    </div>\\n                    <div className=\\\"flex items-center\\\">\\n                        <input\\n                            type=\\\"checkbox\\\"\\n                            id=\\\"agreeData\\\"\\n                            className=\\\"mr-3\\\"\\n                            checked={agreePersonalData}\\n                            onChange={(e) => setAgreePersonalData(e.target.checked)}\\n                        />\\n                        <label htmlFor=\\\"agreeData\\\" className=\\\"text-base text-gray-800\\\">\\n                            Даю согласие на обработку персональных данных\\n                        </label>\\n                    </div>\\n\\n                <button\\n                    onClick={handleContinue}\\n                    disabled={!canContinue}\\n                    className={`w-full py-2 rounded-lg text-base font-semibold mt-2 ${\\n                        canContinue\\n                            ? 'bg-brand text-brand hover:bg-blue-700'\\n                            : 'bg-gray-200-400 border border-brand text-gray-700 cursor-not-allowed'\\n                    } mb-2`}\\n                >\\n                    Продолжить\\n                </button>\\n                </div>\\n                )}\\n\\n            </div>\\n        </div>\\n    );\\n}\\n\\nexport default InstructionPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/pages/order_flow/PaymentDetailsPage.tsx\",\n    \"content\": \"import React, {useEffect, useState} from 'react';\\nimport {useNavigate, useParams} from 'react-router-dom';\\nimport {getOrderReport, updateOrder} from '../../services/api';\\nimport {on} from \\\"@telegram-apps/sdk\\\";\\nimport {AxiosResponse} from \\\"axios\\\";\\nimport GetUploadLink from \\\"../../components/GetUploadLink\\\";\\n\\n\\ninterface OrderReport {\\n    step: number;\\n    search_screenshot_path?: string;\\n    cart_screenshot_path?: string;\\n    card_number?: string;\\n    phone_number?: string;\\n    name?: string;\\n    bank?: string;\\n    final_cart_screenshot_path?: string;\\n    delivery_screenshot_path?: string;\\n    barcodes_screenshot_path?: string;\\n    review_screenshot_path?: string;\\n    receipt_screenshot_path?: string;\\n    receipt_number?: string;\\n    article: string;\\n}\\n\\nfunction PaymentDetailsPage() {\\n    const navigate = useNavigate();\\n    const {orderId} = useParams<{ orderId: string }>();\\n\\n    const [cardNumber, setCardNumber] = useState('');\\n    const [phoneNumber, setPhoneNumber] = useState('');\\n    const [fullName, setFullName] = useState('');\\n    const [selectedBank, setSelectedBank] = useState('');\\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\\n    const [showReport, setShowReport] = useState(false);\\n    const [agreed, setAgreed] = useState(false);\\n    const [otherBank, setOtherBank] = useState('');\\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\\n\\n    const toggleStep = (step: number) => {\\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\\n    };\\n    const handleChange = (e: any) => {\\n        setSelectedBank(e.target.value);\\n        if (e.target.value !== 'Другое') {\\n            setOtherBank('');\\n        }\\n    };\\n    const canContinue =\\n        cardNumber.trim() !== '' &&\\n        phoneNumber.trim() !== '' &&\\n        fullName.trim() !== '' &&\\n        selectedBank !== '' &&\\n        agreed;\\n\\n    useEffect(() => {\\n        const removeBackListener = on('back_button_pressed', () => {\\n            navigate(-1);\\n        });\\n        return () => {\\n            removeBackListener();\\n        };\\n    }, [navigate, orderId]);\\n\\n\\n    useEffect(() => {\\n        if (!orderId) return;\\n        getOrderReport(orderId)\\n            .then((response: AxiosResponse<OrderReport>) => {\\n                setReportData(response.data);\\n            })\\n            .catch((err) => {\\n                console.error('Ошибка при загрузке отчета:', err);\\n            });\\n    }, [orderId]);\\n\\n    const handleContinueClick = async () => {\\n        if (!canContinue || !orderId) return;\\n        try {\\n            await updateOrder(orderId, {\\n                step: 4,\\n                card_number: cardNumber,\\n                phone_number: phoneNumber,\\n                name: fullName,\\n                bank: selectedBank,\\n            });\\n            navigate(`/order/${orderId}/step-5`);\\n        } catch (err) {\\n            console.error('Ошибка при обновлении заказа:', err);\\n        }\\n    };\\n\\n    const handleChannelClick = () => {\\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\\n    };\\n    const handleSupportClick = () => {\\n        if (window.Telegram?.WebApp?.close) {\\n            window.Telegram.WebApp.close();\\n        }\\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\\n    };\\n\\n\\n    return (\\n        <div className=\\\"p-4 max-w-screen-md bg-gray-200 mx-auto\\\">\\n\\n            <div className=\\\"bg-white border border-brand rounded-lg shadow p-4 space-y-4 mb-4\\\">\\n\\n                <h1 className=\\\"text-lg font-bold text-brand\\\">Шаг 4. Реквизиты для перевода кэшбэка</h1>\\n                <p className=\\\"mb-2 text-xs text-gray-500\\\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \\\"МОИ ПОКУПКИ\\\"</p>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                        Номер карты\\n                    </label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"Введите номер карты\\\"\\n                        value={cardNumber}\\n                        onChange={(e) => setCardNumber(e.target.value)}\\n                        className=\\\"w-full border border-darkGray rounded p-2 text-sm\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                        Номер телефона\\n                    </label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"Введите номер телефона\\\"\\n                        value={phoneNumber}\\n                        onChange={(e) => setPhoneNumber(e.target.value)}\\n                        className=\\\"w-full border border-darkGray rounded p-2 text-sm\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                        Фамилия и имя\\n                    </label>\\n                    <input\\n                        type=\\\"text\\\"\\n                        placeholder=\\\"Введите фамилию и имя\\\"\\n                        value={fullName}\\n                        onChange={(e) => setFullName(e.target.value)}\\n                        className=\\\"w-full border border-darkGray rounded p-2 text-sm\\\"\\n                    />\\n                </div>\\n\\n                <div>\\n                    <label className=\\\"block text-sm font-medium text-gray-700 mb-1\\\">\\n                        Выберите банк\\n                    </label>\\n                    <select\\n                        value={selectedBank}\\n                        onChange={handleChange}\\n                        className=\\\"w-full border border-darkGray rounded p-2 text-sm\\\"\\n                    >\\n                        <option value=\\\"\\\">Выберите...</option>\\n                        <option value=\\\"Сбербанк\\\">Сбербанк</option>\\n                        <option value=\\\"Тинькофф\\\">Тинькофф</option>\\n                        <option value=\\\"Альфа-банк\\\">Альфа-банк</option>\\n                        <option value=\\\"ВТБ\\\">ВТБ</option>\\n                        <option value=\\\"Рнкб\\\">Рнкб</option>\\n                        <option value=\\\"Газпромбанк\\\">Газпромбанк</option>\\n                        <option value=\\\"Открытие\\\">Открытие</option>\\n                        <option value=\\\"Райффайзен банк\\\">Райффайзен банк</option>\\n                        <option value=\\\"Озон банк\\\">Озон банк</option>\\n                        <option value=\\\"УБРиР\\\">УБРиР</option>\\n                        <option value=\\\"Хоум кредит\\\">Хоум кредит</option>\\n                        <option value=\\\"Яндекс\\\">Яндекс</option>\\n                        <option value=\\\"Другое\\\">Другое</option>\\n                    </select>\\n                    {selectedBank === 'Другое' && (\\n                        <div className=\\\"mt-2\\\">\\n                            <label className=\\\"block text-sm font-medium text-gray-700\\\">Введите банк</label>\\n                            <input\\n                                type=\\\"text\\\"\\n                                value={otherBank}\\n                                onChange={(e) => setOtherBank(e.target.value)}\\n                                className=\\\"w-full border border-darkGray rounded p-2 text-sm\\\"\\n                                placeholder=\\\"Введите название банка\\\"\\n                            />\\n                        </div>\\n                    )}\\n                </div>\\n\\n                <div className=\\\"flex items-center space-x-2\\\">\\n                    <input\\n                        type=\\\"checkbox\\\"\\n                        id=\\\"agreeCorrectness\\\"\\n                        checked={agreed}\\n                        onChange={(e) => setAgreed(e.target.checked)}\\n                        className=\\\"w-4 h-4\\\"\\n                    />\\n                    <label htmlFor=\\\"agreeCorrectness\\\" className=\\\"text-sm text-gray-700\\\">\\n                        Подтверждаю правильность\\n                    </label>\\n                </div>\\n            </div>\\n\\n            <button\\n                onClick={handleContinueClick}\\n                disabled={!canContinue}\\n                className={`w-full py-2 rounded text-brand mb-4 ${\\n                    canContinue\\n                        ? 'bg-brand hover:bg-brand'\\n                        : 'bg-gray-200-400 border border-brand cursor-not-allowed'\\n                }`}\\n            >\\n                Продолжить\\n            </button>\\n\\n            <button\\n                onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\\n                className=\\\"w-full flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\\\"\\n            >\\n                Проверить продавца\\n            </button>\\n\\n            <div className=\\\"bg-white rounded-lg shadow p-4 mt-4\\\">\\n                <p className=\\\"text-base font-medium mb-2\\\">Инструкция</p>\\n                <div className=\\\"aspect-w-16 aspect-h-9 bg-black\\\">\\n                    <iframe\\n                        title=\\\"Инструкция\\\"\\n                        src=\\\"https://www.youtube.com/embed/dQw4w9WgXcQ\\\"\\n                        allowFullScreen\\n                        className=\\\"w-full h-full\\\"\\n                    />\\n                </div>\\n            </div>\\n\\n            <div className=\\\"flex flex-col space-y-2 mt-4\\\">\\n                <button\\n                    onClick={() => setShowReport(prev => !prev)}\\n                    className=\\\"w-full py-2 mb-4 bg-white rounded-lg border border-brand text-gray-600 font-semibold text-center\\\"\\n                >\\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\\n                </button>\\n\\n\\n                {showReport && (\\n                    <div className=\\\"bg-white rounded-lg shadow p-4 mb-4\\\">\\n                        <h3 className=\\\"text-lg font-bold mb-2\\\">Отчет</h3>\\n                        {reportData ? (\\n                            <div className=\\\"space-y-2\\\">\\n                                {/* Шаг 1 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(1)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 1. Скрины корзины</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[1] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[1] && (\\n                                        <div className=\\\"border-t p-4 space-y-3\\\">\\n                                            {reportData.search_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин поискового запроса</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\\n                                                        alt=\\\"Скрин поискового запроса\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                            {reportData.cart_screenshot_path && (\\n                                                <div>\\n                                                    <p className=\\\"text-sm font-semibold\\\">Скрин корзины</p>\\n                                                    <img\\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\\n                                                        alt=\\\"Скрин корзины\\\"\\n                                                        className=\\\"mt-1 w-full rounded\\\"\\n                                                    />\\n                                                </div>\\n                                            )}\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 2 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(2)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 2. Артикул товара</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[2] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[2] && (\\n                                        <div className=\\\"border-t p-4\\\">\\n                                            <p className=\\\"text-sm\\\">{reportData.article}</p>\\n                                        </div>\\n                                    )}\\n                                </div>\\n\\n                                {/* Шаг 3 */}\\n                                <div className=\\\"bg-white rounded-lg shadow\\\">\\n                                    <button\\n                                        onClick={() => toggleStep(3)}\\n                                        className=\\\"w-full flex justify-between items-center p-4 text-left\\\"\\n                                    >\\n                                        <span className=\\\"font-semibold\\\">Шаг 3. Товар и бренд в избранное</span>\\n                                        <svg\\n                                            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                            className={`w-5 h-5 transform transition-transform ${\\n                                                expandedSteps[3] ? 'rotate-180' : ''\\n                                            }`}\\n                                            fill=\\\"none\\\"\\n                                            viewBox=\\\"0 0 24 24\\\"\\n                                            stroke=\\\"currentColor\\\"\\n                                        >\\n                                            <path strokeLinecap=\\\"round\\\" strokeLinejoin=\\\"round\\\" strokeWidth={2}\\n                                                  d=\\\"M19 9l-7 7-7-7\\\"/>\\n                                        </svg>\\n                                    </button>\\n                                    {expandedSteps[3] && (\\n                                        <div className=\\\"border-t p-4\\\">\\n                                            <p className=\\\"text-sm\\\">Ваш товар и бренд успешно добавлены в избранное.</p>\\n                                        </div>\\n                                    )}\\n                                </div>\\n                                <div className=\\\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\\\">\\n                                    <div className=\\\"font-semibold text-black\\\">Шаг 4. Реквизиты для перевода кэшбэка\\n                                    </div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 5. Оформление заказа</div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 6. Получение товара</div>\\n                                    <div className=\\\"font-semibold text-gray-400\\\">Шаг 7. Отзыв</div>\\n                                </div>\\n\\n\\n                            </div>\\n                        ) : (\\n                            <p className=\\\"text-sm text-gray-500\\\">Отчет пока пуст.</p>\\n                        )}\\n                    </div>\\n                )}\\n            </div>\\n\\n            <div className=\\\"flex flex-col gap-3 mt-2 text-center\\\">\\n\\n                <button\\n                    onClick={handleChannelClick}\\n                    className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\\n                         justify-center gap-2\\\">\\n                    <img src=\\\"/icons/telegram.png\\\" alt=\\\"Telegram\\\" className=\\\"w-6 h-6\\\"/>\\n                    <span>Подписаться на канал</span>\\n                </button>\\n                <button\\n                    onClick={handleSupportClick}\\n                    className=\\\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\\\">\\n                    Нужна помощь\\n                </button>\\n            </div>\\n        </div>\\n)}\\n\\nexport default PaymentDetailsPage;\\n\"\n  },\n  {\n    \"path\": \"frontend/src/services/api.ts\",\n    \"content\": \"import {apiClient} from \\\"./apiClient\\\";\\nimport {MeResponse} from \\\"../types/MeResponse\\\";\\nimport {AxiosResponse} from \\\"axios\\\";\\n\\n\\nexport interface GetProductsParams {\\n    search?: string;\\n    limit?: number;\\n    offset?: number;\\n}\\n\\ninterface Product {\\n    id: string;\\n    name: string;\\n    description?: string;\\n    price: number;\\n    article: string;\\n    category: string;\\n    seller_id: string;\\n    image_path?: string;\\n}\\n\\n\\nexport async function getProducts(\\n    params?: GetProductsParams): Promise<AxiosResponse<Product[]>> {\\n    return apiClient.get<Product[]>('/products', {params})\\n}\\n\\nexport async function getProductById(productId: string) {\\n    return apiClient.get(`/products/${productId}`);\\n}\\n\\nexport async function getUserOrders() {\\n    return apiClient.get(`/users/orders`);\\n}\\n\\nexport async function getOrderById(orderId: string) {\\n    return apiClient.get(`/orders/${orderId}`);\\n}\\n\\n// export async function getProductByArticle(article: string) {\\n//     return apiClient.get(`/products/article?acticle=${article}`);\\n// }\\n\\nexport async function getProductsBySellerId() {\\n    return apiClient.get(`/products/seller`);\\n}\\n\\n\\nexport async function createProduct(formData: FormData): Promise<string> {\\n    const response = await apiClient.post('/products', formData, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        },\\n    });\\n    return response.data;\\n}\\n\\nexport async function updateProduct(productId: string, formData: FormData): Promise<string> {\\n    const response = await apiClient.patch(`/products/${productId}`, formData, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        },\\n    });\\n    console.log(response.request.formData);\\n    return response.data;\\n}\\n\\nexport async function updateProductStatus(productId: string, formData: FormData): Promise<string> {\\n    const response = await apiClient.patch(`/products/status/${productId}`, formData, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        },\\n    });\\n    console.log(response.request.formData);\\n    return response.data;\\n}\\n\\nexport async function getMe(): Promise<MeResponse> {\\n    return (await apiClient.get<MeResponse>(`users/me`)).data;\\n}\\n\\nexport async function createOrder(formData: FormData) {\\n    return apiClient.post('/orders', formData, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        },\\n    });\\n}\\n\\nexport async function getOrderReport(orderId: string) {\\n    return apiClient.get(`/users/orders/report/${orderId}`);\\n}\\n\\nexport async function getOrderBySellerId(sellerId: string) {\\n    return apiClient.get(`/users/orders/reports/${sellerId}`);\\n}\\n\\n\\nexport async function increaseSellerBalance(sellerId: string, balance: FormData) {\\n    return apiClient.patch(`/users/balance/${sellerId}`, balance, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        },\\n    });\\n}\\n\\nexport async function getSellerBalance(sellerId: string) {\\n    return apiClient.get(`/users/balance/${sellerId}`);\\n}\\n\\nexport async function updateOrderStatus(orderId: string, formData: FormData) {\\n    return apiClient.patch(`/orders/status/${orderId}`, formData, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        },\\n    });\\n}\\n\\nexport async function updateOrder(\\n    orderId: string,\\n    data: {\\n        step?: number;\\n        search_screenshot_path?: File;\\n        cart_screenshot_path?: File;\\n        card_number?: string;\\n        phone_number?: string;\\n        name?: string;\\n        bank?: string;\\n        final_cart_screenshot?: File;\\n        delivery_screenshot?: File;\\n        barcodes_screenshot?: File;\\n        review_screenshot?: File;\\n        receipt_screenshot?: File;\\n        receipt_number?: string;\\n        status?: string;\\n    }\\n) {\\n    const formData = new FormData();\\n\\n    if (data.step !== undefined) {\\n        formData.append('step', data.step.toString());\\n    }\\n    if (data.card_number) {\\n        formData.append('card_number', data.card_number);\\n    }\\n    if (data.phone_number) {\\n        formData.append('phone_number', data.phone_number);\\n    }\\n    if (data.name) {\\n        formData.append('name', data.name);\\n    }\\n    if (data.bank) {\\n        formData.append('bank', data.bank);\\n    }\\n    if (data.receipt_number) {\\n        formData.append('receipt_number', data.receipt_number);\\n    }\\n    if (data.status) {\\n        formData.append('status', data.status);\\n    }\\n\\n    if (data.search_screenshot_path) {\\n        formData.append('search_screenshot_path', data.search_screenshot_path);\\n    }\\n    if (data.cart_screenshot_path) {\\n        formData.append('cart_screenshot_path', data.cart_screenshot_path);\\n    }\\n    if (data.final_cart_screenshot) {\\n        formData.append('final_cart_screenshot', data.final_cart_screenshot);\\n    }\\n    if (data.delivery_screenshot) {\\n        formData.append('delivery_screenshot', data.delivery_screenshot);\\n    }\\n    if (data.barcodes_screenshot) {\\n        formData.append('barcodes_screenshot', data.barcodes_screenshot);\\n    }\\n    if (data.review_screenshot) {\\n        formData.append('review_screenshot', data.review_screenshot);\\n    }\\n    if (data.receipt_screenshot) {\\n        formData.append('receipt_screenshot', data.receipt_screenshot);\\n    }\\n\\n    const response = await apiClient.patch(`/orders/${orderId}`, formData, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        },\\n    });\\n\\n    return response.data;\\n}\\n\\n\\nexport async function getUsers() {\\n    return apiClient.get('/moderator/users');\\n}\\n\\nexport async function getModerators() {\\n    return apiClient.get('/moderator/users/moderators');\\n}\\n\\nexport async function getSellers() {\\n    return apiClient.get('/moderator/users/sellers');\\n}\\n\\nexport async function getClients() {\\n    return apiClient.get('/moderator/users/clients');\\n}\\n\\nexport async function getBannedUsers() {\\n    return apiClient.get('/moderator/users/banned');\\n}\\n\\nexport async function getUser(userId: string) {\\n    return apiClient.get(`/moderator/users/${userId}`);\\n}\\n\\nexport async function banUser(userId: string) {\\n    return apiClient.post(`/moderator/users/${userId}/ban`);\\n}\\n\\nexport async function unbanUser(userId: string) {\\n    return apiClient.post(`/moderator/users/${userId}/unban`);\\n}\\n\\nexport async function promoteUser(userId: string) {\\n    return apiClient.post(`/moderator/users/${userId}/promote`);\\n}\\n\\nexport async function demoteUser(userId: string) {\\n    return apiClient.post(`/moderator/users/${userId}/demote`);\\n}\\n\\nexport async function getModeratorProducts() {\\n    return apiClient.get('/moderator/products');\\n}\\n\\nexport async function getProductsToReview() {\\n    return apiClient.get('/moderator/products/to-review');\\n}\\n\\nexport async function getModeratorProductById(productId: string) {\\n    return apiClient.get(`/moderator/products/${productId}`);\\n}\\n\\nexport async function reviewProduct(\\n    productId: string,\\n    data: { status: string; commentModerator: string; commentSeller: string }) {\\n    return apiClient.patch(`/moderator/products/${productId}`, data, {\\n        headers: {\\n            'Content-Type': 'application/json',\\n        },\\n    });\\n\\n}\\n\\nexport const fetchPushes = async () => {\\n    try {\\n        const response = await apiClient.get(`/moderator/pushes`);\\n        return response.data;\\n    } catch (error) {\\n        console.error('Ошибка получения push рассылок:', error);\\n        throw error;\\n    }\\n};\\n\\nexport const createPush = async (formData: FormData) => {\\n    try {\\n        await apiClient.post(`/moderator/pushes`, formData, {\\n            headers: {\\n                'Content-Type': 'multipart/form-data',\\n            },\\n        });\\n    } catch (error) {\\n        console.error('Ошибка создания push рассылки:', error);\\n        throw error;\\n    }\\n};\\n\\nexport const getPush = async (pushId: string) => {\\n    return apiClient.get(`/moderator/pushes/${pushId}`);\\n}\\n\\nexport const activatePush = async (pushId: string, data: { userIds: string[] }) => {\\n    return apiClient.post(`/moderator/pushes/${pushId}/activate`, data.userIds, {\\n        headers: {\\n            'Content-Type': 'application/json',\\n        }\\n    });\\n}\\n\\nexport const deletePush = async (pushId: string) => {\\n    return apiClient.delete(`/moderator/pushes/${pushId}`);\\n}\\n\\nexport const updatePush = async (pushId: string, formData: FormData) => {\\n    return apiClient.patch(`/moderator/pushes/${pushId}`, formData, {\\n        headers: {\\n            'Content-Type': 'multipart/form-data',\\n        }\\n    });\\n}\\n\\nexport async function increaseReferralBonus(userId: string, data: { bonus: number }) {\\n    return apiClient.post(`/moderator/users/${userId}/use-discount`, data, {\\n        headers: {\\n            'Content-Type': 'application/json',\\n        },\\n    });\\n}\\n\\nexport async function markDiscountUsed(userId: string) {\\n    return apiClient.get(`/moderator/users/${userId}/referral-purchase`);\\n}\\n\\nexport async function useDiscount(userId: string) {\\n    return apiClient.post(`/moderator/users/${userId}/use-discount`);\\n}\\n\\n\\nexport async function getInviteLink() {\\n    return apiClient.get(`/users/invite`);\\n}\\n\\n\"\n  },\n  {\n    \"path\": \"frontend/src/services/apiClient.ts\",\n    \"content\": \"import axios, { AxiosError, AxiosInstance } from \\\"axios\\\";\\nimport createAuthRefreshInterceptor from \\\"axios-auth-refresh\\\";\\n\\nconst BASE_URL = process.env.REACT_APP_API_BASE;\\n\\nexport const apiClient: AxiosInstance = axios.create({\\n    baseURL: BASE_URL,\\n    headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"ngrok-skip-browser-warning\\\": true\\n    },\\n});\\n\\ninterface RefreshedTokens {\\n    access_token: string;\\n    refresh_token: string;\\n}\\n\\nfunction getAccessToken(): string | null {\\n    return localStorage.getItem(\\\"authToken\\\");\\n}\\n\\nfunction getRefreshToken(): string | null {\\n    return localStorage.getItem(\\\"refreshToken\\\");\\n}\\n\\nconst refreshAuthLogic = async (failedRequest: AxiosError) => {\\n    try {\\n        const refreshToken = getRefreshToken();\\n        if (!refreshToken) throw new Error(\\\"No refresh token found\\\");\\n\\n        const response = await apiClient.post<RefreshedTokens>(\\\"/auth/refresh\\\", {}, {\\n            headers: {\\n                \\\"X-Refresh-Token\\\": refreshToken,\\n            },\\n        });\\n\\n        localStorage.setItem(\\\"authToken\\\", response.data.access_token);\\n        localStorage.setItem(\\\"refreshToken\\\", response.data.refresh_token);\\n\\n        failedRequest.response!.config.headers[\\\"Authorization\\\"] = `Bearer ${response.data.access_token}`;\\n        return Promise.resolve();\\n    } catch (error) {\\n        console.error(\\\"Failed to refresh token\\\", error);\\n        localStorage.removeItem(\\\"authToken\\\");\\n        localStorage.removeItem(\\\"refreshToken\\\");\\n        return Promise.reject(error);\\n    }\\n};\\n\\ncreateAuthRefreshInterceptor(apiClient, refreshAuthLogic, {\\n    pauseInstanceWhileRefreshing: true,\\n});\\n\\napiClient.interceptors.request.use(\\n    (config) => {\\n        const token = getAccessToken();\\n        if (token) {\\n            config.headers.Authorization = `Bearer ${token}`;\\n        }\\n        return config;\\n    },\\n    (error) => Promise.reject(error)\\n);\\n\"\n  },\n  {\n    \"path\": \"backend/locustfile.py\",\n    \"content\": \"# locustfile.py\\n\\nfrom locust import HttpUser, task, between, SequentialTaskSet\\n\\n# Общие задачи покупателя\\nclass BuyerBehavior(SequentialTaskSet):\\n    wait_time = between(1, 3)\\n\\n    @task\\n    def view_catalog(self):\\n        self.client.get(\\\"/products\\\", name=\\\"GET /products\\\")\\n\\n    @task\\n    def view_product(self):\\n        self.client.get(\\n            \\\"/products/fb4b1641-8cc9-44fa-a604-3f5cedd4b720\\\",\\n            name=\\\"GET /products/[product_id]\\\"\\n        )\\n\\n    @task\\n    def view_order_history(self):\\n        self.client.get(\\\"/users/orders\\\", name=\\\"GET /orders\\\")\\n\\n\\n# Общие задачи продавца и модератора\\nclass SellerBehavior(SequentialTaskSet):\\n    wait_time = between(2, 5)\\n\\n    @task\\n    def list_my_products(self):\\n        self.client.get(\\\"/products/seller\\\", name=\\\"GET /users/products\\\")\\n\\n    @task\\n    def update_price(self):\\n        self.client.patch(\\n            \\\"/products/fb4b1641-8cc9-44fa-a604-3f5cedd4b720\\\",\\n            json={\\\"price\\\": 100},\\n            name=\\\"PATCH /products/[product_id]\\\"\\n        )\\n\\n    # Общие задачи продавца и модератора\\nclass ModeratorBehavior(SequentialTaskSet):\\n    wait_time = between(2, 5)\\n\\n    @task\\n    def list_reviews(self):\\n        self.client.get(\\\"/reviews\\\", name=\\\"GET /reviews\\\")\\n\\n    @task\\n    def view_review(self):\\n        self.client.get(\\n            \\\"/reviews/15f86426-98c7-41d1-a663-7ea890e2b0cb\\\",\\n            name=\\\"GET /reviews/[review_id]\\\"\\n        )\\n\\n    @task\\n    def submit_review(self):\\n        self.client.post(\\n            \\\"/reviews\\\",\\n            json={\\n                \\\"user_id\\\": \\\"57026a31-ae59-4263-a620-57193f2a0bd5\\\",\\n                \\\"product_id\\\": \\\"fb4b1641-8cc9-44fa-a604-3f5cedd4b720\\\",\\n                \\\"rating\\\": 5,\\n                \\\"comment\\\": \\\"Отличный товар!\\\"\\n            },\\n            name=\\\"POST /reviews\\\"\\n        )\\n\\n\\n# Базовый класс, который ставит заголовки в on_start\\nclass BaseUser(HttpUser):\\n    # Тут перечисляем все кастомные заголовки\\n    custom_headers = {\\n        \\\"Authorization\\\": \\\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNWQ5NGY3ZS1hMDQ3LTQwM2QtYWY5Yi03ZWM5MTI4NTRhYmQiLCJleHAiOjE3NDU5NDA2NTQsImlzcyI6IndiLWJhY2siLCJhdWQiOiJ3Yi1mcm9udCJ9.k7rQVWg8_lCwIwh41TeNKZAAzL2i63nEmfubCF4efuU\\\",\\n    }\\n\\n    def on_start(self):\\n        # авто-добавляем их ко всем будущим запросам\\n        self.client.headers.update(self.custom_headers)\\n        self.client.verify = False\\n\\n\\nclass BuyerUser(BaseUser):\\n    tasks = [BuyerBehavior]\\n    weight = 8\\n    wait_time = between(1, 2)\\n\\n\\nclass SellerUser(BaseUser):\\n    tasks = [SellerBehavior]\\n    weight = 2\\n    wait_time = between(5, 10)\\n\\n\\nclass ModeratorUser(BaseUser):\\n    tasks = [ModeratorBehavior]\\n    weight = 2\\n    wait_time = between(5, 10)\\n\\n\\n# locust --users 300 --spawn-rate 30 --host=https://cashbackwb.ru/api\\n\"\n  },\n  {\n    \"path\": \"backend/settings.json\",\n    \"content\": \"{\\n  \\\"db\\\": {\\n    \\\"host\\\": \\\"db\\\",\\n    \\\"port\\\": 5432,\\n    \\\"user\\\": \\\"wbuser\\\",\\n    \\\"password\\\": \\\"wbpassword\\\",\\n    \\\"name\\\": \\\"postgres\\\"\\n  },\\n    \\\"jwt\\\": {\\n    \\\"secret_key\\\": \\\"very-secret-wb-key-innit\\\",\\n    \\\"issuer\\\": \\\"wb-back\\\",\\n    \\\"audience\\\": \\\"wb-front\\\",\\n    \\\"access_expire\\\": 18000,\\n    \\\"refresh_expire\\\": 6000\\n  },\\n  \\\"bot\\\": {\\n    \\\"local\\\": {\\n      \\\"token\\\": \\\"7782070677:AAHtu78aPEQSf15dYsXJbBhcbfMoz7bDXQg\\\",\\n      \\\"username\\\": \\\"WBJarvisBot\\\"\\n    },\\n    \\\"dev\\\": {\\n      \\\"token\\\": \\\"7923150921:AAGAUkeu-dfp_fXkwTwb3HQZZlYEf66MzYg\\\",\\n      \\\"username\\\": \\\"cashbackwb_ru_bot\\\"\\n    }\\n  }\\n}\\n\"\n  },\n  {\n    \"path\": \"backend/requirements.txt\",\n    \"content\": \"aiofiles==24.1.0\\nalembic==1.15.1\\nalembic-postgresql-enum==1.7.0\\nannotated-types==0.7.0\\nanyio==4.8.0\\nasyncpg==0.30.0\\ncertifi==2025.1.31\\ncffi==1.17.1\\nclick==8.1.8\\ncryptography==44.0.2\\ndnspython==2.7.0\\nemail_validator==2.2.0\\nfastapi==0.115.11\\ngreenlet==3.1.1\\nh11==0.14.0\\nhttpcore==1.0.7\\nhttpx==0.28.1\\nidna==3.10\\nMako==1.3.9\\nMarkupSafe==3.0.2\\npycparser==2.22\\npycryptodome==3.21.0\\npydantic==2.10.6\\npydantic-settings==2.8.1\\npydantic_core==2.27.2\\nPyJWT==2.10.1\\npython-dotenv==1.0.1\\npython-multipart==0.0.20\\nsniffio==1.3.1\\nSQLAlchemy==2.0.39\\nstarlette==0.46.1\\ntyping_extensions==4.12.2\\nuvicorn==0.34.0\\n\"\n  },\n  {\n    \"path\": \"backend/alembic.ini\",\n    \"content\": \"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\n# Use forward slashes (/) also on windows to provide an os agnostic path\\nscript_location = migrations\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python>=3.9 or backports.zoneinfo library.\\n# Any required deps can installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to ZoneInfo()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to migrations/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\n# version_path_separator = newline\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# set to 'true' to search source files recursively\\n# in each \\\"version_locations\\\" directory\\n# new in Alembic version 1.10\\n# recursive_version_locations = false\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\nsqlalchemy.url = driver://user:pass@localhost/dbname\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# lint with attempts to fix using \\\"ruff\\\" - use the exec runner, execute a binary\\n# hooks = ruff\\n# ruff.type = exec\\n# ruff.executable = %(here)s/.venv/bin/ruff\\n# ruff.options = --fix REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARNING\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARNING\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\"\n  },\n  {\n    \"path\": \"backend/Dockerfile\",\n    \"content\": \"# ------------------------------------------\\n# Stage 1: Build dependencies and install Python packages\\n# ------------------------------------------\\nARG PYTHON_VERSION=3.12.3\\nFROM python:${PYTHON_VERSION}-slim AS builder\\n\\nENV PYTHONDONTWRITEBYTECODE=1 \\\\\\n    PYTHONUNBUFFERED=1\\n\\n# Install build dependencies\\nRUN apt-get update && \\\\\\n    apt-get install --no-install-recommends -y gcc libpq-dev wget && \\\\\\n    rm -rf /var/lib/apt/lists/*\\n\\nWORKDIR /app\\n\\n# Install Python dependencies\\nCOPY ./requirements.txt .\\nRUN pip install --upgrade pip && \\\\\\n    pip install --prefix=/install -r requirements.txt\\n\\n# ------------------------------------------\\n# Stage 2: Final runtime image\\n# ------------------------------------------\\nFROM python:${PYTHON_VERSION}-slim AS runtime\\n\\nENV PYTHONDONTWRITEBYTECODE=1 \\\\\\n    PYTHONUNBUFFERED=1 \\\\\\n    ENVIRONMENT=dev\\n\\nWORKDIR /app\\n\\n# Copy installed Python packages from builder stage\\nCOPY --from=builder /install /usr/local\\n\\n# Copy application code\\nCOPY . .\\n\\n#ENTRYPOINT [\\\"sh\\\", \\\"-c\\\", \\\"uvicorn main:app --host 0.0.0.0 --port 8080\\\"]\\n\"\n  },\n  {\n    \"path\": \"backend/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/.gitignore\",\n    \"content\": \"upload/\"\n  },\n  {\n    \"path\": \"backend/settings.py\",\n    \"content\": \"import os\\nfrom pathlib import Path\\nfrom typing import Type, Tuple\\n\\nfrom pydantic import SecretStr\\nfrom pydantic_settings import (\\n    BaseSettings,\\n    SettingsConfigDict,\\n    PydanticBaseSettingsSource,\\n    JsonConfigSettingsSource,\\n)\\n\\nENV = os.getenv(\\\"ENVIRONMENT\\\", \\\"local\\\")\\n\\n\\nclass DBSettings(BaseSettings):\\n    host: str\\n    port: int\\n    name: str\\n    user: str\\n    password: SecretStr\\n\\n    @property\\n    def url(self):\\n        return (\\n            f\\\"postgresql+asyncpg://{self.user}:{self.password.get_secret_value()}@\\\"\\n            f\\\"{self.host}:{self.port}/{self.name}\\\"\\n        )\\n\\n\\nclass JwtSettings(BaseSettings):\\n    secret_key: SecretStr\\n    issuer: str\\n    audience: str\\n    access_expire: int\\n    refresh_expire: int\\n\\n\\nclass BotTokenSettings(BaseSettings):\\n    token: str\\n    username: str\\n\\n\\nclass BotSettings(BaseSettings):\\n    local: BotTokenSettings\\n    dev: BotTokenSettings\\n\\n    @property\\n    def token(self) -> str:\\n        match ENV:\\n            case \\\"dev\\\":\\n                return self.dev.token\\n            case \\\"local\\\":\\n                return self.local.token\\n\\n    @property\\n    def username(self) -> str:\\n        match ENV:\\n            case \\\"dev\\\":\\n                return self.dev.username\\n            case \\\"local\\\":\\n                return self.local.username\\n\\n\\nclass Settings(BaseSettings):\\n    db: DBSettings\\n    jwt: JwtSettings\\n\\n    bot: BotSettings\\n\\n    debug: bool = True\\n\\n    model_config = SettingsConfigDict(\\n        extra=\\\"ignore\\\",\\n        json_file=Path(__file__).parent / \\\"settings.json\\\",\\n        json_file_encoding=\\\"utf-8\\\",\\n    )\\n\\n    @classmethod\\n    def settings_customise_sources(\\n            cls,\\n            settings_cls: Type[BaseSettings],\\n            init_settings: PydanticBaseSettingsSource,\\n            env_settings: PydanticBaseSettingsSource,\\n            dotenv_settings: PydanticBaseSettingsSource,\\n            file_secret_settings: PydanticBaseSettingsSource,\\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\\n        return (\\n            JsonConfigSettingsSource(settings_cls),  # Fallback to JSON\\n        )\\n\\n\\nsettings = Settings()\\n\"\n  },\n  {\n    \"path\": \"backend/main.py\",\n    \"content\": \"import logging\\nimport subprocess\\nfrom contextlib import asynccontextmanager\\nfrom typing import AsyncGenerator\\n\\nfrom fastapi import FastAPI\\nfrom fastapi.openapi.utils import get_openapi\\n\\nfrom starlette.middleware.cors import CORSMiddleware\\nfrom starlette.staticfiles import StaticFiles\\n\\nfrom dependencies.services.upload import get_upload_service\\nfrom middlewares.auth_middleware import check_for_auth\\nfrom routes import (\\n    router as api_router,\\n    user_router,\\n    moderator_router,\\n    orders_router,\\n    product_router,\\n    review_router,\\n    auth_router,\\n\\n)\\nfrom settings import settings\\n\\nlogger = logging.getLogger(__name__)\\nlogging.basicConfig(\\n    level=logging.INFO,\\n    format=\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\",\\n)\\n\\n\\nasync def apply_migrations():\\n    migrations_is_ok = subprocess.call([\\\"alembic\\\", \\\"upgrade\\\", \\\"head\\\"]) == 0\\n    if not migrations_is_ok:\\n        logger.error(\\\"There is an error while upgrading database\\\")\\n        exit(1)\\n\\n\\n@asynccontextmanager\\nasync def lifespan(_) -> AsyncGenerator[None, None]:\\n    await apply_migrations()\\n\\n    upload_service = get_upload_service()\\n    await upload_service.initialize()\\n\\n    yield\\n\\n\\napp = FastAPI(lifespan=lifespan)\\n\\napp.mount(\\\"/static/images\\\", StaticFiles(directory=\\\"upload\\\"), name=\\\"upload\\\")\\n\\napp.add_middleware(\\n    CORSMiddleware,\\n    allow_origins=[\\n        \\\"http://localhost:3000\\\",\\n        \\\"https://f938-45-150-33-208.ngrok-free.app\\\",\\n        \\\"https://7f02-45-150-33-208.ngrok-free.app\\\"\\n        # \\\"*\\\"\\n    ],\\n    allow_credentials=True,\\n    allow_methods=[\\\"GET\\\", \\\"POST\\\", \\\"OPTIONS\\\", \\\"PATCH\\\", \\\"DELETE\\\"],\\n    allow_headers=[\\\"*\\\"],\\n)\\napp.middleware('http')(check_for_auth)\\n\\napp.include_router(api_router)\\n# app.include_router(product_router)\\n# app.include_router(user_router)\\n# app.include_router(orders_router)\\n# app.include_router(review_router)\\n# app.include_router(auth_router)\\n# app.include_router(moderator_router)\\n\\n# if __name__ == \\\"__main__\\\":\\n#     uvicorn.run(app, host=\\\"0.0.0.0\\\", port=8000)\\n\\n\\n\\ndef custom_openapi():\\n    if app.openapi_schema:\\n        return app.openapi_schema\\n    openapi_schema = get_openapi(\\n        title=\\\"WB BOT API\\\",\\n        version=\\\"0.1.0\\\",\\n        description=\\\"meow\\\",\\n        routes=app.routes,\\n    )\\n    openapi_schema[\\\"components\\\"][\\\"securitySchemes\\\"] = {\\n        \\\"bearerAuth\\\": {\\n            \\\"type\\\": \\\"http\\\",\\n            \\\"scheme\\\": \\\"bearer\\\",\\n            \\\"bearerFormat\\\": \\\"JWT\\\",\\n        }\\n    }\\n    openapi_schema[\\\"security\\\"] = [{\\\"bearerAuth\\\": []}]\\n    app.openapi_schema = openapi_schema\\n    return app.openapi_schema\\n\\n\\napp.openapi = custom_openapi\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/script.py.mako\",\n    \"content\": \"\\\"\\\"\\\"${message}\\n\\nRevision ID: ${up_revision}\\nRevises: ${down_revision | comma,n}\\nCreate Date: ${create_date}\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n${imports if imports else \\\"\\\"}\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = ${repr(up_revision)}\\ndown_revision: Union[str, None] = ${repr(down_revision)}\\nbranch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}\\ndepends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}\\n\\n\\ndef upgrade() -> None:\\n    ${upgrades if upgrades else \\\"pass\\\"}\\n\\n\\ndef downgrade() -> None:\\n    ${downgrades if downgrades else \\\"pass\\\"}\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/env.py\",\n    \"content\": \"import asyncio\\nfrom logging.config import fileConfig\\n\\nimport alembic_postgresql_enum  # noqa\\nfrom alembic import context\\nfrom sqlalchemy import pool\\nfrom sqlalchemy.engine import Connection\\nfrom sqlalchemy.ext.asyncio import async_engine_from_config\\n\\nfrom infrastructure.entities import Base\\nfrom settings import settings\\n\\n# this is the Alembic Config object, which provides\\n# access to the values within the .ini file in use.\\nconfig = context.config\\n\\n# Interpret the config file for Python logging.\\n# This line sets up loggers basically.\\nif config.config_file_name is not None:\\n    fileConfig(config.config_file_name)\\n\\n# add your model's MetaData object here\\n# for 'autogenerate' support\\n# from myapp import mymodel\\n# target_metadata = mymodel.Base.metadata\\ntarget_metadata = Base.metadata\\n\\n# other values from the config, defined by the needs of env.py,\\n# can be acquired:\\n# my_important_option = config.get_main_option(\\\"my_important_option\\\")\\n# ... etc.\\n\\nconfig.set_main_option(\\\"sqlalchemy.url\\\", settings.db.url)\\n\\n\\ndef run_migrations_offline() -> None:\\n    \\\"\\\"\\\"Run migrations in 'offline' mode.\\n\\n    This configures the context with just a URL\\n    and not an Engine, though an Engine is acceptable\\n    here as well.  By skipping the Engine creation\\n    we don't even need a DBAPI to be available.\\n\\n    Calls to context.execute() here emit the given string to the\\n    script output.\\n\\n    \\\"\\\"\\\"\\n    url = config.get_main_option(\\\"sqlalchemy.url\\\")\\n    context.configure(\\n        url=url,\\n        target_metadata=target_metadata,\\n        literal_binds=True,\\n        dialect_opts={\\\"paramstyle\\\": \\\"named\\\"},\\n    )\\n\\n    with context.begin_transaction():\\n        context.run_migrations()\\n\\n\\ndef do_run_migrations(connection: Connection) -> None:\\n    context.configure(connection=connection, target_metadata=target_metadata)\\n\\n    with context.begin_transaction():\\n        context.run_migrations()\\n\\n\\nasync def run_async_migrations() -> None:\\n    \\\"\\\"\\\"In this scenario we need to create an Engine\\n    and associate a connection with the context.\\n\\n    \\\"\\\"\\\"\\n\\n    connectable = async_engine_from_config(\\n        config.get_section(config.config_ini_section, {}),\\n        prefix=\\\"sqlalchemy.\\\",\\n        poolclass=pool.NullPool,\\n    )\\n\\n    async with connectable.connect() as connection:\\n        await connection.run_sync(do_run_migrations)\\n\\n    await connectable.dispose()\\n\\n\\ndef run_migrations_online() -> None:\\n    \\\"\\\"\\\"Run migrations in 'online' mode.\\\"\\\"\\\"\\n\\n    asyncio.run(run_async_migrations())\\n\\n\\nif context.is_offline_mode():\\n    run_migrations_offline()\\nelse:\\n    run_migrations_online()\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/README\",\n    \"content\": \"Generic single-database configuration.\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/31c2d93d3741_seller_and_moderator_comments.py\",\n    \"content\": \"\\\"\\\"\\\"seller and moderator comments\\n\\nRevision ID: 31c2d93d3741\\nRevises: 0529594d5b4c\\nCreate Date: 2025-04-14 14:08:29.689262\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '31c2d93d3741'\\ndown_revision: Union[str, None] = '0529594d5b4c'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('moderator_reviews', sa.Column('comment_to_seller', sa.String(), nullable=True))\\n    op.add_column('moderator_reviews', sa.Column('comment_to_moderator', sa.String(), nullable=True))\\n    op.drop_column('moderator_reviews', 'comment')\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('moderator_reviews', sa.Column('comment', sa.VARCHAR(), autoincrement=False, nullable=False))\\n    op.drop_column('moderator_reviews', 'comment_to_moderator')\\n    op.drop_column('moderator_reviews', 'comment_to_seller')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/02558ec308b0_add_requirements_agree_to_product.py\",\n    \"content\": \"\\\"\\\"\\\"add requirements_agree to product\\n\\nRevision ID: 02558ec308b0\\nRevises: 3efa6bd17ed2\\nCreate Date: 2025-04-19 18:25:41.550741\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '02558ec308b0'\\ndown_revision: Union[str, None] = '3efa6bd17ed2'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('products', sa.Column('requirements_agree', sa.Boolean(), nullable=False))\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_column('products', 'requirements_agree')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/67826c72ae26_admin_role.py\",\n    \"content\": \"\\\"\\\"\\\"admin role\\n\\nRevision ID: 67826c72ae26\\nRevises: dcd8d88a3066\\nCreate Date: 2025-03-29 20:18:49.996263\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom alembic_postgresql_enum import TableReference\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '67826c72ae26'\\ndown_revision: Union[str, None] = 'dcd8d88a3066'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='userrole',\\n        new_values=['USER', 'MODERATOR', 'ADMIN'],\\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='userrole',\\n        new_values=['USER', 'MODERATOR'],\\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/593273b8aae3_add_order_status.py\",\n    \"content\": \"\\\"\\\"\\\"add order status\\n\\nRevision ID: 593273b8aae3\\nRevises: 822f4dc31b66\\nCreate Date: 2025-03-30 20:21:37.221964\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '593273b8aae3'\\ndown_revision: Union[str, None] = '822f4dc31b66'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus').create(op.get_bind())\\n    op.alter_column('orders', 'status',\\n               existing_type=sa.VARCHAR(),\\n               type_=sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus'),\\n               existing_nullable=False,\\n               postgresql_using='status::orderstatus')\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.alter_column('orders', 'status',\\n               existing_type=sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus'),\\n               type_=sa.VARCHAR(),\\n               existing_nullable=False)\\n    sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus').drop(op.get_bind())\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/a1b9fc55f20d_full_text_index_to_products.py\",\n    \"content\": \"\\\"\\\"\\\"full-text index to products\\n\\nRevision ID: a1b9fc55f20d\\nRevises: 159aef5c2313\\nCreate Date: 2025-04-28 16:56:27.934381\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nimport sqlalchemy as sa\\nfrom alembic import op\\nfrom sqlalchemy.dialects.postgresql import TSVECTOR\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = 'a1b9fc55f20d'\\ndown_revision: Union[str, None] = '159aef5c2313'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\ndef upgrade() -> None:\\n    # 1) заполняем колонку существующими данными\\n    op.execute(\\\"\\\"\\\"\\n      UPDATE products\\n      SET search_vector = to_tsvector(\\n        'russian',\\n        coalesce(name,'') || ' ' || coalesce(key_word,'')\\n      );\\n    \\\"\\\"\\\")\\n\\n    # 2) создаём GIN-индекс на search_vector\\n    op.create_index(\\n        'ix_products_search_vector',\\n        'products',\\n        ['search_vector'],\\n        postgresql_using='gin'\\n    )\\n\\n    # 3) регистрируем (или обновляем) функцию-триггер\\n    op.execute(\\\"\\\"\\\"\\n    CREATE OR REPLACE FUNCTION products_search_vector_update()\\n    RETURNS trigger AS $$\\n    BEGIN\\n      NEW.search_vector := to_tsvector(\\n        'russian',\\n        coalesce(NEW.name,'') || ' ' || coalesce(NEW.key_word,'')\\n      );\\n      RETURN NEW;\\n    END\\n    $$ LANGUAGE plpgsql;\\n    \\\"\\\"\\\")\\n\\n    # 4) удаляем старый триггер, если он есть\\n    op.execute(\\\"DROP TRIGGER IF EXISTS trg_products_search_vector ON products;\\\")\\n\\n    # 5) создаём триггер заново\\n    op.execute(\\\"\\\"\\\"\\n    CREATE TRIGGER trg_products_search_vector\\n    BEFORE INSERT OR UPDATE ON products\\n    FOR EACH ROW EXECUTE FUNCTION products_search_vector_update();\\n    \\\"\\\"\\\")\\n\\n\\ndef downgrade() -> None:\\n    # откат: сначала индекс, потом триггер, функцию и колонку\\n    op.drop_index('ix_products_search_vector', table_name='products')\\n    op.execute(\\\"DROP TRIGGER IF EXISTS trg_products_search_vector ON products;\\\")\\n    op.execute(\\\"DROP FUNCTION IF EXISTS products_search_vector_update();\\\")\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/159aef5c2313_add_search_vector_to_product.py\",\n    \"content\": \"\\\"\\\"\\\"add search_vector to product\\n\\nRevision ID: 159aef5c2313\\nRevises: 02558ec308b0\\nCreate Date: 2025-04-28 16:55:09.294128\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom sqlalchemy.dialects import postgresql\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '159aef5c2313'\\ndown_revision: Union[str, None] = '02558ec308b0'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('products', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True))\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_column('products', 'search_vector')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/0529594d5b4c_button_in_push.py\",\n    \"content\": \"\\\"\\\"\\\"button in push\\n\\nRevision ID: 0529594d5b4c\\nRevises: d92bc63fb3a6\\nCreate Date: 2025-04-09 18:46:02.052762\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '0529594d5b4c'\\ndown_revision: Union[str, None] = 'd92bc63fb3a6'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('pushes', sa.Column('button_text', sa.String(), nullable=True))\\n    op.add_column('pushes', sa.Column('button_link', sa.String(), nullable=True))\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_column('pushes', 'button_link')\\n    op.drop_column('pushes', 'button_text')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/909dc0adb8a2_pushes.py\",\n    \"content\": \"\\\"\\\"\\\"pushes\\n\\nRevision ID: 909dc0adb8a2\\nRevises: 593273b8aae3\\nCreate Date: 2025-04-08 22:30:09.123840\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom sqlalchemy.dialects import postgresql\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '909dc0adb8a2'\\ndown_revision: Union[str, None] = '593273b8aae3'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    sa.Enum('PLANNED', 'IN_PROGRESS', 'DELIVERED', 'FAILED', name='pushstatus').create(op.get_bind())\\n    op.create_table('pushes',\\n    sa.Column('title', sa.String(), nullable=False),\\n    sa.Column('text', sa.String(), nullable=False),\\n    sa.Column('creator_id', sa.UUID(), nullable=False),\\n    sa.Column('image_path', sa.String(), nullable=True),\\n    sa.Column('id', sa.UUID(), nullable=False),\\n    sa.Column('created_at', sa.DateTime(), nullable=False),\\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\\n    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),\\n    sa.PrimaryKeyConstraint('id'),\\n    sa.UniqueConstraint('title')\\n    )\\n    op.create_table('user_pushes',\\n    sa.Column('push_id', sa.UUID(), nullable=False),\\n    sa.Column('user_id', sa.UUID(), nullable=False),\\n    sa.Column('sent_at', sa.DateTime(), nullable=True),\\n    sa.Column('status', postgresql.ENUM('PLANNED', 'IN_PROGRESS', 'DELIVERED', 'FAILED', name='pushstatus', create_type=False), nullable=False),\\n    sa.Column('id', sa.UUID(), nullable=False),\\n    sa.Column('created_at', sa.DateTime(), nullable=False),\\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\\n    sa.ForeignKeyConstraint(['push_id'], ['pushes.id'], ),\\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\\n    sa.PrimaryKeyConstraint('id')\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_table('user_pushes')\\n    op.drop_table('pushes')\\n    sa.Enum('PLANNED', 'IN_PROGRESS', 'DELIVERED', 'FAILED', name='pushstatus').drop(op.get_bind())\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/d92bc63fb3a6_push_soft_deletion.py\",\n    \"content\": \"\\\"\\\"\\\"push soft deletion\\n\\nRevision ID: d92bc63fb3a6\\nRevises: 909dc0adb8a2\\nCreate Date: 2025-04-09 18:29:57.869011\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom alembic_postgresql_enum import TableReference\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = 'd92bc63fb3a6'\\ndown_revision: Union[str, None] = '909dc0adb8a2'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('pushes', sa.Column('deleted_at', sa.DateTime(), nullable=True))\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='userrole',\\n        new_values=['USER', 'CLIENT', 'SELLER', 'MODERATOR', 'ADMIN'],\\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='userrole',\\n        new_values=['USER', 'MODERATOR', 'ADMIN'],\\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\\n        enum_values_to_rename=[],\\n    )\\n    op.drop_column('pushes', 'deleted_at')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/822f4dc31b66_add_balance_to_user.py\",\n    \"content\": \"\\\"\\\"\\\"add balance to user\\n\\nRevision ID: 822f4dc31b66\\nRevises: 67826c72ae26\\nCreate Date: 2025-03-30 00:46:00.876231\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '822f4dc31b66'\\ndown_revision: Union[str, None] = '67826c72ae26'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('users', sa.Column('balance', sa.Integer(), nullable=True))\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_column('users', 'balance')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/dcd8d88a3066_fix_product_status_enum.py\",\n    \"content\": \"\\\"\\\"\\\"fix product status enum\\n\\nRevision ID: dcd8d88a3066\\nRevises: 77f5ca11e091\\nCreate Date: 2025-03-29 19:20:44.915139\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom alembic_postgresql_enum import TableReference\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = 'dcd8d88a3066'\\ndown_revision: Union[str, None] = '77f5ca11e091'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='productstatus',\\n        new_values=['CREATED', 'ACTIVE', 'DISABLED', 'REJECTED', 'ARCHIVED'],\\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='productstatus',\\n        new_values=['CREATED', 'ACTIVE', 'DISABLED'],\\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/5ed63303b433_add_remaining_products_to_product.py\",\n    \"content\": \"\\\"\\\"\\\"add remaining_products to product\\n\\nRevision ID: 5ed63303b433\\nRevises: 9a0fc27b72fb\\nCreate Date: 2025-04-19 12:17:00.606425\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '5ed63303b433'\\ndown_revision: Union[str, None] = '9a0fc27b72fb'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('products', sa.Column('remaining_products', sa.Integer(), nullable=False))\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_column('products', 'remaining_products')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/2dff807c6776_add_payment_confirmed_status_to_order.py\",\n    \"content\": \"\\\"\\\"\\\"add payment_confirmed status to order\\n\\nRevision ID: 2dff807c6776\\nRevises: a1b9fc55f20d\\nCreate Date: 2025-04-30 21:51:10.528330\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom alembic_postgresql_enum import TableReference\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '2dff807c6776'\\ndown_revision: Union[str, None] = 'a1b9fc55f20d'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_index('ix_products_search_vector', table_name='products', postgresql_using='gin')\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='orderstatus',\\n        new_values=['CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', 'PAYMENT_CONFIRMED'],\\n        affected_columns=[TableReference(table_schema='public', table_name='orders', column_name='status')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='orderstatus',\\n        new_values=['CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED'],\\n        affected_columns=[TableReference(table_schema='public', table_name='orders', column_name='status')],\\n        enum_values_to_rename=[],\\n    )\\n    op.create_index('ix_products_search_vector', 'products', ['search_vector'], unique=False, postgresql_using='gin')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/3efa6bd17ed2_add_not_paid_status_to_product.py\",\n    \"content\": \"\\\"\\\"\\\"add NOT_PAID status to product\\n\\nRevision ID: 3efa6bd17ed2\\nRevises: 5ed63303b433\\nCreate Date: 2025-04-19 14:30:56.914236\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom alembic_postgresql_enum import TableReference\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '3efa6bd17ed2'\\ndown_revision: Union[str, None] = '5ed63303b433'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='productstatus',\\n        new_values=['CREATED', 'ACTIVE', 'NOT_PAID', 'DISABLED', 'REJECTED', 'ARCHIVED'],\\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.sync_enum_values(\\n        enum_schema='public',\\n        enum_name='productstatus',\\n        new_values=['CREATED', 'ACTIVE', 'DISABLED', 'REJECTED', 'ARCHIVED'],\\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\\n        enum_values_to_rename=[],\\n    )\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/9a0fc27b72fb_add_user_has_discount_and_referrer_bonus.py\",\n    \"content\": \"\\\"\\\"\\\"add user has_discount and referrer_bonus\\n\\nRevision ID: 9a0fc27b72fb\\nRevises: 31c2d93d3741\\nCreate Date: 2025-04-16 14:25:34.869373\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '9a0fc27b72fb'\\ndown_revision: Union[str, None] = '31c2d93d3741'\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.add_column('users', sa.Column('invited_by', sa.UUID(), nullable=True))\\n    op.add_column('users', sa.Column('has_discount', sa.Boolean(), nullable=True))\\n    op.add_column('users', sa.Column('referrer_bonus', sa.Integer(), nullable=True))\\n    op.create_foreign_key(None, 'users', 'users', ['invited_by'], ['id'])\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_constraint(None, 'users', type_='foreignkey')\\n    op.drop_column('users', 'referrer_bonus')\\n    op.drop_column('users', 'has_discount')\\n    op.drop_column('users', 'invited_by')\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/migrations/versions/77f5ca11e091_init.py\",\n    \"content\": \"\\\"\\\"\\\"init\\n\\nRevision ID: 77f5ca11e091\\nRevises: \\nCreate Date: 2025-03-26 16:21:44.980861\\n\\n\\\"\\\"\\\"\\nfrom typing import Sequence, Union\\n\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom sqlalchemy.dialects import postgresql\\n\\n# revision identifiers, used by Alembic.\\nrevision: str = '77f5ca11e091'\\ndown_revision: Union[str, None] = None\\nbranch_labels: Union[str, Sequence[str], None] = None\\ndepends_on: Union[str, Sequence[str], None] = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    sa.Enum('USER', 'MODERATOR', name='userrole').create(op.get_bind())\\n    sa.Enum('CREATED', 'ACTIVE', 'DISABLED', name='productstatus').create(op.get_bind())\\n    sa.Enum('AFTER_REVIEW', 'AFTER_DELIVERY', 'ON_15TH_DAY', name='payouttime').create(op.get_bind())\\n    sa.Enum('WOMEN', 'MEN', 'SHOES', 'KIDS', 'HOME', 'NEW_YEAR', 'BEAUTY', 'ACCESSORIES', 'ELECTRONICS', 'TOYS', 'FURNITURE', 'ADULT', 'APPLIANCES', 'PETS', 'SPORTS', 'AUTO', 'JEWELRY', 'REPAIR', 'GARDEN', 'HEALTH', 'STATIONERY', name='category').create(op.get_bind())\\n    op.create_table('users',\\n    sa.Column('telegram_id', sa.BigInteger(), nullable=True),\\n    sa.Column('nickname', sa.String(), nullable=True),\\n    sa.Column('role', postgresql.ENUM('USER', 'MODERATOR', name='userrole', create_type=False), nullable=False),\\n    sa.Column('is_banned', sa.Boolean(), nullable=False),\\n    sa.Column('is_seller', sa.Boolean(), nullable=False),\\n    sa.Column('id', sa.UUID(), nullable=False),\\n    sa.Column('created_at', sa.DateTime(), nullable=False),\\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\\n    sa.PrimaryKeyConstraint('id'),\\n    sa.UniqueConstraint('telegram_id')\\n    )\\n    op.create_table('products',\\n    sa.Column('name', sa.String(), nullable=False),\\n    sa.Column('brand', sa.String(), nullable=False),\\n    sa.Column('article', sa.String(), nullable=False),\\n    sa.Column('category', postgresql.ENUM('WOMEN', 'MEN', 'SHOES', 'KIDS', 'HOME', 'NEW_YEAR', 'BEAUTY', 'ACCESSORIES', 'ELECTRONICS', 'TOYS', 'FURNITURE', 'ADULT', 'APPLIANCES', 'PETS', 'SPORTS', 'AUTO', 'JEWELRY', 'REPAIR', 'GARDEN', 'HEALTH', 'STATIONERY', name='category', create_type=False), nullable=False),\\n    sa.Column('key_word', sa.String(), nullable=False),\\n    sa.Column('general_repurchases', sa.Integer(), nullable=False),\\n    sa.Column('daily_repurchases', sa.Integer(), nullable=False),\\n    sa.Column('price', sa.Float(), nullable=False),\\n    sa.Column('wb_price', sa.Float(), nullable=False),\\n    sa.Column('tg', sa.String(), nullable=False),\\n    sa.Column('payment_time', postgresql.ENUM('AFTER_REVIEW', 'AFTER_DELIVERY', 'ON_15TH_DAY', name='payouttime', create_type=False), nullable=False),\\n    sa.Column('review_requirements', sa.String(), nullable=False),\\n    sa.Column('image_path', sa.String(), nullable=True),\\n    sa.Column('seller_id', sa.UUID(), nullable=False),\\n    sa.Column('status', postgresql.ENUM('CREATED', 'ACTIVE', 'DISABLED', name='productstatus', create_type=False), nullable=False),\\n    sa.Column('id', sa.UUID(), nullable=False),\\n    sa.Column('created_at', sa.DateTime(), nullable=False),\\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\\n    sa.ForeignKeyConstraint(['seller_id'], ['users.id'], ),\\n    sa.PrimaryKeyConstraint('id'),\\n    sa.UniqueConstraint('article')\\n    )\\n    op.create_table('moderator_reviews',\\n    sa.Column('moderator_id', sa.UUID(), nullable=False),\\n    sa.Column('product_id', sa.UUID(), nullable=False),\\n    sa.Column('comment', sa.String(), nullable=False),\\n    sa.Column('status_before', postgresql.ENUM('CREATED', 'ACTIVE', 'DISABLED', name='productstatus', create_type=False), nullable=False),\\n    sa.Column('status_after', postgresql.ENUM('CREATED', 'ACTIVE', 'DISABLED', name='productstatus', create_type=False), nullable=False),\\n    sa.Column('id', sa.UUID(), nullable=False),\\n    sa.Column('created_at', sa.DateTime(), nullable=False),\\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\\n    sa.ForeignKeyConstraint(['moderator_id'], ['users.id'], ),\\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\\n    sa.PrimaryKeyConstraint('id')\\n    )\\n    op.create_table('orders',\\n    sa.Column('user_id', sa.UUID(), nullable=False),\\n    sa.Column('product_id', sa.UUID(), nullable=False),\\n    sa.Column('seller_id', sa.UUID(), nullable=False),\\n    sa.Column('step', sa.Integer(), nullable=False),\\n    sa.Column('search_screenshot_path', sa.String(), nullable=True),\\n    sa.Column('cart_screenshot_path', sa.String(), nullable=True),\\n    sa.Column('card_number', sa.String(), nullable=True),\\n    sa.Column('phone_number', sa.String(), nullable=True),\\n    sa.Column('name', sa.String(), nullable=True),\\n    sa.Column('bank', sa.String(), nullable=True),\\n    sa.Column('final_cart_screenshot_path', sa.String(), nullable=True),\\n    sa.Column('delivery_screenshot_path', sa.String(), nullable=True),\\n    sa.Column('barcodes_screenshot_path', sa.String(), nullable=True),\\n    sa.Column('review_screenshot_path', sa.String(), nullable=True),\\n    sa.Column('receipt_screenshot_path', sa.String(), nullable=True),\\n    sa.Column('receipt_number', sa.String(), nullable=True),\\n    sa.Column('status', sa.String(), nullable=False),\\n    sa.Column('id', sa.UUID(), nullable=False),\\n    sa.Column('created_at', sa.DateTime(), nullable=False),\\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\\n    sa.ForeignKeyConstraint(['seller_id'], ['users.id'], ),\\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\\n    sa.PrimaryKeyConstraint('id')\\n    )\\n    op.create_table('reviews',\\n    sa.Column('user_id', sa.UUID(), nullable=False),\\n    sa.Column('product_id', sa.UUID(), nullable=False),\\n    sa.Column('rating', sa.Integer(), nullable=False),\\n    sa.Column('comment', sa.String(), nullable=False),\\n    sa.Column('id', sa.UUID(), nullable=False),\\n    sa.Column('created_at', sa.DateTime(), nullable=False),\\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\\n    sa.PrimaryKeyConstraint('id')\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_table('reviews')\\n    op.drop_table('orders')\\n    op.drop_table('moderator_reviews')\\n    op.drop_table('products')\\n    op.drop_table('users')\\n    sa.Enum('WOMEN', 'MEN', 'SHOES', 'KIDS', 'HOME', 'NEW_YEAR', 'BEAUTY', 'ACCESSORIES', 'ELECTRONICS', 'TOYS', 'FURNITURE', 'ADULT', 'APPLIANCES', 'PETS', 'SPORTS', 'AUTO', 'JEWELRY', 'REPAIR', 'GARDEN', 'HEALTH', 'STATIONERY', name='category').drop(op.get_bind())\\n    sa.Enum('AFTER_REVIEW', 'AFTER_DELIVERY', 'ON_15TH_DAY', name='payouttime').drop(op.get_bind())\\n    sa.Enum('CREATED', 'ACTIVE', 'DISABLED', name='productstatus').drop(op.get_bind())\\n    sa.Enum('USER', 'MODERATOR', name='userrole').drop(op.get_bind())\\n    # ### end Alembic commands ###\\n\"\n  },\n  {\n    \"path\": \"backend/middlewares/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/middlewares/auth_middleware.py\",\n    \"content\": \"import logging\\n\\nfrom fastapi import Request\\nfrom fastapi.responses import JSONResponse\\n\\nfrom dependencies.services.auth import get_auth_service\\nfrom infrastructure.repositories.exceptions import NotFoundException\\nfrom services.auth.exceptions import InvalidTokenException, ExpiredTokenException\\nfrom services.exceptions import PermissionException, BannedUserException\\n\\n\\nasync def check_for_auth(\\n        request: Request,\\n        call_next,\\n):\\n    url_path = request.url.path.replace(\\\"/api\\\", \\\"\\\")\\n    if (\\n            url_path.startswith(\\\"/auth\\\") or\\n            url_path.startswith(\\\"/docs\\\") or\\n            url_path.startswith(\\\"/openapi\\\") or\\n            url_path.startswith(\\\"/upload\\\") or\\n            request.method == 'OPTIONS'\\n    ):\\n        response = await call_next(request)\\n        return response\\n\\n    if 'Authorization' not in request.headers:\\n        return JSONResponse(\\n            status_code=401,\\n            content={\\n                'detail': 'Token is empty',\\n            }\\n        )\\n\\n    access_token = request.headers['Authorization'].replace('Bearer ', '')\\n\\n    auth_service = get_auth_service()\\n    try:\\n        # user_id = UUID('')\\n        user_id = await auth_service.get_user_id_from_jwt(access_token)\\n    except Exception as e:\\n        logging.getLogger(__name__).error(f\\\"fuuuck {access_token}\\\", exc_info=True)\\n        code, detail = 401, 'Unknown authorization exception'\\n        match e:\\n            case InvalidTokenException():\\n                detail = 'Token is invalid'\\n            case ExpiredTokenException():\\n                detail = 'Token is expired'\\n            case NotFoundException():\\n                detail = 'User ID found in token does not exist'\\n            case BannedUserException():\\n                detail = \\\"You're banned\\\"\\n                code = 403\\n\\n        return JSONResponse(\\n            status_code=code,\\n            content={\\n                'detail': detail,\\n            }\\n        )\\n\\n    request.scope['x_user_id'] = user_id\\n    try:\\n        response = await call_next(request)\\n        return response\\n    except PermissionException as e:\\n        return JSONResponse(\\n            status_code=403,\\n            content={\\n                'detail': \\\"You're lacking permissions to do this.\\\",\\n            }\\n        )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/user.py\",\n    \"content\": \"from abstractions.repositories.user import UserRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.repositories.user import UserRepository\\n\\n\\ndef get_user_repository() -> UserRepositoryInterface:\\n    return UserRepository(\\n        session_maker=get_session_maker()\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/order.py\",\n    \"content\": \"from abstractions.repositories import OrderRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.repositories.order import OrderRepository\\n\\n\\ndef get_order_repository() -> OrderRepositoryInterface:\\n    return OrderRepository(\\n        session_maker=get_session_maker()\\n    )\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/review.py\",\n    \"content\": \"from abstractions.repositories import ReviewRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.repositories.review import ReviewRepository\\n\\n\\ndef get_review_repository() -> ReviewRepositoryInterface:\\n    return ReviewRepository(\\n        session_maker=get_session_maker()\\n    )\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/session_maker.py\",\n    \"content\": \"from sqlalchemy.ext.asyncio import async_sessionmaker\\n\\nfrom infrastructure import session_maker\\n\\n\\ndef get_session_maker() -> async_sessionmaker:\\n    return session_maker\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/user_push.py\",\n    \"content\": \"from abstractions.repositories.user_push import UserPushRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.repositories.user_push import UserPushRepository\\n\\n\\ndef get_user_push_repository() -> UserPushRepositoryInterface:\\n    return UserPushRepository(\\n        session_maker=get_session_maker(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/moderator_review.py\",\n    \"content\": \"from abstractions.repositories.moderator_review import ModeratorReviewRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.repositories.moderator_review import ModeratorReviewRepository\\n\\n\\ndef get_moderator_review_repository() -> ModeratorReviewRepositoryInterface:\\n    return ModeratorReviewRepository(\\n        session_maker=get_session_maker(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/product.py\",\n    \"content\": \"from abstractions.repositories import ProductRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.repositories.product import ProductRepository\\n\\n\\ndef get_product_repository() -> ProductRepositoryInterface:\\n    return ProductRepository(\\n        session_maker=get_session_maker()\\n    )\"\n  },\n  {\n    \"path\": \"backend/dependencies/repositories/push.py\",\n    \"content\": \"from abstractions.repositories.push import PushRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.repositories.push import PushRepository\\n\\n\\ndef get_push_repository() -> PushRepositoryInterface:\\n    return PushRepository(\\n        session_maker=get_session_maker(),\\n    )\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/user.py\",\n    \"content\": \"from abstractions.repositories import ProductRepositoryInterface\\nfrom abstractions.services import UserServiceInterface\\nfrom dependencies.repositories.product import get_product_repository\\nfrom dependencies.repositories.user import get_user_repository\\nfrom dependencies.services.notification import get_notification_service\\nfrom services.user import UserService\\nfrom settings import settings\\n\\n\\ndef get_user_service() -> UserServiceInterface:\\n    return UserService(\\n        user_repository=get_user_repository(),\\n        notification_service=get_notification_service(),\\n        bot_username=settings.bot.username,\\n        product_repository=get_product_repository(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/upload.py\",\n    \"content\": \"from abstractions.services.upload import UploadServiceInterface\\nfrom services.upload import UploadService\\n\\n\\ndef get_upload_service() -> UploadServiceInterface:\\n    return UploadService(\\n\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/notification.py\",\n    \"content\": \"from abstractions.services.notification import NotificationServiceInterface\\nfrom dependencies.repositories.order import get_order_repository\\nfrom dependencies.repositories.push import get_push_repository\\nfrom dependencies.repositories.user import get_user_repository\\nfrom dependencies.repositories.user_push import get_user_push_repository\\nfrom services.notifications import NotificationService\\nfrom settings import settings\\n\\n\\ndef get_notification_service() -> NotificationServiceInterface:\\n    return NotificationService(\\n        token=settings.bot.token,\\n        users_repository=get_user_repository(),\\n        orders_repository=get_order_repository(),\\n        push_repository=get_push_repository(),\\n        user_push_repository=get_user_push_repository(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/order.py\",\n    \"content\": \"from abstractions.services import OrderServiceInterface\\nfrom dependencies.repositories.order import get_order_repository\\nfrom dependencies.repositories.product import get_product_repository\\nfrom dependencies.services.notification import get_notification_service\\nfrom dependencies.repositories.user import get_user_repository\\nfrom services.order import OrderService\\n\\n\\ndef get_order_service() -> OrderServiceInterface:\\n    return OrderService(\\n        order_repository=get_order_repository(),\\n        product_repository=get_product_repository(),\\n        notification_service=get_notification_service(),\\n        user_repository=get_user_repository()\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/review.py\",\n    \"content\": \"from abstractions.services import ReviewServiceInterface\\nfrom dependencies.repositories.review import get_review_repository\\nfrom services.review import ReviewService\\n\\n\\ndef get_review_service() -> ReviewServiceInterface:\\n    return ReviewService(\\n        review_repository=get_review_repository()\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/moderator.py\",\n    \"content\": \"from abstractions.services.moderator import ModeratorServiceInterface\\nfrom dependencies.repositories.moderator_review import get_moderator_review_repository\\nfrom dependencies.repositories.product import get_product_repository\\nfrom dependencies.services.notification import get_notification_service\\nfrom dependencies.services.user import get_user_service\\nfrom services.moderator import ModeratorService\\n\\n\\ndef get_moderator_service() -> ModeratorServiceInterface:\\n    return ModeratorService(\\n        products_repository=get_product_repository(),\\n        user_service=get_user_service(),\\n        moderator_review_repository=get_moderator_review_repository(),\\n        notification_service=get_notification_service(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/permissions.py\",\n    \"content\": \"from abstractions.services.permissions import PermissionServiceInterface\\nfrom dependencies.services.user import get_user_service\\nfrom services.permission import PermissionService\\n\\n\\ndef get_permission_service() -> PermissionServiceInterface:\\n    return PermissionService(\\n        user_service=get_user_service(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/product.py\",\n    \"content\": \"from abstractions.services import ProductServiceInterface\\nfrom dependencies.repositories.product import get_product_repository\\nfrom dependencies.repositories.user import get_user_repository\\nfrom services.product import ProductService\\n\\n\\ndef get_product_service() -> ProductServiceInterface:\\n    return ProductService(\\n        product_repository=get_product_repository(),\\n        user_repository=get_user_repository(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/auth/service.py\",\n    \"content\": \"from abstractions.services.auth.service import AuthServiceInterface\\nfrom dependencies.services.auth.token import get_token_service\\nfrom dependencies.services.user import get_user_service\\nfrom services.auth.service import AuthService\\nfrom settings import settings\\n\\n\\ndef get_auth_service() -> AuthServiceInterface:\\n    return AuthService(\\n        bot_token=settings.bot.token,\\n        token_service=get_token_service(),\\n        user_service=get_user_service()\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/auth/token.py\",\n    \"content\": \"from abstractions.services.auth.tokens import TokenServiceInterface\\nfrom services.auth.tokens import TokenService\\nfrom settings import settings\\n\\n\\ndef get_token_service() -> TokenServiceInterface:\\n    return TokenService(\\n        jwt_settings=settings.jwt\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/dependencies/services/auth/__init__.py\",\n    \"content\": \"from .service import get_auth_service\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/user.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto import CreateUserDTO, UpdateUserDTO\\nfrom domain.models import User\\n\\n\\nclass UserRepositoryInterface(\\n    CRUDRepositoryInterface[User, CreateUserDTO, UpdateUserDTO],\\n    ABC,\\n):\\n    @abstractmethod\\n    async def get_by_telegram_id(self, telegram_id: str) -> Optional[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\\n        ...\\n\\n    @abstractmethod\\n    async def get_moderators(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_sellers(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_clients(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_banned(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def become_seller(self, user_id: UUID):\\n        ...\\n\\n    @abstractmethod\\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/order.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto import CreateOrderDTO, UpdateOrderDTO\\nfrom domain.models.order import Order\\n\\n\\nclass OrderRepositoryInterface(\\n    CRUDRepositoryInterface[Order, CreateOrderDTO, UpdateOrderDTO],\\n    ABC):\\n\\n    @abstractmethod\\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_user_report(self, order_id: UUID):\\n        ...\\n\\n    @abstractmethod\\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\\n        ...\\n\\n\\n\\n\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/__init__.py\",\n    \"content\": \"from .crud import CRUDRepositoryInterface\\nfrom .user import UserRepositoryInterface\\nfrom .order import OrderRepositoryInterface\\nfrom .review import ReviewRepositoryInterface\\nfrom .product import ProductRepositoryInterface\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/review.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\\nfrom domain.models.review import Review\\n\\n\\nclass ReviewRepositoryInterface(\\n    CRUDRepositoryInterface[Review, CreateReviewDTO, UpdateReviewDTO],\\n    ABC):\\n\\n    @abstractmethod\\n    async def get_reviews_by_product(self, product_id: UUID) -> List[Review]:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/user_push.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\\nfrom domain.models.user_push import UserPush\\nfrom infrastructure.enums.push_status import PushStatus\\n\\n\\nclass UserPushRepositoryInterface(\\n    CRUDRepositoryInterface[UserPush, CreateUserPushDTO, UpdateUserPushDTO],\\n    ABC,\\n):\\n    @abstractmethod\\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\\n        ...\\n\\n    @abstractmethod\\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/moderator_review.py\",\n    \"content\": \"from abc import ABC\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto.moderator_review import CreateModeratorReviewDTO, UpdateModeratorReviewDTO\\nfrom domain.models.moderator_review import ModeratorReview\\n\\n\\nclass ModeratorReviewRepositoryInterface(\\n    CRUDRepositoryInterface[ModeratorReview, CreateModeratorReviewDTO, UpdateModeratorReviewDTO],\\n    ABC,\\n):\\n    ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/product.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto import CreateProductDTO, UpdateProductDTO\\nfrom domain.models import Product\\n\\n\\nclass ProductRepositoryInterface(\\n    CRUDRepositoryInterface[Product, CreateProductDTO, UpdateProductDTO],\\n    ABC,\\n):\\n    # @abstractmethod\\n    # async def create(self, obj: CreateProductDTO) -> UUID:\\n    #     ...\\n\\n    @abstractmethod\\n    async def get_by_article(self, article: str) -> Optional[Product]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_by_seller(self, seller_id: UUID) -> Optional[list[Product]]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_products_to_review(self) -> list[Product]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_active_products(self, limit: int = 100, offset: int = 9, search: Optional[str] = None) -> list[Product]:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/crud.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom uuid import UUID\\n\\n\\nclass CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO](ABC):\\n    @abstractmethod\\n    async def create(self, obj: CreateDTO) -> None:\\n        ...\\n    \\n    @abstractmethod\\n    async def create_many(self, objs: list[CreateDTO]) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def get(self, obj_id: UUID) -> Model:\\n        ...\\n\\n    @abstractmethod\\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def delete(self, obj_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def get_all(self, limit: int = 100, offset: int = 0) -> list[Model]:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/repositories/push.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\\nfrom domain.models import Push\\n\\n\\nclass PushRepositoryInterface(\\n    CRUDRepositoryInterface[Push, CreatePushDTO, UpdatePushDTO],\\n    ABC,\\n):\\n    ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/user.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\\nfrom domain.models.user import User\\n\\n\\nclass UserServiceInterface(ABC):\\n    @abstractmethod\\n    async def create_user(self, dto: CreateUserDTO) -> User:\\n        \\\"\\\"\\\"Зарегистрировать нового пользователя и вернуть его модель.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_user(self, user_id: UUID) -> User:\\n        \\\"\\\"\\\"Получить данные пользователя по его идентификатору.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def update_user(self, user_id: UUID, dto: UpdateUserDTO) -> None:\\n        \\\"\\\"\\\"Обновить данные пользователя.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def delete_user(self, user_id: UUID) -> None:\\n        \\\"\\\"\\\"Удалить пользователя.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_users(self, limit: int = 100, offset: int = 0) -> List[User]:\\n        \\\"\\\"\\\"Вернуть список пользователей с пагинацией.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\\n        ...\\n\\n    @abstractmethod\\n    async def get_user_products(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def ban(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def unban(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def promote_user(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def demote_user(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def get_banned(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_sellers(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_clients(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_moderators(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def increase_balance(self, user_id: UUID, balance_sum: int):\\n        ...\\n\\n    @abstractmethod\\n    async def use_discount(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def get_invite_link(self, user_id: UUID) -> str:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/upload.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\n\\nfrom fastapi import UploadFile\\n\\n\\nclass UploadServiceInterface(ABC):\\n    @abstractmethod\\n    async def upload(self, image: UploadFile) -> str:\\n        ...\\n\\n    @abstractmethod\\n    def get_file_path(self, filename: str) -> str:\\n        ...\\n\\n    @abstractmethod\\n    async def initialize(self) -> None:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/notification.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom uuid import UUID\\n\\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\\nfrom domain.models import Push\\n\\n\\nclass NotificationServiceInterface(ABC):\\n    @abstractmethod\\n    async def send_cashback_paid(self, order_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def send_balance_increased(self, user_id: UUID, amount: int) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def create_push(self, push: CreatePushDTO) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def get_pushes(self) -> list[Push]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_push(self, push_id: UUID) -> Push:\\n        ...\\n\\n    @abstractmethod\\n    async def update_push(self, push_id: UUID, push: UpdatePushDTO) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def delete_push(self, push_id: UUID) -> None:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/order.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom domain.dto.order import CreateOrderDTO, UpdateOrderDTO\\nfrom domain.models.order import Order\\nfrom domain.responses.order_report import OrderReport\\n\\n\\nclass OrderServiceInterface(ABC):\\n    @abstractmethod\\n    async def create_order(self, order_dto: CreateOrderDTO) -> UUID:\\n        \\\"\\\"\\\"\\n        Создаёт новый заказ и возвращает его доменную модель.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_order(self, order_id: UUID) -> Order:\\n        \\\"\\\"\\\"\\n        Возвращает заказ по его ID.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def update_order(self, order_id: UUID, update_dto: UpdateOrderDTO) -> None:\\n        \\\"\\\"\\\"\\n        Обновляет данные заказа с указанным ID.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def delete_order(self, order_id: UUID) -> None:\\n        \\\"\\\"\\\"\\n        Удаляет заказ с указанным ID.\\n        \\\"\\\"\\\"\\n\\n    @abstractmethod\\n    async def get_orders(self, limit: int = 100, offset: int = 0) -> None:\\n        \\\"\\\"\\\"\\n        Удаляет заказ с указанным ID.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\\n        \\\"\\\"\\\"\\n        Возвращает список заказов для указанного пользователя.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_user_report(self, order_id: UUID) -> OrderReport:\\n        ...\\n\\n    @abstractmethod\\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\\n        ...\\n\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/__init__.py\",\n    \"content\": \"from .user import UserServiceInterface\\nfrom .product import ProductServiceInterface\\nfrom .review import ReviewServiceInterface\\nfrom .order import OrderServiceInterface\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/review.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom domain.dto.review import CreateReviewDTO, UpdateReviewDTO\\nfrom domain.models.review import Review\\n\\n\\nclass ReviewServiceInterface(ABC):\\n    @abstractmethod\\n    async def create_review(self, review_dto: CreateReviewDTO) -> Review:\\n        \\\"\\\"\\\"\\n        Добавляет новый отзыв и возвращает его доменную модель.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_review(self, review_id: UUID) -> Review:\\n        \\\"\\\"\\\"\\n        Добавляет новый отзыв и возвращает его доменную модель.\\n        \\\"\\\"\\\"\\n        ...\\n    @abstractmethod\\n    async def get_reviews(self) -> list[Review]:\\n        \\\"\\\"\\\"\\n        Добавляет новый отзыв и возвращает его доменную модель.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def update_review(self, review_id: UUID, update_dto: UpdateReviewDTO) -> None:\\n        \\\"\\\"\\\"\\n        Обновляет отзыв с заданным ID.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def delete_review(self, review_id: UUID) -> None:\\n        \\\"\\\"\\\"\\n        Удаляет отзыв с заданным ID.\\n        \\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def list_reviews_by_product(self, product_id: UUID) -> List[Review]:\\n        \\\"\\\"\\\"\\n        Возвращает список отзывов для указанного продукта.\\n        \\\"\\\"\\\"\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/moderator.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom uuid import UUID\\n\\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\\nfrom domain.models import Product, User, Push\\nfrom routes.requests.moderator import UpdateProductStatusRequest\\n\\n\\nclass ModeratorServiceInterface(ABC):\\n    @abstractmethod\\n    async def get_products(self) -> list[Product]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_product(self, product_id: UUID) -> Product:\\n        ...\\n\\n    @abstractmethod\\n    async def get_products_to_review(self) -> list[Product]:\\n        ...\\n\\n    @abstractmethod\\n    async def review_product(\\n            self,\\n            product_id: UUID,\\n            moderator_id: UUID,\\n            request: UpdateProductStatusRequest,\\n    ) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def get_users(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_user(self, user_id: UUID) -> User:\\n        ...\\n\\n    @abstractmethod\\n    async def get_moderators(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_sellers(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_clients(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_banned(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def ban_user(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def unban_user(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def promote_user(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def demote_user(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def create_push(self, push: CreatePushDTO) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def get_pushes(self) -> list[Push]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_push(self, push_id: UUID) -> Push:\\n        ...\\n\\n    @abstractmethod\\n    async def update_push(self, push_id: UUID, update_dto: UpdatePushDTO) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def delete_push(self, push_id: UUID) -> None:\\n        ...\\n\\n    async def use_discount(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\\n        ...\\n\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/permissions.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom uuid import UUID\\n\\n\\nclass PermissionServiceInterface(ABC):\\n    @abstractmethod\\n    async def is_moderator(self, user_id: UUID) -> None:\\n        ...\\n\\n    @abstractmethod\\n    async def is_admin(self, user_id: UUID) -> None:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/product.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import List, Optional\\nfrom uuid import UUID\\n\\nfrom domain.dto.product import CreateProductDTO, UpdateProductDTO\\nfrom domain.models.product import Product\\n\\n\\nclass ProductServiceInterface(ABC):\\n    @abstractmethod\\n    async def create_product(self, dto: CreateProductDTO) -> UUID:\\n        \\\"\\\"\\\"Создать новый товар и вернуть его модель.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_product(self, product_id: UUID) -> Product:\\n        \\\"\\\"\\\"Получить данные товара по его идентификатору.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def update_product(self, product_id: UUID, dto: UpdateProductDTO) -> None:\\n        \\\"\\\"\\\"Обновить данные товара.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def delete_product(self, product_id: UUID) -> None:\\n        \\\"\\\"\\\"Удалить товар.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_products(self, limit: int = 100, offset: int = 0) -> List[Product]:\\n        \\\"\\\"\\\"Вернуть список товаров с пагинацией.\\\"\\\"\\\"\\n        ...\\n\\n    @abstractmethod\\n    async def get_by_article(self, article: str) -> Product:\\n        ...\\n\\n    @abstractmethod\\n    async def get_by_seller(self, seller_id: UUID) -> Optional[list[Product]]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_active_products(self, limit: int = 100, offset: int = 0, search: Optional[str] = None) -> list[Product]:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/auth/service.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom domain.responses.auth import AuthTokens\\n\\n\\nclass AuthServiceInterface(ABC):\\n    @abstractmethod\\n    async def get_user_id_from_jwt(self, token: str) -> UUID:\\n        ...\\n\\n    @abstractmethod\\n    async def create_token(self, init_data: str, ref_user_id: Optional[UUID] = None) -> AuthTokens:\\n        ...\\n\\n    @abstractmethod\\n    async def refresh_token(self, refresh_token: str) -> AuthTokens:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/auth/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/abstractions/services/auth/tokens.py\",\n    \"content\": \"import logging\\nfrom abc import ABC, abstractmethod\\n\\nfrom domain.responses.auth import AuthTokens\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\nclass TokenServiceInterface(ABC):\\n    @abstractmethod\\n    def get_token_payload(self, token: str) -> dict:\\n        ...\\n\\n    @abstractmethod\\n    def create_auth_token(self, user_id: str) -> AuthTokens:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/__init__.py\",\n    \"content\": \"\\nfrom sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker\\n\\nfrom settings import settings\\n\\n__all__ = [\\n    \\\"session_maker\\\",\\n]\\n\\n\\nengine = create_async_engine(settings.db.url, echo=False, pool_recycle=1800, pool_timeout=30)\\nsession_maker = async_sessionmaker(engine, expire_on_commit=False)\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/entities.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional, List\\nfrom uuid import UUID as pyUUID\\n\\nfrom infrastructure.enums.category import Category\\nfrom infrastructure.enums.order_status import OrderStatus\\nfrom infrastructure.enums.payout_time import PayoutTime\\nfrom infrastructure.enums.product_status import ProductStatus\\nfrom infrastructure.enums.push_status import PushStatus\\nfrom infrastructure.enums.user_role import UserRole\\nfrom sqlalchemy import DateTime, ForeignKey, UUID, BigInteger, Enum\\nfrom sqlalchemy.orm import declarative_base, Mapped, mapped_column, relationship\\nfrom sqlalchemy.dialects.postgresql import TSVECTOR\\n\\nBase = declarative_base()\\n\\n\\nclass AbstractBase(Base):\\n    __abstract__ = True\\n\\n    id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True)\\n    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)\\n    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, onupdate=datetime.now)\\n\\n\\nclass Product(AbstractBase):\\n    __tablename__ = 'products'\\n\\n    name: Mapped[str]\\n    brand: Mapped[str]\\n    article: Mapped[str] = mapped_column(unique=True)\\n    category: Mapped[Category] = mapped_column(Enum(Category))\\n    key_word: Mapped[str]\\n    general_repurchases: Mapped[int]\\n    remaining_products: Mapped[int]\\n    daily_repurchases: Mapped[int]\\n    price: Mapped[float]\\n    wb_price: Mapped[float]\\n    tg: Mapped[str]\\n    payment_time: Mapped[PayoutTime] = mapped_column(Enum(PayoutTime))\\n    review_requirements: Mapped[str]\\n    requirements_agree: Mapped[bool]\\n    image_path: Mapped[Optional[str]]\\n    seller_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\\n    status: Mapped[ProductStatus] = mapped_column(Enum(ProductStatus), default=ProductStatus.CREATED)\\n\\n    reviews: Mapped[List['Review']] = relationship('Review', back_populates='product')\\n    orders: Mapped[List['Order']] = relationship('Order', back_populates='product')\\n    moderator_reviews: Mapped[list['ModeratorReview']] = relationship(\\n        'ModeratorReview',\\n        order_by=\\\"ModeratorReview.created_at\\\",\\n        back_populates='product',\\n    )\\n    search_vector: Mapped[str] = mapped_column(\\n        TSVECTOR(),\\n        nullable=True,\\n    )\\n\\n\\nclass User(AbstractBase):\\n    __tablename__ = 'users'\\n\\n    telegram_id: Mapped[Optional[int]] = mapped_column(BigInteger, unique=True)\\n    nickname: Mapped[Optional[str]]\\n    role: Mapped[UserRole] = mapped_column(Enum(UserRole))\\n    is_banned: Mapped[bool]\\n    is_seller: Mapped[bool]\\n    balance: Mapped[Optional[int]]\\n    invited_by: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('users.id'))\\n    has_discount: Mapped[Optional[bool]]\\n    referrer_bonus: Mapped[Optional[int]]\\n\\n    inviter: Mapped[Optional['User']] = relationship('User', foreign_keys=[invited_by], remote_side='User.id')\\n    user_orders: Mapped[List[\\\"Order\\\"]] = relationship(\\\"Order\\\", foreign_keys=\\\"Order.user_id\\\")\\n    seller_orders: Mapped[List[\\\"Order\\\"]] = relationship(\\\"Order\\\", foreign_keys=\\\"Order.seller_id\\\")\\n    reviews: Mapped[List[\\\"Review\\\"]] = relationship(\\\"Review\\\", back_populates=\\\"user\\\")\\n\\n\\n\\nclass Order(AbstractBase):\\n    __tablename__ = 'orders'\\n\\n    user_id: Mapped[UUID] = mapped_column(ForeignKey(\\\"users.id\\\"))\\n    product_id: Mapped[UUID] = mapped_column(ForeignKey(\\\"products.id\\\"))\\n    seller_id: Mapped[UUID] = mapped_column(ForeignKey(\\\"users.id\\\"))\\n\\n    # Чтобы отслеживать, на каком шаге сейчас заказ\\n    step: Mapped[int] = mapped_column(default=1)\\n\\n    # Шаг 1: скриншоты\\n    search_screenshot_path: Mapped[Optional[str]]\\n    cart_screenshot_path: Mapped[Optional[str]]\\n\\n    # Шаг 4: реквизиты\\n    card_number: Mapped[Optional[str]]\\n    phone_number: Mapped[Optional[str]]\\n    name: Mapped[Optional[str]]\\n    bank: Mapped[Optional[str]]\\n\\n    # Шаг 5: финальный скрин корзины\\n    final_cart_screenshot_path: Mapped[Optional[str]]\\n\\n    # Шаг 6: скрин доставки, скрин штрихкодов\\n    delivery_screenshot_path: Mapped[Optional[str]]\\n    barcodes_screenshot_path: Mapped[Optional[str]]\\n\\n    # Шаг 7: скрин отзывов, скрин электронного чека, номер чека\\n    review_screenshot_path: Mapped[Optional[str]]\\n    receipt_screenshot_path: Mapped[Optional[str]]\\n    receipt_number: Mapped[Optional[str]]\\n\\n    status: Mapped[OrderStatus] = mapped_column(Enum(OrderStatus), default=\\\"CASHBACK_NOT_PAID\\\")\\n\\n    user: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[user_id], back_populates=\\\"user_orders\\\")\\n    seller: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[seller_id], back_populates=\\\"seller_orders\\\")\\n    product: Mapped[\\\"Product\\\"] = relationship(\\\"Product\\\", foreign_keys=[product_id], back_populates=\\\"orders\\\")\\n\\n\\nclass Review(AbstractBase):\\n    __tablename__ = 'reviews'\\n\\n    user_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\\n    rating: Mapped[int]\\n    comment: Mapped[str]\\n\\n    user: Mapped['User'] = relationship('User', back_populates='reviews')\\n    product: Mapped['Product'] = relationship('Product', back_populates='reviews')\\n\\n\\nclass ModeratorReview(AbstractBase):\\n    __tablename__ = 'moderator_reviews'\\n\\n    moderator_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\\n    comment_to_seller: Mapped[Optional[str]]\\n    comment_to_moderator: Mapped[Optional[str]]\\n    status_before: Mapped[ProductStatus]\\n    status_after: Mapped[ProductStatus]\\n\\n    moderator: Mapped['User'] = relationship('User')\\n    product: Mapped['Product'] = relationship('Product', back_populates='moderator_reviews')\\n\\n\\nclass Push(AbstractBase):\\n    __tablename__ = 'pushes'\\n\\n    title: Mapped[str] = mapped_column(unique=True)\\n    text: Mapped[str]\\n    creator_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\\n    image_path: Mapped[Optional[str]]\\n\\n    button_text: Mapped[Optional[str]]\\n    button_link: Mapped[Optional[str]]\\n\\n    deleted_at: Mapped[Optional[datetime]]\\n\\n    creator: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[creator_id])\\n\\n\\nclass UserPush(AbstractBase):\\n    __tablename__ = 'user_pushes'\\n\\n    push_id: Mapped[pyUUID] = mapped_column(ForeignKey('pushes.id'))\\n    user_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\\n    sent_at: Mapped[Optional[datetime]]\\n    status: Mapped[PushStatus]\\n\\n    push: Mapped[\\\"Push\\\"] = relationship(\\\"Push\\\")\\n    user: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[user_id])\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/enums/user_role.py\",\n    \"content\": \"from enum import StrEnum\\n\\n\\nclass UserRole(StrEnum):\\n    USER = \\\"user\\\"\\n    CLIENT = \\\"client\\\"\\n    SELLER = \\\"seller\\\"\\n    MODERATOR = \\\"moderator\\\"\\n    ADMIN = \\\"admin\\\"\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/enums/payout_time.py\",\n    \"content\": \"from enum import StrEnum\\n\\nclass PayoutTime(StrEnum):\\n    AFTER_REVIEW = \\\"После отзыва\\\"\\n    AFTER_DELIVERY = \\\"После получения товара\\\"\\n    ON_15TH_DAY = \\\"На 15й день\\\"\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/enums/push_status.py\",\n    \"content\": \"from enum import StrEnum\\n\\n\\nclass PushStatus(StrEnum):\\n    PLANNED = 'planned'\\n    IN_PROGRESS = 'in_progress'\\n    DELIVERED = 'delivered'\\n    FAILED = 'failed'\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/enums/product_status.py\",\n    \"content\": \"from enum import Enum\\n\\n\\nclass ProductStatus(Enum):\\n    CREATED = \\\"created\\\"\\n    ACTIVE = \\\"active\\\"\\n    NOT_PAID = \\\"not_paid\\\"\\n    DISABLED = \\\"disabled\\\"\\n    REJECTED = \\\"rejected\\\"  # отклонен совсем\\n    ARCHIVED = \\\"archived\\\"\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/enums/order_status.py\",\n    \"content\": \"from enum import StrEnum\\n\\nclass OrderStatus(StrEnum):\\n    CASHBACK_PAID = \\\"cashback_paid\\\"\\n    CASHBACK_NOT_PAID = \\\"cashback_not_paid\\\"\\n    CANCELLED = \\\"cancelled\\\"\\n    PAYMENT_CONFIRMED = \\\"payment_confirmed\\\"\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/enums/category.py\",\n    \"content\": \"from enum import StrEnum\\n\\nclass Category(StrEnum):\\n    WOMEN = \\\"Женщинам\\\"\\n    MEN = \\\"Мужчинам\\\"\\n    SHOES = \\\"Обувь\\\"\\n    KIDS = \\\"Детям\\\"\\n    HOME = \\\"Дом\\\"\\n    NEW_YEAR = \\\"Новый год\\\"\\n    BEAUTY = \\\"Красота\\\"\\n    ACCESSORIES = \\\"Аксессуары\\\"\\n    ELECTRONICS = \\\"Электроника\\\"\\n    TOYS = \\\"Игрушки\\\"\\n    FURNITURE = \\\"Мебель\\\"\\n    ADULT = \\\"Товары для взрослых\\\"\\n    APPLIANCES = \\\"Бытовая техника\\\"\\n    PETS = \\\"Зоотовары\\\"\\n    SPORTS = \\\"Спорт\\\"\\n    AUTO = \\\"Автотовары\\\"\\n    JEWELRY = \\\"Ювелирные изделия\\\"\\n    REPAIR = \\\"Для ремонта\\\"\\n    GARDEN = \\\"Сад и дача\\\"\\n    HEALTH = \\\"Здоровье\\\"\\n    STATIONERY = \\\"Канцтовары\\\"\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/user.py\",\n    \"content\": \"import logging\\nfrom dataclasses import dataclass, field\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\n\\nfrom abstractions.repositories.user import UserRepositoryInterface\\nfrom domain.dto import CreateUserDTO, UpdateUserDTO\\nfrom domain.models import User as UserModel\\nfrom infrastructure.entities import User\\nfrom infrastructure.enums.user_role import UserRole\\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass UserRepository(\\n    AbstractSQLAlchemyRepository[User, UserModel, CreateUserDTO, UpdateUserDTO],\\n    UserRepositoryInterface\\n):\\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\\n        'inviter': None,\\n    })\\n\\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                user = await session.get(self.entity, user_id)\\n                user.referrer_bonus += bonus\\n\\n    async def get_moderators(self) -> list[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.role == UserRole.MODERATOR)\\n            )\\n\\n            result = result.scalars().all()\\n\\n        return [self.entity_to_model(x) for x in result]\\n\\n    async def get_sellers(self) -> list[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.role == UserRole.SELLER)\\n            )\\n\\n            result = result.scalars().all()\\n\\n        return [self.entity_to_model(x) for x in result]\\n\\n    async def get_clients(self) -> list[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.role == UserRole.CLIENT)\\n            )\\n\\n            result = result.scalars().all()\\n\\n        return [self.entity_to_model(x) for x in result]\\n\\n    async def get_banned(self) -> list[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.is_banned == True)\\n            )\\n\\n            result = result.scalars().all()\\n\\n        return [self.entity_to_model(x) for x in result]\\n\\n    async def get_by_telegram_id(self, telegram_id: int) -> Optional[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.telegram_id == telegram_id)\\n                .options(*self.options)\\n            )\\n            user = result.unique().scalars().first()\\n        if user:\\n            return self.entity_to_model(user)\\n\\n        return None\\n\\n    async def become_seller(self, user_id: UUID):\\n        async with self.session_maker() as session:\\n            user = await session.get(self.entity, user_id)\\n            async with session.begin():\\n                user.is_seller = True\\n\\n    async def ensure_user(self, dto: CreateUserDTO) -> UserModel:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.telegram_id == dto.telegram_id)\\n            )\\n\\n            user = result.scalars().one_or_none()\\n\\n        if not user:\\n            await self.create(dto)\\n\\n        return await self.get_by_telegram_id(dto.telegram_id)\\n\\n    def create_dto_to_entity(self, dto: CreateUserDTO) -> User:\\n        return User(\\n            id=dto.id,\\n            telegram_id=dto.telegram_id,\\n            nickname=dto.nickname,\\n            is_banned=False,\\n            is_seller=False,\\n            role=UserRole(dto.role),\\n            balance=0,\\n            invited_by=dto.invited_by,\\n            referrer_bonus=0,\\n            has_discount=dto.invited_by is not None,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at\\n        )\\n\\n    def entity_to_model(self, entity: User) -> UserModel:\\n        def map_inviter(inviter: User) -> UserModel:\\n            inviter.inviter = None\\n            return UserModel.model_validate(inviter)\\n\\n        inviter = self._get_relation(entity, 'inviter')\\n\\n        logger.info(f'inviter1 {inviter}')\\n\\n        return UserModel(\\n            id=entity.id,\\n            telegram_id=entity.telegram_id,\\n            nickname=entity.nickname,\\n            role=entity.role,\\n            balance=entity.balance,\\n            is_banned=entity.is_banned,\\n            is_seller=entity.is_seller,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at,\\n            invited_by=entity.invited_by,\\n            has_discount=entity.has_discount,\\n            referrer_bonus=entity.referrer_bonus,\\n            inviter=map_inviter(inviter) if inviter else None,\\n        )\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/order.py\",\n    \"content\": \"import logging\\nfrom dataclasses import field, dataclass\\nfrom typing import List, Optional\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\nfrom sqlalchemy.orm import joinedload\\n\\nfrom abstractions.repositories import OrderRepositoryInterface\\nfrom domain.dto import CreateOrderDTO, UpdateOrderDTO\\nfrom domain.models import Order, Product as ProductModel, User\\nfrom domain.models import User as UserModel\\nfrom domain.models.order import Order as OrderModel\\nfrom domain.responses.order_report import OrderReport\\nfrom infrastructure.entities import Order, Product\\nfrom infrastructure.enums.order_status import OrderStatus\\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass OrderRepository(\\n    AbstractSQLAlchemyRepository[Order, OrderModel, CreateOrderDTO, UpdateOrderDTO],\\n    OrderRepositoryInterface,\\n):\\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\\n        'product': None,\\n        'user': None\\n    })\\n\\n    def create_dto_to_entity(self, dto: CreateOrderDTO) -> Order:\\n        return Order(\\n            id=dto.id,\\n            user_id=dto.user_id,\\n            product_id=dto.product_id,\\n            seller_id=dto.seller_id,\\n            step=dto.step,\\n            search_screenshot_path=dto.search_screenshot_path,\\n            cart_screenshot_path=dto.cart_screenshot_path,\\n            card_number=dto.card_number,\\n            phone_number=dto.phone_number,\\n            name=dto.name,\\n            bank=dto.bank,\\n            final_cart_screenshot_path=dto.final_cart_screenshot_path,\\n            delivery_screenshot_path=dto.delivery_screenshot_path,\\n            barcodes_screenshot_path=dto.barcodes_screenshot_path,\\n            review_screenshot_path=dto.review_screenshot_path,\\n            receipt_screenshot_path=dto.receipt_screenshot_path,\\n            receipt_number=dto.receipt_number,\\n            status=dto.status,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at\\n        )\\n\\n    def entity_to_model(self, entity: Order) -> OrderModel:\\n        def _map_product(product: Product) -> ProductModel:\\n            return ProductModel(\\n                id=product.id,\\n                seller_id=product.seller_id,\\n                name=product.name,\\n                brand=product.brand,\\n                article=product.article,\\n                category=product.category,\\n                key_word=product.key_word,\\n                general_repurchases=product.general_repurchases,\\n                remaining_products=product.remaining_products,\\n                daily_repurchases=product.daily_repurchases,\\n                price=product.price,\\n                wb_price=product.wb_price,\\n                tg=product.tg,\\n                status=product.status,\\n                payment_time=product.payment_time,\\n                review_requirements=product.review_requirements,\\n                requirements_agree=product.requirements_agree,\\n                image_path=product.image_path,\\n                created_at=product.created_at,\\n                updated_at=product.updated_at\\n            )\\n\\n        def _map_user(user: User) -> UserModel:\\n            return UserModel(\\n                id=user.id,\\n                telegram_id=user.telegram_id,\\n                nickname=user.nickname,\\n                role=user.role,\\n                is_banned=user.is_banned,\\n                balance=user.balance,\\n                is_seller=user.is_seller,\\n                created_at=user.created_at,\\n                updated_at=user.updated_at\\n            )\\n\\n        return OrderModel(\\n            id=entity.id,\\n            user_id=entity.user_id,\\n            product_id=entity.product_id,\\n            step=entity.step,\\n            search_screenshot_path=entity.search_screenshot_path,\\n            cart_screenshot_path=entity.cart_screenshot_path,\\n            card_number=entity.card_number,\\n            phone_number=entity.phone_number,\\n            name=entity.name,\\n            bank=entity.bank,\\n            final_cart_screenshot_path=entity.final_cart_screenshot_path,\\n            delivery_screenshot_path=entity.delivery_screenshot_path,\\n            barcodes_screenshot_path=entity.barcodes_screenshot_path,\\n            review_screenshot_path=entity.review_screenshot_path,\\n            receipt_screenshot_path=entity.receipt_screenshot_path,\\n            receipt_number=entity.receipt_number,\\n            status=entity.status,\\n            seller_id=entity.seller_id,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at,\\n            product=_map_product(entity.product),\\n            user=_map_user(entity.user),\\n            seller=_map_user(entity.user)\\n        )\\n\\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.user_id == user_id)\\n                .options(*self.options)\\n            )\\n            orders = result.scalars().all()\\n            return [self.entity_to_model(order) for order in orders]\\n\\n\\n    async def get_user_report(self, order_id: UUID) -> Order:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.id == order_id)\\n                .options(*self.options)\\n            )\\n            order = result.scalars().first()\\n            return self.entity_to_model(order)\\n\\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.seller_id == seller_id, self.entity.step == 7)\\n                .options(*self.options)\\n            )\\n            orders = result.scalars().all()\\n            logger.info(f\\\"orders found {len(orders)} orders for seller {seller_id}\\\")\\n            logger.info([x.__dict__ for x in orders])\\n            return [self.entity_to_model(order) for order in orders]\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/review.py\",\n    \"content\": \"from typing import List\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\n\\nfrom abstractions.repositories import ReviewRepositoryInterface\\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\\nfrom domain.models import Review as ReviewModel\\nfrom infrastructure.entities import Review\\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\n\\nclass ReviewRepository(AbstractSQLAlchemyRepository[Review, Review, CreateReviewDTO, UpdateReviewDTO],\\n                       ReviewRepositoryInterface):\\n\\n    def create_dto_to_entity(self, dto: CreateReviewDTO) -> Review:\\n        return Review(\\n            id=dto.id,\\n            user_id=dto.user_id,\\n            product_id=dto.product_id,\\n            rating=dto.rating,\\n            comment=dto.comment,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at\\n        )\\n\\n    def entity_to_model(self, entity: Review) -> ReviewModel:\\n        return ReviewModel(\\n            id=entity.id,\\n            user_id=entity.user_id,\\n            product_id=entity.product_id,\\n            rating=entity.rating,\\n            comment=entity.comment,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at\\n        )\\n\\n    async def get_reviews_by_product(self, product_id: UUID) -> List[Review]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity).where(self.entity.product_id == product_id)\\n            )\\n            reviews = result.scalars().all()\\n            return [self.entity_to_model(review) for review in reviews]\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/user_push.py\",\n    \"content\": \"from dataclasses import field, dataclass\\nfrom datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\n\\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\\nfrom domain.models import UserPush as UserPushModel, User as UserModel, Push as PushModel\\nfrom infrastructure.entities import UserPush, User, Push\\nfrom infrastructure.enums.push_status import PushStatus\\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\n@dataclass\\nclass UserPushRepository(\\n    AbstractSQLAlchemyRepository[UserPush, UserPushModel, CreateUserPushDTO, UpdateUserPushDTO],\\n    UserPushRepositoryInterface\\n):\\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\\n        'user': None,\\n        'push': None,\\n    })\\n\\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                user_push = await session.get(self.entity, user_push_id)\\n                user_push.status = status\\n                if sent_at:\\n                    user_push.sent_at = sent_at\\n\\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\\n        async with self.session_maker() as session:\\n            res = await session.execute(\\n                select(self.entity.status == PushStatus.PLANNED)\\n                .options(*self.options)\\n                .order_by(self.entity.created_at)\\n                .limit(size)\\n            )\\n            res = res.unique().scalars().all()\\n\\n        return [self.entity_to_model(x) for x in res]  # noqa\\n\\n    def create_dto_to_entity(self, dto: CreateUserPushDTO) -> UserPush:\\n        return UserPush(\\n            id=dto.id,\\n            push_id=dto.push_id,\\n            user_id=dto.user_id,\\n            sent_at=None,\\n            status=PushStatus.PLANNED,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at\\n        )\\n\\n    def entity_to_model(self, entity: UserPush) -> UserPushModel:\\n        def _map_user(user: User) -> UserModel:\\n            return UserModel(\\n                id=user.id,\\n                telegram_id=user.telegram_id,\\n                nickname=user.nickname,\\n                role=user.role,\\n                balance=user.balance,\\n                is_banned=user.is_banned,\\n                is_seller=user.is_seller,\\n                created_at=user.created_at,\\n                updated_at=user.updated_at,\\n            )\\n\\n        def _map_push(push: Push) -> PushModel:\\n            return PushModel(\\n                id=push.id,\\n                title=push.title,\\n                text=push.text,\\n                creator_id=push.creator_id,\\n                image_path=push.image_path,\\n                created_at=push.created_at,\\n                updated_at=push.updated_at\\n            )\\n\\n        return UserPushModel(\\n            id=entity.id,\\n            push_id=entity.push_id,\\n            user_id=entity.user_id,\\n            sent_at=entity.sent_at,\\n            status=entity.status,\\n            user=_map_user(entity.user) if entity.user else None,\\n            push=_map_push(entity.push) if entity.push else None,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at\\n        )\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/sqlalchemy.py\",\n    \"content\": \"import logging\\nfrom abc import abstractmethod\\nfrom dataclasses import dataclass, field\\nfrom typing import Type, Optional, Any\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\nfrom sqlalchemy.exc import NoResultFound, MissingGreenlet\\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\\nfrom sqlalchemy.orm import joinedload, InstrumentedAttribute\\nfrom sqlalchemy.orm.exc import DetachedInstanceError\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom infrastructure.repositories.exceptions import NotFoundException\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass AbstractSQLAlchemyRepository[Entity, Model, CreateDTO, UpdateDTO](\\n    CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO]\\n):\\n    session_maker: async_sessionmaker\\n\\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=dict)\\n    options: list = field(default_factory=list)\\n\\n    def __post_init__(self):\\n        self.entity: Type[Entity] = self.__orig_bases__[0].__args__[0]  # noqa\\n        self._set_lazy_fields()\\n\\n    def _set_lazy_fields(self):\\n        if not self.joined_fields:\\n            return\\n\\n        def convert_to_nested_dict(fields):\\n            return {field: {} for field in (fields or [])}\\n\\n        def get_associated_entity_class(attr_field):\\n            \\\"\\\"\\\"\\n            Extract the associated entity class from an InstrumentedAttribute.\\n            \\\"\\\"\\\"\\n            if hasattr(attr_field, \\\"comparator\\\") and hasattr(attr_field.comparator, \\\"prop\\\"):\\n                relationship_prop = attr_field.comparator.prop\\n                if hasattr(relationship_prop, \\\"mapper\\\"):\\n                    return relationship_prop.mapper.entity\\n            return None\\n\\n        def build_joinedload(attr_field, subfields, depth=0):\\n            \\\"\\\"\\\"\\n            Recursively build joinedload options for nested relationships.\\n            \\\"\\\"\\\"\\n            associated_entity = get_associated_entity_class(attr_field)\\n            if not associated_entity:\\n                raise ValueError(f\\\"Cannot determine associated entity class for attribute {attr_field}\\\")\\n\\n            loader = joinedload(attr_field)\\n            for subfield, nested_subfields in subfields.items():\\n                nested_attr_field = getattr(associated_entity, subfield, None)\\n                if nested_attr_field is None:\\n                    raise ValueError(f\\\"{subfield} is not a valid attribute of {associated_entity}\\\")\\n\\n                subloader = build_joinedload(nested_attr_field, nested_subfields, depth + 1)\\n                loader = loader.options(subloader)\\n            return loader\\n\\n        # Convert self.joined_fields to nested dictionaries if not already\\n        joined_fields = {}\\n        for field in self.joined_fields:\\n            joined_fields[field] = convert_to_nested_dict(self.joined_fields[field])\\n\\n        options_to_add = []\\n        for attr, subfields in joined_fields.items():\\n            attr_field: InstrumentedAttribute = getattr(self.entity, attr)\\n            if attr_field.comparator.prop.uselist:\\n                loader = build_joinedload(attr_field, subfields or {})\\n                options_to_add.append(loader)\\n            else:\\n                options_to_add.append(joinedload(attr_field))\\n\\n        self.options.extend(options_to_add)\\n\\n    async def create(self, obj: CreateDTO) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                session.add(self.create_dto_to_entity(obj))\\n\\n    async def create_many(self, objs: list[CreateDTO]) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                session.add_all([self.create_dto_to_entity(obj) for obj in objs])\\n\\n    async def get(self, obj_id: UUID) -> Model:\\n        async with self.session_maker() as session:\\n            try:\\n                if self.options:\\n                    res = await session.execute(\\n                        select(self.entity)\\n                        .where(self.entity.id == obj_id)\\n                        .options(*self.options)\\n                    )\\n                    obj = res.unique().scalars().one()\\n                else:\\n                    obj = await session.get(self.entity, obj_id)\\n                return self.entity_to_model(obj) if obj else None\\n            except NoResultFound:\\n                raise NotFoundException\\n\\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                entity = await session.get(self.entity, obj_id)\\n                for key, value in obj.model_dump(exclude_unset=True).items():\\n                    setattr(entity, key, value)\\n\\n    async def delete(self, obj_id: UUID) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                obj = await session.get(self.entity, obj_id)\\n                await session.delete(obj)\\n\\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Model]:\\n        async with self.session_maker() as session:\\n            if joined:\\n                if self.options:\\n                    return [\\n                        self.entity_to_model(entity)\\n                        for entity in (await session.execute(\\n                            select(self.entity)\\n                            .limit(limit)\\n                            .offset(offset)\\n                            .options(*self.options)\\n                        )).unique().scalars().all()\\n                    ]\\n            res = (await session.execute(\\n                select(self.entity)\\n                .limit(limit)\\n                .offset(offset)\\n            )).scalars().all()\\n            return [\\n                self.entity_to_model(entity)\\n                for entity in res\\n            ]\\n\\n    @abstractmethod\\n    def entity_to_model(self, entity: Entity) -> Model:\\n        ...\\n\\n    @abstractmethod\\n    def create_dto_to_entity(self, dto: CreateDTO) -> Entity:\\n        ...\\n\\n    @staticmethod\\n    def _get_relation(entity: Entity, relation: str, use_list: bool = False) -> Optional[Any]:\\n        try:\\n            logger.info(f\\\"Getting {relation} from {entity.id}\\\")\\n            return getattr(entity, relation)\\n        except DetachedInstanceError:\\n            logger.error(f\\\"Could not get {relation} from {entity.id}\\\")\\n            return [] if use_list else None\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/moderator_review.py\",\n    \"content\": \"from abstractions.repositories.moderator_review import ModeratorReviewRepositoryInterface\\nfrom domain.dto.moderator_review import CreateModeratorReviewDTO, UpdateModeratorReviewDTO\\nfrom infrastructure.entities import ModeratorReview\\nfrom domain.models.moderator_review import ModeratorReview as ModeratorReviewModel\\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\n\\nclass ModeratorReviewRepository(\\n    AbstractSQLAlchemyRepository[ModeratorReview, ModeratorReviewModel, CreateModeratorReviewDTO, UpdateModeratorReviewDTO],\\n    ModeratorReviewRepositoryInterface,\\n):\\n    def create_dto_to_entity(self, dto: CreateModeratorReviewDTO) -> ModeratorReview:\\n        return ModeratorReview(\\n            id=dto.id,\\n            moderator_id=dto.moderator_id,\\n            comment_to_seller=dto.comment_to_seller,\\n            product_id=dto.product_id,\\n            comment_to_moderator=dto.comment_to_moderator,\\n            status_before=dto.status_before,\\n            status_after=dto.status_after,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at,\\n        )\\n\\n    def entity_to_model(self, entity: ModeratorReview) -> ModeratorReviewModel:\\n        return ModeratorReviewModel(\\n            id=entity.id,\\n            moderator_id=entity.moderator_id,\\n            comment_to_seller=entity.comment_to_seller,\\n            product_id=entity.product_id,\\n            comment_to_moderator=entity.comment_to_moderator,\\n            status_before=entity.status_before,\\n            status_after=entity.status_after,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at,\\n        )\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/exceptions.py\",\n    \"content\": \"class NotFoundException(Exception):\\n    ...\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/product.py\",\n    \"content\": \"import logging\\nfrom dataclasses import field, dataclass\\nfrom typing import Optional, Any\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select, case, String, cast, func\\nfrom sqlalchemy.orm import joinedload\\n\\nfrom abstractions.repositories import ProductRepositoryInterface\\nfrom domain.dto import CreateProductDTO, UpdateProductDTO\\nfrom domain.models import Product as ProductModel\\nfrom domain.models.moderator_review import ModeratorReview as ModeratorReviewModel\\nfrom infrastructure.entities import Product, ModeratorReview\\nfrom infrastructure.enums.product_status import ProductStatus\\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass ProductRepository(\\n    AbstractSQLAlchemyRepository[Product, ProductModel, CreateProductDTO, UpdateProductDTO],\\n    ProductRepositoryInterface,\\n):\\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\\n        'moderator_reviews': None,\\n    })\\n\\n    def __post_init__(self):\\n        super().__post_init__()\\n        self.options = [\\n            joinedload(self.entity.moderator_reviews),\\n        ]\\n\\n    async def get_active_products(self, limit=100, offset=0, search: Optional[str] = None):\\n        async with self.session_maker() as session:\\n            stmt = select(self.entity).where(self.entity.status == ProductStatus.ACTIVE)\\n\\n            if search:\\n                # разбиваем запрос на слова и делаем префиксный поиск по каждому\\n                tokens = [tok for tok in search.strip().split() if tok]\\n                prefix_query = ' & '.join(f\\\"{tok}:*\\\" for tok in tokens)\\n                tsq = func.to_tsquery('russian', prefix_query)\\n                stmt = stmt.where(self.entity.search_vector.op('@@')(tsq))\\n\\n            result = await session.execute(stmt.limit(limit).offset(offset))\\n            products = result.scalars().all()\\n        return [self.entity_to_model(p) for p in products]\\n\\n    async def get_by_seller(self, user_id: UUID) -> Optional[list[ProductModel]]:\\n        priority_case = case(\\n            {\\n                ProductStatus.CREATED.value.upper(): 1,\\n                ProductStatus.ACTIVE.value.upper(): 2,\\n                ProductStatus.DISABLED.value.upper(): 3,\\n                ProductStatus.REJECTED.value.upper(): 4,\\n                ProductStatus.ARCHIVED.value.upper(): 5,\\n            },\\n            value=func.upper(cast(Product.status, String)),\\n            else_=99\\n        )\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(Product)\\n                .where(Product.seller_id == user_id)\\n                .order_by(\\n                    priority_case.asc(),\\n                    Product.created_at.asc(),\\n                )\\n                .options(*self.options)\\n            )\\n            products = result.unique().scalars().all()\\n\\n        return [self.entity_to_model(product) for product in products]\\n\\n    async def get_products_to_review(self) -> list[ProductModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                # .where(self.entity.status == ProductStatus.CREATED)\\n                .options(*self.options)\\n            )\\n            result = result.unique().scalars().all()\\n        return [self.entity_to_model(x) for x in result]\\n\\n    def create_dto_to_entity(self, dto: CreateProductDTO) -> Product:\\n        return Product(\\n            id=dto.id,\\n            name=dto.name,\\n            brand=dto.brand,\\n            article=dto.article,\\n            category=dto.category,\\n            key_word=dto.key_word,\\n            general_repurchases=dto.general_repurchases,\\n            remaining_products=dto.remaining_products,\\n            daily_repurchases=dto.daily_repurchases,\\n            price=dto.price,\\n            wb_price=dto.wb_price,\\n            tg=dto.tg,\\n            payment_time=dto.payment_time,\\n            review_requirements=dto.review_requirements,\\n            requirements_agree=dto.requirements_agree,\\n            seller_id=dto.seller_id,\\n            status=ProductStatus.CREATED,\\n            image_path=dto.image_path,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at,\\n        )\\n\\n    def entity_to_model(self, entity: Product) -> ProductModel:\\n        def _map_moderator_review(review: ModeratorReview) -> ModeratorReviewModel:\\n            return ModeratorReviewModel.model_validate(review)\\n\\n        return ProductModel(\\n            id=entity.id,\\n            name=entity.name,\\n            brand=entity.brand,\\n            article=entity.article,\\n            category=entity.category,\\n            key_word=entity.key_word,\\n            general_repurchases=entity.general_repurchases,\\n            remaining_products=entity.remaining_products,\\n            daily_repurchases=entity.daily_repurchases,\\n            price=entity.price,\\n            wb_price=entity.wb_price,\\n            tg=entity.tg,\\n            payment_time=entity.payment_time,\\n            review_requirements=entity.review_requirements,\\n            requirements_agree=entity.requirements_agree,\\n            seller_id=entity.seller_id,\\n            status=entity.status,\\n            image_path=entity.image_path,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at,\\n            moderator_reviews=[\\n                _map_moderator_review(x)\\n                for x in self._get_relation(entity, 'moderator_reviews', use_list=True)\\n            ]\\n        )\\n\\n    async def get_by_article(self, article: str) -> Optional[Product]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.article == article)\\n            )\\n            product = result.scalars().one_or_none()\\n        if product:\\n            return self.entity_to_model(product)\\n        return None\\n\"\n  },\n  {\n    \"path\": \"backend/infrastructure/repositories/push.py\",\n    \"content\": \"from dataclasses import dataclass\\nfrom datetime import datetime\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\nfrom sqlalchemy.exc import NoResultFound\\n\\nfrom abstractions.repositories.push import PushRepositoryInterface\\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\\nfrom domain.models import Push as PushModel\\nfrom infrastructure.entities import Push\\nfrom infrastructure.repositories.exceptions import NotFoundException\\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\n\\n@dataclass\\nclass PushRepository(\\n    AbstractSQLAlchemyRepository[Push, PushModel, CreatePushDTO, UpdatePushDTO],\\n    PushRepositoryInterface\\n):\\n\\n    async def delete(self, obj_id: UUID) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                obj = await session.get(self.entity, obj_id)\\n                obj.deleted_at = datetime.now()\\n\\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[PushModel]:\\n        async with self.session_maker() as session:\\n            if joined:\\n                if self.options:\\n                    return [\\n                        self.entity_to_model(entity)\\n                        for entity in (await session.execute(\\n                            select(self.entity)\\n                            .where(self.entity.deleted_at == None)\\n                            .limit(limit)\\n                            .offset(offset)\\n                            .options(*self.options)\\n                        )).unique().scalars().all()\\n                    ]\\n            res = (await session.execute(\\n                select(self.entity)\\n                .where(self.entity.deleted_at == None)\\n                .limit(limit)\\n                .offset(offset)\\n            )).scalars().all()\\n            return [\\n                self.entity_to_model(entity)\\n                for entity in res\\n            ]\\n\\n    async def get(self, obj_id: UUID) -> PushModel:\\n        async with self.session_maker() as session:\\n            try:\\n                if self.options:\\n                    res = await session.execute(\\n                        select(self.entity)\\n                        .where(\\n                            self.entity.id == obj_id,\\n                            self.entity.deleted_at == None,\\n                        )\\n                        .options(*self.options)\\n                    )\\n                    obj = res.unique().scalars().one()\\n                else:\\n                    obj = await session.get(self.entity, obj_id)\\n                return self.entity_to_model(obj)\\n            except NoResultFound:\\n                raise NotFoundException\\n\\n    def create_dto_to_entity(self, dto: CreatePushDTO) -> Push:\\n        return Push(\\n            id=dto.id,\\n            title=dto.title,\\n            text=dto.text,\\n            button_text=dto.button_text,\\n            button_link=dto.button_link,\\n            creator_id=dto.creator_id,\\n            image_path=dto.image_path,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at\\n        )\\n\\n    def entity_to_model(self, entity: Push) -> PushModel:\\n        return PushModel(\\n            id=entity.id,\\n            title=entity.title,\\n            text=entity.text,\\n            button_text=entity.button_text,\\n            button_link=entity.button_link,\\n            creator_id=entity.creator_id,\\n            image_path=entity.image_path,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at\\n        )\\n\"\n  },\n  {\n    \"path\": \"backend/domain/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/domain/dto/user.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import Field\\n\\nfrom domain.dto.base import CreateDTO, UpdateDTO\\nfrom infrastructure.enums.user_role import UserRole\\n\\n\\nclass CreateUserDTO(CreateDTO):\\n    telegram_id: Optional[int]\\n    nickname: Optional[str] = None\\n    role: str = Field(default=UserRole.USER)\\n    invited_by: Optional[UUID] = None\\n\\n\\nclass UpdateUserDTO(UpdateDTO):\\n    telegram_id: Optional[int] = None\\n    nickname: Optional[str] = None\\n    role: Optional[str] = None\\n    is_banned: Optional[bool] = None\\n    is_seller: Optional[bool] = None\\n    balance: Optional[int] = None\\n    has_discount: Optional[bool] = None\"\n  },\n  {\n    \"path\": \"backend/domain/dto/order.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel\\n\\nfrom domain.dto.base import CreateDTO, UpdateDTO\\nfrom infrastructure.enums.order_status import OrderStatus\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass CreateOrderDTO(CreateDTO):\\n    user_id: UUID\\n    product_id: UUID\\n    seller_id: UUID\\n    step: int\\n    status: OrderStatus = None\\n    search_screenshot_path: Optional[str] = None\\n    cart_screenshot_path: Optional[str] = None\\n    card_number: Optional[str] = None\\n    phone_number: Optional[str] = None\\n    name: Optional[str] = None\\n    bank: Optional[str] = None\\n    final_cart_screenshot_path: Optional[str] = None\\n    delivery_screenshot_path: Optional[str] = None\\n    barcodes_screenshot_path: Optional[str] = None\\n    review_screenshot_path: Optional[str] = None\\n    receipt_screenshot_path: Optional[str] = None\\n    receipt_number: Optional[str] = None\\n\\n\\n\\nclass UpdateOrderDTO(UpdateDTO):\\n    # user_id: Optional[UUID] = None\\n    # product_id: Optional[UUID] = None\\n    # seller_id: Optional[UUID] = None\\n    step: Optional[int] = None\\n    search_screenshot_path: Optional[str] = None\\n    cart_screenshot_path: Optional[str] = None\\n    card_number: Optional[str] = None\\n    phone_number: Optional[str] = None\\n    name: Optional[str] = None\\n    bank: Optional[str] = None\\n    final_cart_screenshot_path: Optional[str] = None\\n    delivery_screenshot_path: Optional[str] = None\\n    barcodes_screenshot_path: Optional[str] = None\\n    review_screenshot_path: Optional[str] = None\\n    receipt_screenshot_path: Optional[str] = None\\n    receipt_number: Optional[str] = None\\n    status: Optional[OrderStatus] = None\\n\"\n  },\n  {\n    \"path\": \"backend/domain/dto/__init__.py\",\n    \"content\": \"from .user import CreateUserDTO, UpdateUserDTO\\nfrom .order import CreateOrderDTO, UpdateOrderDTO\\nfrom .product import CreateProductDTO, UpdateProductDTO\\nfrom .review import CreateReviewDTO, UpdateReviewDTO\\nfrom .push import CreatePushDTO, UpdatePushDTO\\nfrom .user_push import CreateUserPushDTO, UpdateUserPushDTO\\n\"\n  },\n  {\n    \"path\": \"backend/domain/dto/review.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel\\n\\nfrom domain.dto.base import CreateDTO, UpdateDTO\\n\\n\\nclass CreateReviewDTO(CreateDTO):\\n    user_id: UUID\\n    product_id: UUID\\n    rating: int\\n    comment: str\\n\\nclass UpdateReviewDTO(UpdateDTO):\\n    rating: Optional[int] = None\\n    comment: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"backend/domain/dto/user_push.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom domain.dto.base import CreateDTO, UpdateDTO\\nfrom domain.models import User\\nfrom infrastructure.entities import Push\\n\\n\\nclass CreateUserPushDTO(CreateDTO):\\n    push_id: UUID\\n    user_id: UUID\\n\\nclass UpdateUserPushDTO(UpdateDTO):\\n    push_id: Optional[UUID] = None\\n    user_id: Optional[UUID] = None\\n    sent_at: Optional[datetime] = None\"\n  },\n  {\n    \"path\": \"backend/domain/dto/moderator_review.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom domain.dto.base import CreateDTO, UpdateDTO\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass CreateModeratorReviewDTO(CreateDTO):\\n    moderator_id: UUID\\n    product_id: UUID\\n    comment_to_seller: Optional[str] = None\\n    comment_to_moderator: Optional[str] = None\\n    status_before: ProductStatus\\n    status_after: ProductStatus\\n\\n\\nclass UpdateModeratorReviewDTO(UpdateDTO):\\n    comment: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"backend/domain/dto/product.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import Field, ConfigDict\\n\\nfrom domain.dto.base import CreateDTO, UpdateDTO\\nfrom infrastructure.enums.category import Category\\nfrom infrastructure.enums.payout_time import PayoutTime\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass CreateProductDTO(CreateDTO):\\n    name: str\\n    brand: str\\n    article: str\\n    category: Category\\n    key_word: str\\n    general_repurchases: int\\n    remaining_products: int\\n    daily_repurchases: int\\n    price: float\\n    wb_price: float\\n    tg: str\\n    payment_time: PayoutTime\\n    review_requirements: str\\n    requirements_agree: bool\\n    seller_id: UUID\\n    status: ProductStatus = Field(default=ProductStatus.CREATED)\\n    image_path: Optional[str] = None\\n\\n\\nclass UpdateProductDTO(UpdateDTO):\\n    name: Optional[str] = None\\n    brand: Optional[str] = None\\n    article: Optional[str] = None\\n    category: Optional[Category] = None\\n    key_word: Optional[str] = None\\n    general_repurchases: Optional[int] = None\\n    remaining_products: Optional[int] = None\\n    daily_repurchases: Optional[int] = None\\n    price: Optional[float] = None\\n    wb_price: Optional[float] = None\\n    tg: Optional[str] = None\\n    status: Optional[ProductStatus] = None\\n    payment_time: Optional[PayoutTime] = None\\n    review_requirements: Optional[str] = None\\n    requirements_agree: Optional[bool] = None\\n    image_path: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"backend/domain/dto/base.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID, uuid4\\n\\nfrom pydantic import BaseModel, Field\\n\\n\\nclass CreateDTO(BaseModel):\\n    id: UUID = Field(default_factory=uuid4)\\n    created_at: datetime = Field(default_factory=datetime.now)\\n    updated_at: datetime = Field(default_factory=datetime.now)\\n\\nclass UpdateDTO(BaseModel):\\n    updated_at: Optional[datetime] = Field(default_factory=datetime.now)\"\n  },\n  {\n    \"path\": \"backend/domain/dto/push.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom domain.dto.base import CreateDTO, UpdateDTO\\n\\n\\nclass CreatePushDTO(CreateDTO):\\n    title: str\\n    text: str\\n    creator_id: UUID\\n    image_path: Optional[str] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\\n\\nclass UpdatePushDTO(UpdateDTO):\\n    title: Optional[str] = None\\n    text: Optional[str] = None\\n    image_path: Optional[str] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"backend/domain/responses/auth.py\",\n    \"content\": \"from pydantic import BaseModel, Field\\n\\n\\nclass AuthTokens(BaseModel):\\n    access_token: str\\n    refresh_token: str\\n\"\n  },\n  {\n    \"path\": \"backend/domain/responses/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/domain/responses/product.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel, ConfigDict\\n\\nfrom domain.models.moderator_review import ModeratorReview\\nfrom infrastructure.enums.category import Category\\nfrom infrastructure.enums.payout_time import PayoutTime\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass ProductResponse(BaseModel):\\n    id: UUID\\n    name: str\\n    brand: str\\n    article: str\\n    category: Category\\n    key_word: str\\n    general_repurchases: int\\n    daily_repurchases: int\\n    price: float\\n    wb_price: float\\n    tg: str\\n    payment_time: PayoutTime\\n    review_requirements: str\\n    image_path: str | None = None\\n    seller_id: UUID\\n    status: ProductStatus\\n    created_at: datetime\\n    updated_at: datetime\\n\\n    last_moderator_review: Optional[ModeratorReview] = None\\n\\n    model_config = ConfigDict(from_attributes=True)\"\n  },\n  {\n    \"path\": \"backend/domain/responses/order_report.py\",\n    \"content\": \"from typing import Optional\\nfrom pydantic import BaseModel, ConfigDict\\n\\nfrom infrastructure.enums.order_status import OrderStatus\\n\\n\\nclass OrderReport(BaseModel):\\n    step: int\\n    search_screenshot_path: Optional[str] = None\\n    cart_screenshot_path: Optional[str] = None\\n    card_number: Optional[str] = None\\n    article: Optional[str] = None\\n    phone_number: Optional[str] = None\\n    name: Optional[str] = None\\n    bank: Optional[str] = None\\n    final_cart_screenshot_path: Optional[str] = None\\n    delivery_screenshot_path: Optional[str] = None\\n    barcodes_screenshot_path: Optional[str] = None\\n    review_screenshot_path: Optional[str] = None\\n    receipt_screenshot_path: Optional[str] = None\\n    receipt_number: Optional[str] = None\\n    status: Optional[OrderStatus] = None\\n    cashback: Optional[int] = None\\n    model_config = ConfigDict(from_attributes=True)\\n\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/user.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel, ConfigDict\\n\\nfrom infrastructure.enums.user_role import UserRole\\n\\n\\nclass User(BaseModel):\\n    id: UUID\\n    telegram_id: Optional[int] = None\\n    nickname: Optional[str] = None\\n    role: UserRole\\n    is_banned: bool\\n    is_seller: bool\\n    balance: Optional[int] = None\\n    invited_by: Optional[UUID] = None\\n    has_discount: Optional[bool] = None\\n    referrer_bonus: Optional[int] = None\\n\\n    inviter: Optional['User'] = None\\n    created_at: datetime\\n    updated_at: datetime\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/order.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel, ConfigDict\\n\\nfrom domain.models import Product, User\\nfrom infrastructure.enums.order_status import OrderStatus\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass Order(BaseModel):\\n    id: UUID\\n    user_id: UUID\\n    product_id: UUID\\n    seller_id: UUID\\n    step: int\\n    search_screenshot_path: Optional[str]\\n    cart_screenshot_path: Optional[str]\\n    card_number: Optional[str]\\n    phone_number: Optional[str]\\n    name: Optional[str]\\n    bank: Optional[str]\\n    final_cart_screenshot_path: Optional[str]\\n    delivery_screenshot_path: Optional[str]\\n    barcodes_screenshot_path: Optional[str]\\n    review_screenshot_path: Optional[str]\\n    receipt_screenshot_path: Optional[str]\\n    receipt_number: Optional[str]\\n    status: OrderStatus\\n\\n    product: Product\\n    user: User\\n    seller: User\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/__init__.py\",\n    \"content\": \"from .user import User\\nfrom .product import Product\\nfrom .review import Review\\nfrom .order import Order\\nfrom .user_push import UserPush\\nfrom .push import Push\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/review.py\",\n    \"content\": \"from datetime import datetime\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel, ConfigDict\\n\\n\\nclass Review(BaseModel):\\n    id: UUID\\n    user_id: UUID\\n    product_id: UUID\\n    rating: int\\n    comment: str\\n    created_at: datetime\\n    updated_at: datetime\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/user_push.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel\\nfrom pydantic import ConfigDict\\n\\nfrom domain.models import User\\nfrom domain.models.push import Push\\nfrom infrastructure.enums.push_status import PushStatus\\n\\n\\nclass UserPush(BaseModel):\\n    id: UUID\\n    push_id: UUID\\n    user_id: UUID\\n    sent_at: Optional[datetime] = None\\n    status: PushStatus\\n    created_at: datetime\\n    updated_at: datetime\\n\\n    push: Optional[Push] = None\\n    user: Optional[User] = None\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/moderator_review.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel, ConfigDict\\n\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass ModeratorReview(BaseModel):\\n    id: UUID\\n    moderator_id: UUID\\n    comment_to_seller: Optional[str] = None\\n    comment_to_moderator: Optional[str] = None\\n    product_id: UUID\\n    status_before: ProductStatus\\n    status_after: ProductStatus\\n    created_at: datetime\\n    updated_at: datetime\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/product.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel, ConfigDict\\n\\nfrom domain.models.moderator_review import ModeratorReview\\nfrom infrastructure.enums.category import Category\\nfrom infrastructure.enums.payout_time import PayoutTime\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass Product(BaseModel):\\n    id: UUID\\n    name: str\\n    brand: str\\n    article: str\\n    category: Category\\n    key_word: str\\n    general_repurchases: int\\n    remaining_products: int\\n    daily_repurchases: int\\n    price: float\\n    wb_price: float\\n    tg: str\\n    payment_time: PayoutTime\\n    review_requirements: str\\n    requirements_agree: bool\\n    image_path: str | None = None\\n    seller_id: UUID\\n    status: ProductStatus\\n    created_at: datetime\\n    updated_at: datetime\\n\\n    moderator_reviews: Optional[list[ModeratorReview]] = None\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\\n\"\n  },\n  {\n    \"path\": \"backend/domain/models/push.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\nfrom pydantic import ConfigDict\\n\\nfrom pydantic import BaseModel\\n\\nfrom domain.models import User\\n\\n\\nclass Push(BaseModel):\\n    id: UUID\\n    title: str\\n    text: str\\n    creator_id: UUID\\n    image_path: Optional[str] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n    created_at: datetime\\n    updated_at: datetime\\n\\n    creator: Optional[User] = None\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\"\n  },\n  {\n    \"path\": \"backend/routes/auth.py\",\n    \"content\": \"from fastapi import APIRouter\\n\\nfrom dependencies.services.auth.service import get_auth_service\\nfrom routes.requests.auth import TelegramAuthRequest\\n\\nrouter = APIRouter(\\n    prefix='/auth',\\n    tags=['Auth'],\\n)\\n\\n\\n@router.post(\\\"/telegram\\\")\\nasync def telegram_auth(payload: TelegramAuthRequest):\\n    auth_service = get_auth_service()\\n\\n    tokens = await auth_service.create_token(init_data=payload.initData, ref_user_id=payload.ref)\\n\\n    return tokens\\n\"\n  },\n  {\n    \"path\": \"backend/routes/upload.py\",\n    \"content\": \"import logging\\nimport os\\n\\nfrom fastapi.responses import FileResponse\\nfrom fastapi import APIRouter, Depends\\n\\nfrom abstractions.services.upload import UploadServiceInterface\\nfrom dependencies.services.upload import get_upload_service\\n\\nrouter = APIRouter(\\n    prefix=\\\"/upload\\\",\\n    tags=[\\\"upload\\\"]\\n)\\n\\nlogger = logging.getLogger(__name__)\\n\\n@router.get(\\\"/{filename}\\\")\\nasync def get_file(\\n        filename: str,\\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\\n) -> FileResponse:\\n    file_path = upload_service.get_file_path(filename)\\n    return FileResponse(\\n        path=file_path,\\n        media_type='application/octet-stream',\\n        filename=filename\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/routes/order.py\",\n    \"content\": \"import logging\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom fastapi import APIRouter, Request, Depends\\nfrom fastapi import HTTPException, UploadFile, Form, File\\n\\nfrom abstractions.services.upload import UploadServiceInterface\\nfrom dependencies.services.order import get_order_service\\nfrom dependencies.services.upload import get_upload_service\\nfrom domain.dto import UpdateOrderDTO\\nfrom domain.dto.order import CreateOrderDTO\\nfrom infrastructure.enums.order_status import OrderStatus\\n\\nrouter = APIRouter(\\n    prefix=\\\"/orders\\\",\\n    tags=[\\\"Orders\\\"],\\n)\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@router.get(\\\"\\\")\\nasync def get_orders(request: Request):\\n    order_service = get_order_service()\\n    orders = await order_service.get_orders()\\n    return orders\\n\\n\\n@router.get(\\\"/{order_id}\\\")\\nasync def get_order(order_id: UUID, request: Request):\\n    order_service = get_order_service()\\n    order = await order_service.get_order(order_id)\\n    return order\\n\\n\\n@router.post(\\\"\\\")\\nasync def create_order(\\n        user_id: UUID = Form(...),\\n        product_id: UUID = Form(...),\\n        seller_id: UUID = Form(...),\\n        search_query_screenshot: UploadFile = File(...),\\n        cart_screenshot: UploadFile = File(...),\\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\\n) -> UUID:\\n    \\\"\\\"\\\"\\n    Создаём заказ после шага 1:\\n    - Сохраняем два скриншота (поискового запроса, корзины).\\n    - Присваиваем step=1.\\n    \\\"\\\"\\\"\\n    # Сохраняем search_query_screenshot\\n    try:\\n        search_filename = await upload_service.upload(search_query_screenshot)\\n    except Exception as e:\\n        raise HTTPException(\\n            status_code=500,\\n            detail=\\\"Не удалось сохранить файл search_query_screenshot\\\"\\n        ) from e\\n\\n    # Сохраняем cart_screenshot\\n    try:\\n        cart_filename = await upload_service.upload(cart_screenshot)\\n    except Exception as e:\\n        raise HTTPException(\\n            status_code=500,\\n            detail=\\\"Не удалось сохранить файл cart_screenshot\\\"\\n        ) from e\\n\\n    # Создаём заказ (step=1)\\n    order_data = CreateOrderDTO(\\n        user_id=user_id,\\n        product_id=product_id,\\n        step=1,\\n        seller_id=seller_id,\\n        search_screenshot_path=search_filename,\\n        cart_screenshot_path=cart_filename,\\n        status=OrderStatus.CASHBACK_NOT_PAID,\\n    )\\n\\n    # Допустим, у вас есть OrderService со методом create_order\\n    order_service = get_order_service()\\n    new_order_id = await order_service.create_order(order_data)\\n    return new_order_id\\n\\n\\n@router.patch(\\\"/status/{order_id}\\\")\\nasync def update_order_status(\\n        order_id: UUID,\\n        status: OrderStatus = Form(...),\\n):\\n    update_data = {}\\n    if status is not None:\\n        update_data[\\\"status\\\"] = status\\n\\n    # Создаём DTO на основе собранных полей\\n    dto = UpdateOrderDTO.model_validate(update_data)\\n    order_service = get_order_service()\\n\\n    await order_service.update_order(order_id, dto)\\n\\n    # if not updated_order:\\n    #     raise HTTPException(status_code=404, detail=\\\"Order not found\\\")\\n\\n    # return {\\\"message\\\": \\\"Order updated successfully\\\"}\\n\\n\\n@router.patch(\\\"/{order_id}\\\")\\nasync def update_order(\\n        order_id: UUID,\\n        step: Optional[int] = Form(None),\\n\\n        # Шаг 4 (реквизиты)\\n        card_number: Optional[str] = Form(None),\\n        phone_number: Optional[str] = Form(None),\\n        name: Optional[str] = Form(None),\\n        bank: Optional[str] = Form(None),\\n\\n        # Шаг 5\\n        final_cart_screenshot: Optional[UploadFile] = File(None),\\n\\n        # Шаг 6\\n        delivery_screenshot: Optional[UploadFile] = File(None),\\n        barcodes_screenshot: Optional[UploadFile] = File(None),\\n\\n        # Шаг 7\\n        review_screenshot: Optional[UploadFile] = File(None),\\n        receipt_screenshot: Optional[UploadFile] = File(None),\\n        receipt_number: Optional[str] = Form(None),\\n\\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\\n):\\n\\n\\n    # Собираем данные для UpdateOrderDTO в словарь\\n    update_data = {}\\n\\n    if step is not None:\\n        update_data[\\\"step\\\"] = step\\n\\n    # Шаг 4: реквизиты\\n    if card_number is not None:\\n        update_data[\\\"card_number\\\"] = card_number\\n    if phone_number is not None:\\n        update_data[\\\"phone_number\\\"] = phone_number\\n    if name is not None:\\n        update_data[\\\"name\\\"] = name\\n    if bank is not None:\\n        update_data[\\\"bank\\\"] = bank\\n\\n    # Шаг 5\\n    if final_cart_screenshot is not None:\\n        path = await upload_service.upload(final_cart_screenshot)\\n        update_data[\\\"final_cart_screenshot_path\\\"] = path\\n\\n    # Шаг 6\\n    if delivery_screenshot is not None:\\n        path = await upload_service.upload(delivery_screenshot)\\n        update_data[\\\"delivery_screenshot_path\\\"] = path\\n\\n    if barcodes_screenshot is not None:\\n        path = await upload_service.upload(barcodes_screenshot)\\n        update_data[\\\"barcodes_screenshot_path\\\"] = path\\n\\n    # Шаг 7\\n    if review_screenshot is not None:\\n        path = await upload_service.upload(review_screenshot)\\n        update_data[\\\"review_screenshot_path\\\"] = path\\n\\n    if receipt_screenshot is not None:\\n        path = await upload_service.upload(receipt_screenshot)\\n        update_data[\\\"receipt_screenshot_path\\\"] = path\\n\\n    if receipt_number is not None:\\n        update_data[\\\"receipt_number\\\"] = receipt_number\\n\\n    # Создаём DTO на основе собранных полей\\n    dto = UpdateOrderDTO.model_validate(update_data)\\n\\n    # Вызываем метод сервиса для обновления\\n    order_service = get_order_service()\\n    await order_service.update_order(order_id, dto)\\n\\n    # if not updated_order:\\n    #     raise HTTPException(status_code=404, detail=\\\"Order not found\\\")\\n\\n    return {\\\"message\\\": \\\"Order updated successfully\\\"}\\n\\n\\n@router.delete(\\\"/{order_id}\\\")\\nasync def delete_order(order_id: UUID, request: Request):\\n    order_service = get_order_service()\\n    await order_service.delete_order(order_id)\\n    return {\\\"message\\\": \\\"Order deleted successfully\\\"}\\n\"\n  },\n  {\n    \"path\": \"backend/routes/__init__.py\",\n    \"content\": \"from fastapi import APIRouter\\n\\nfrom .auth import router as auth_router\\nfrom .moderator import router as moderator_router\\nfrom .order import router as orders_router\\nfrom .product import router as product_router\\nfrom .review import router as review_router\\nfrom .user import router as user_router\\nfrom .upload import router as upload_router\\n\\nrouter = APIRouter(\\n    prefix=\\\"/api\\\",\\n)\\n\\nrouter.include_router(auth_router)\\nrouter.include_router(product_router)\\nrouter.include_router(review_router)\\nrouter.include_router(user_router)\\nrouter.include_router(moderator_router)\\nrouter.include_router(product_router)\\nrouter.include_router(orders_router)\\nrouter.include_router(upload_router)\\n\"\n  },\n  {\n    \"path\": \"backend/routes/review.py\",\n    \"content\": \"import logging\\nfrom uuid import UUID\\n\\nfrom fastapi import APIRouter, Request\\n\\nfrom dependencies.services.review import get_review_service\\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\\nfrom routes.requests.review import CreateReviewRequest, UpdateReviewRequest\\n\\nrouter = APIRouter(\\n    prefix=\\\"/reviews\\\",\\n    tags=[\\\"Reviews\\\"],\\n)\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@router.get(\\\"\\\")\\nasync def list_reviews(request: Request):\\n    review_service = get_review_service()\\n    reviews = await review_service.get_reviews()\\n    return reviews\\n\\n\\n@router.get(\\\"/{review_id}\\\")\\nasync def get_review(review_id: UUID, request: Request):\\n    review_service = get_review_service()\\n    review = await review_service.get_review(review_id)\\n    return review\\n\\n\\n@router.post(\\\"\\\")\\nasync def create_review(request: Request, review_req: CreateReviewRequest):\\n    review_service = get_review_service()\\n    dto = CreateReviewDTO(**review_req.dict())\\n    review = await review_service.create_review(dto)\\n    return review\\n\\n\\n@router.patch(\\\"/{review_id}\\\")\\nasync def update_review(review_id: UUID, request: Request, review_req: UpdateReviewRequest):\\n    review_service = get_review_service()\\n    dto = UpdateReviewDTO(**review_req.model_dump(exclude_unset=True))\\n    await review_service.update_review(review_id, dto)\\n    return {\\\"message\\\": \\\"Review updated successfully\\\"}\\n\\n\\n@router.delete(\\\"/{review_id}\\\")\\nasync def delete_review(review_id: UUID, request: Request):\\n    review_service = get_review_service()\\n    await review_service.delete_review(review_id)\\n    return {\\\"message\\\": \\\"Review deleted successfully\\\"}\\n\"\n  },\n  {\n    \"path\": \"backend/routes/utils.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom fastapi import Request\\n\\n\\ndef get_user_id_from_request(request: Request) -> Optional[UUID]:\\n    return request.scope.get('x_user_id', None)\\n\"\n  },\n  {\n    \"path\": \"backend/routes/product.py\",\n    \"content\": \"import logging\\nfrom typing import Optional, Annotated\\nfrom uuid import UUID\\n\\nfrom fastapi import APIRouter, UploadFile, File, Form, HTTPException, Request, Depends\\n\\nfrom abstractions.services.upload import UploadServiceInterface\\nfrom dependencies.services.product import get_product_service  # функция, возвращающая экземпляр ProductService\\nfrom dependencies.services.upload import get_upload_service\\nfrom domain.dto import CreateProductDTO, UpdateProductDTO\\nfrom domain.models import Product\\nfrom domain.responses.product import ProductResponse\\nfrom infrastructure.enums.category import Category\\nfrom infrastructure.enums.payout_time import PayoutTime\\nfrom infrastructure.enums.product_status import ProductStatus\\nfrom routes.requests.update_product import UpdateProductForm\\nfrom routes.utils import get_user_id_from_request\\n\\nrouter = APIRouter(\\n    prefix=\\\"/products\\\",\\n    tags=[\\\"Products\\\"],\\n)\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@router.get(\\\"\\\")\\nasync def get_products(\\n        request: Request,\\n        search: Optional[str] = None,\\n):\\n    product_service = get_product_service()\\n    products = await product_service.get_active_products(search=search)\\n    return products\\n\\n\\n@router.get(\\\"/article\\\")\\nasync def get_by_article(article: str) -> Product:\\n    product_service = get_product_service()\\n    return await product_service.get_by_article(article)\\n\\n\\n@router.get(\\\"/seller\\\")\\nasync def get_by_seller(\\n        request: Request,\\n) -> Optional[list[Product]]:\\n    product_service = get_product_service()\\n    seller_id = get_user_id_from_request(request)\\n    return await product_service.get_by_seller(seller_id)\\n\\n\\n@router.get(\\\"/{product_id}\\\")\\nasync def get_product(\\n        product_id: UUID,\\n) -> ProductResponse:\\n    product_service = get_product_service()\\n    product = await product_service.get_product(product_id)\\n\\n    if not product:\\n        raise HTTPException(status_code=404, detail=\\\"Product not found\\\")\\n\\n    response = ProductResponse.model_validate(product)\\n    if product.moderator_reviews:\\n        response.last_moderator_review = product.moderator_reviews[-1]  # todo\\n\\n    return response\\n\\n\\n@router.post(\\\"\\\")\\nasync def create_product(\\n        request: Request,\\n        name: str = Form(...),\\n        article: str = Form(...),\\n        brand: str = Form(...),\\n        category: Category = Form(...),\\n        key_word: str = Form(...),\\n        general_repurchases: int = Form(...),\\n        daily_repurchases: int = Form(...),\\n        price: float = Form(..., gt=0),\\n        wb_price: float = Form(...),\\n        tg: str = Form(...),\\n        payment_time: PayoutTime = Form(...),\\n        review_requirements: str = Form(...),\\n        requirements_agree: bool = Form(...),\\n        image: Optional[UploadFile] = File(None),\\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\\n) -> UUID:\\n    seller_id = get_user_id_from_request(request)\\n    image_path = None\\n\\n    dto = CreateProductDTO(\\n        name=name,\\n        brand=brand,\\n        category=category,\\n        key_word=key_word,\\n        general_repurchases=general_repurchases,\\n        remaining_products=general_repurchases,\\n        daily_repurchases=daily_repurchases,\\n        price=price,\\n        wb_price=wb_price,\\n        tg=tg,\\n        payment_time=payment_time,\\n        review_requirements=review_requirements,\\n        requirements_agree=requirements_agree,\\n        article=article,\\n        image_path=image_path,\\n        seller_id=seller_id\\n    )\\n\\n    if image is not None:\\n        try:\\n            image_path = await upload_service.upload(image)\\n        except Exception as e:\\n            raise HTTPException(\\n                status_code=500,\\n                detail=\\\"Не удалось сохранить файл\\\"\\n            ) from e\\n    else:\\n        logger.error(\\\"ATTENTION!!! IMAGE IS NONE\\\")\\n\\n    dto.image_path = image_path\\n\\n    product_service = get_product_service()\\n    product_id = await product_service.create_product(dto)\\n\\n    return product_id\\n\\n\\n@router.patch(\\\"/{product_id}\\\")\\nasync def update_product(\\n        product_id: UUID,\\n        data: Annotated[UpdateProductForm, Form()],\\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\\n) -> dict:\\n    update_dto = UpdateProductDTO.model_validate(data.model_dump(exclude_unset=True))\\n    # dto = UpdateProductDTO(\\n    #     name=data.name,\\n    #     brand=brand,\\n    #     category=category,\\n    #     key_word=key_word,\\n    #     general_repurchases=general_repurchases,\\n    #     daily_repurchases=daily_repurchases,\\n    #     price=price,\\n    #     wb_price=wb_price,\\n    #     tg=tg,\\n    #     payment_time=payment_time,\\n    #     status=status,\\n    #     review_requirements=review_requirements,\\n    #     article=article,\\n    # )\\n\\n    if data.image is not None:\\n        try:\\n            image_path = await upload_service.upload(data.image)\\n            update_dto.image_path = image_path\\n        except Exception as e:\\n            logger.error(e, exc_info=True)\\n            raise HTTPException(\\n                status_code=500,\\n                detail=\\\"Не удалось сохранить файл\\\"\\n            ) from e\\n\\n    product_service = get_product_service()\\n    await product_service.update_product(product_id, update_dto)\\n    return {\\\"message\\\": \\\"Product updated successfully\\\"}\\n\\n\\n@router.patch(\\\"/status/{product_id}\\\")\\nasync def update_product_status(\\n        product_id: UUID,\\n        status: Optional[ProductStatus] = Form(...),\\n) -> dict:\\n    dto = UpdateProductDTO(\\n        status=status,\\n    )\\n\\n    product_service = get_product_service()\\n    await product_service.update_product(product_id, dto)\\n    return {\\\"message\\\": \\\"Product updated successfully\\\"}\\n\\n\\n@router.delete(\\\"/{product_id}\\\")\\nasync def delete_product(product_id: UUID):\\n    product_service = get_product_service()\\n    await product_service.delete_product(product_id)\\n    return {\\\"message\\\": \\\"Product deleted successfully\\\"}\\n\"\n  },\n  {\n    \"path\": \"backend/routes/moderator/users.py\",\n    \"content\": \"import logging\\nfrom uuid import UUID\\n\\nfrom fastapi import APIRouter, Request\\n\\nfrom domain.models import User\\nfrom routes.moderator.utils import moderator_pre_request\\n\\nrouter = APIRouter(\\n    prefix='/users',\\n)\\n\\nlogger = logging.getLogger(__name__)\\n\\n@router.get('')\\nasync def get_users(\\n        request: Request,\\n) -> list[User]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_users()\\n\\n\\n@router.get('/moderators')\\nasync def get_moderators(\\n        request: Request,\\n) -> list[User]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_moderators()\\n\\n\\n@router.get('/sellers')\\nasync def get_sellers(\\n        request: Request,\\n) -> list[User]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_sellers()\\n\\n@router.get('/clients')\\nasync def get_clients(\\n        request: Request,\\n) -> list[User]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_clients()\\n\\n\\n@router.get('/banned')\\nasync def get_banned_users(\\n        request: Request,\\n) -> list[User]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_banned()\\n\\n\\n@router.get('/{user_id}')\\nasync def get_user(\\n        request: Request,\\n        user_id: UUID,\\n) -> User:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    res = await moderator_service.get_user(user_id)\\n    logger.info(f'inviter {res.inviter}')\\n    return res\\n\\n@router.post('/{user_id}/ban')\\nasync def ban_user(\\n        request: Request,\\n        user_id: UUID,\\n\\n) -> None:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.ban_user(user_id)\\n\\n\\n@router.post('/{user_id}/unban')\\nasync def unban_user(\\n        request: Request,\\n        user_id: UUID,\\n\\n) -> None:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.unban_user(user_id)\\n\\n\\n@router.post('/{user_id}/promote')\\nasync def promote_user(\\n        request: Request,\\n        user_id: UUID,\\n\\n) -> None:\\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\\n\\n    await permission_service.is_admin(moderator_id)\\n\\n    return await moderator_service.promote_user(user_id)\\n\\n\\n@router.post('/{user_id}/demote')\\nasync def demote_user(\\n        request: Request,\\n        user_id: UUID,\\n\\n) -> None:\\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\\n\\n    await permission_service.is_admin(moderator_id)\\n\\n    return await moderator_service.demote_user(user_id)\\n\\n@router.post('/{user_id}/use-discount')\\nasync def use_discount_user(\\n        request: Request,\\n        user_id: UUID,\\n) -> None:\\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\\n\\n    await permission_service.is_moderator(moderator_id)\\n\\n    return await moderator_service.use_discount(user_id)\\n\\n\\n@router.post('/{user_id}/referral-purchase')\\nasync def referral_purchase(\\n        request: Request,\\n        user_id: UUID,\\n        amount: int,\\n) -> None:\\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\\n\\n    await permission_service.is_moderator(moderator_id)\\n\\n    return await moderator_service.increase_referrer_bonus(user_id, amount)\\n\"\n  },\n  {\n    \"path\": \"backend/routes/moderator/__init__.py\",\n    \"content\": \"from fastapi import APIRouter\\n\\nfrom .products import router as products_router\\nfrom .users import router as users_router\\nfrom .push import router as pushes_router\\n\\nrouter = APIRouter(\\n    prefix='/moderator',\\n    tags=['Moderator']\\n)\\n\\nrouter.include_router(products_router)\\nrouter.include_router(users_router)\\nrouter.include_router(pushes_router)\\n\"\n  },\n  {\n    \"path\": \"backend/routes/moderator/products.py\",\n    \"content\": \"from uuid import UUID\\n\\nfrom fastapi import APIRouter, Request\\n\\nfrom domain.models import Product\\nfrom routes.moderator.utils import moderator_pre_request\\nfrom routes.requests.moderator import UpdateProductStatusRequest\\n\\nrouter = APIRouter(\\n    prefix='/products',\\n)\\n\\n@router.get('')\\nasync def get_products(\\n        request: Request,\\n) -> list[Product]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_products()\\n\\n\\n@router.get('/to-review')\\nasync def get_products_to_review(\\n        request: Request,\\n) -> list[Product]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_products_to_review()\\n\\n\\n@router.get('/{product_id}')\\nasync def get_product(\\n        request: Request,\\n        product_id: UUID,\\n) -> Product:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_product(product_id)\\n\\n\\n@router.patch('/{product_id}')\\nasync def review_product(\\n        request: Request,\\n        product_id: UUID,\\n        update_request: UpdateProductStatusRequest,\\n) -> None:\\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\\n\\n    await moderator_service.review_product(\\n        product_id=product_id,\\n        moderator_id=moderator_id,\\n        request=update_request,\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/routes/moderator/utils.py\",\n    \"content\": \"from uuid import UUID\\n\\nfrom fastapi import Request\\n\\nfrom abstractions.services.moderator import ModeratorServiceInterface\\nfrom abstractions.services.permissions import PermissionServiceInterface\\nfrom dependencies.services.moderator import get_moderator_service\\nfrom dependencies.services.permissions import get_permission_service\\nfrom routes.utils import get_user_id_from_request\\n\\n\\nasync def moderator_pre_request(request: Request) -> tuple[UUID, ModeratorServiceInterface, PermissionServiceInterface]:\\n    permission_service = get_permission_service()\\n\\n    moderator_id = get_user_id_from_request(request)\\n\\n    await permission_service.is_moderator(moderator_id)\\n\\n    return moderator_id, get_moderator_service(), permission_service\\n\"\n  },\n  {\n    \"path\": \"backend/routes/moderator/push.py\",\n    \"content\": \"from typing import Annotated\\nfrom uuid import UUID\\n\\nfrom fastapi import APIRouter, Request, Form, HTTPException\\n\\nfrom dependencies.services.upload import get_upload_service\\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\\nfrom domain.models import Push\\nfrom routes.moderator.utils import moderator_pre_request\\nfrom routes.requests.push import CreatePushRequest, UpdatePushRequest\\n\\nrouter = APIRouter(\\n    prefix='/pushes'\\n)\\n\\n\\n@router.get('')\\nasync def get_pushes(request: Request) -> list[Push]:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_pushes()\\n\\n\\n@router.get('/{push_id}')\\nasync def get_push(\\n        push_id: UUID,\\n        request: Request,\\n) -> Push:\\n    _, moderator_service, _ = await moderator_pre_request(request)\\n\\n    return await moderator_service.get_push(push_id)\\n\\n\\n@router.post('')\\nasync def create_push(\\n        create_request: Annotated[CreatePushRequest, Form()],\\n        request: Request,\\n) -> None:\\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\\n\\n    create_dto = CreatePushDTO(\\n        title=create_request.title,\\n        text=create_request.text,\\n        creator_id=moderator_id,\\n        button_text=create_request.button_text,\\n        button_link=create_request.button_link,\\n    )\\n\\n    if create_request.image:\\n        upload_service = get_upload_service()\\n        try:\\n            create_dto.image_path = await upload_service.upload(create_request.image)\\n        except Exception as e:\\n            raise HTTPException(\\n                status_code=500,\\n                detail=\\\"Не удалось сохранить файл search_query_screenshot\\\"\\n            ) from e\\n\\n    await moderator_service.create_push(create_dto)\\n\\n\\n@router.patch('/{push_id}')\\nasync def update_push(\\n        request: Request,\\n        push_id: UUID,\\n        update_request: Annotated[UpdatePushRequest, Form()],\\n) -> None:\\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\\n\\n    update_dto = UpdatePushDTO(\\n        title=update_request.title,\\n        text=update_request.text,\\n        button_text=update_request.button_text,\\n        button_link=update_request.button_link,\\n    )\\n\\n    request_dump = update_request.model_dump(exclude_unset=True)\\n    if image := request_dump.get('image', None):\\n        upload_service = get_upload_service()\\n        update_dto.image_path = await upload_service.upload(image)\\n\\n    await moderator_service.update_push(\\n        push_id=push_id,\\n        update_dto=update_dto,\\n    )\\n\\n\\n@router.delete('/{push_id}')\\nasync def delete_push(\\n        request: Request,\\n        push_id: UUID,\\n) -> None:\\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\\n    await moderator_service.delete_push(\\n        push_id=push_id\\n    )\\n\\n\\n@router.post('/{push_id}/activate')\\nasync def activate_push(\\n        push_id: UUID,\\n        user_ids: list[UUID],\\n        request: Request,\\n) -> None:\\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\\n\\n    await moderator_service.activate_push(\\n        push_id=push_id,\\n        user_ids=user_ids,\\n    )\\n\"\n  },\n  {\n    \"path\": \"backend/routes/user/order.py\",\n    \"content\": \"from uuid import UUID\\n\\nfrom fastapi import APIRouter, Request\\n\\nfrom dependencies.services.order import get_order_service\\nfrom domain.models import Order\\nfrom domain.responses.order_report import OrderReport\\nfrom routes.utils import get_user_id_from_request\\n\\nrouter = APIRouter(\\n    prefix=\\\"/orders\\\",\\n)\\n\\n\\n@router.get(\\\"\\\")\\nasync def get_orders_by_user(request: Request) -> list[Order]:\\n    user_id = get_user_id_from_request(request)\\n    order_service = get_order_service()\\n    return await order_service.get_orders_by_user(user_id)\\n\\n\\n@router.get(\\\"/reports/{seller_id}\\\")\\nasync def get_orders_by_seller(request: Request, seller_id: UUID) -> list[Order]:\\n    order_service = get_order_service()\\n    return await order_service.get_orders_by_seller(seller_id)\\n\\n\\n@router.get(\\\"/report/{order_id}\\\")\\nasync def get_user_report(request: Request, order_id: UUID) -> OrderReport:\\n    order_service = get_order_service()\\n    return await order_service.get_user_report(order_id)\\n\"\n  },\n  {\n    \"path\": \"backend/routes/user/__init__.py\",\n    \"content\": \"import logging\\nfrom uuid import UUID\\n\\nfrom fastapi import APIRouter, Request, HTTPException, Form\\n\\nfrom dependencies.services.user import get_user_service\\nfrom domain.dto import CreateUserDTO, UpdateUserDTO\\nfrom domain.models import User\\nfrom routes.requests.user import CreateUserRequest, UpdateUserRequest\\nfrom .order import router as order_router\\nfrom .product import router as product_router\\nfrom ..utils import get_user_id_from_request\\n\\nrouter = APIRouter(\\n    prefix=\\\"/users\\\",\\n    tags=[\\\"Users\\\"],\\n)\\nrouter.include_router(product_router)\\nrouter.include_router(order_router)\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n# todo: все ручки кроме get /me - в модераторский роутер и в модераторский сервис\\n@router.get(\\\"\\\")\\nasync def list_users(request: Request):\\n    user_service = get_user_service()\\n    users = await user_service.get_users()  # Метод должен возвращать список пользователей\\n    return users\\n\\n\\n@router.get(\\\"/me\\\")\\nasync def get_me(request: Request) -> User:\\n    user_id = get_user_id_from_request(request)\\n    logger.info(\\\"id AAAA\\\")\\n    logger.info(user_id)\\n    user_service = get_user_service()\\n    user = await user_service.get_user(user_id)\\n    return user\\n\\n\\n@router.get(\\\"/invite\\\")\\nasync def get_invite_link(request: Request):\\n    user_service = get_user_service()\\n    user_id = get_user_id_from_request(request)\\n\\n    link = await user_service.get_invite_link(user_id)\\n\\n    return link\\n\\n\\n@router.get(\\\"/{user_id}\\\")\\nasync def get_user(user_id: UUID, request: Request):\\n    user_service = get_user_service()\\n    user = await user_service.get_user(user_id)\\n    if not user:\\n        raise HTTPException(status_code=404, detail=\\\"User not found\\\")\\n\\n    return user\\n\\n\\n@router.post(\\\"\\\")\\nasync def create_user(request: Request, user_req: CreateUserRequest):\\n    user_service = get_user_service()\\n    dto = CreateUserDTO(**user_req.dict())\\n    user = await user_service.create_user(dto)\\n    return user\\n\\n\\n@router.patch(\\\"/{user_id}\\\")\\nasync def update_user(user_id: UUID, request: Request, user_req: UpdateUserRequest):\\n    user_service = get_user_service()\\n    dto = UpdateUserDTO(**user_req.model_dump(exclude_unset=True))\\n    await user_service.update_user(user_id, dto)\\n    return {\\\"message\\\": \\\"User updated successfully\\\"}\\n\\n\\n@router.delete(\\\"/{user_id}\\\")\\nasync def delete_user(user_id: UUID, request: Request):\\n    user_service = get_user_service()\\n    await user_service.delete_user(user_id)\\n    return {\\\"message\\\": \\\"User deleted successfully\\\"}\\n\\n\\n@router.patch(\\\"/balance/{user_id}\\\")\\nasync def increase_balance(\\n        request: Request,\\n        user_id: UUID,\\n        balance: int = Form(...),\\n):\\n    user_service = get_user_service()\\n    await user_service.increase_balance(user_id, balance)\\n\\n\\n@router.get(\\\"/balance/{user_id}\\\")\\nasync def get_balance(request: Request):\\n    user_service = get_user_service()\\n    user = await user_service.get_user(get_user_id_from_request(request))\\n    return user.balance\\n\"\n  },\n  {\n    \"path\": \"backend/routes/user/product.py\",\n    \"content\": \"from uuid import UUID\\n\\nfrom fastapi import APIRouter, Request\\n\\nfrom dependencies.services.product import get_product_service\\nfrom dependencies.services.user import get_user_service\\nfrom domain.models import Product\\nfrom routes.utils import get_user_id_from_request\\n\\nrouter = APIRouter(\\n    prefix=\\\"/products\\\",\\n)\\n\\n\\n@router.get(\\\"\\\")\\nasync def get_products_by_user(request: Request) -> list[Product]:\\n    user_id = get_user_id_from_request(request)\\n    user_service = get_user_service()\\n    return await user_service.get_products_by_user(user_id)\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/auth.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass TelegramAuthRequest(BaseModel):\\n    initData: str\\n    ref: Optional[UUID] = None\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/user.py\",\n    \"content\": \"from pydantic import BaseModel, EmailStr, Field\\nfrom typing import Optional\\n\\nclass CreateUserRequest(BaseModel):\\n    telegram_id: Optional[int] = Field(None, description=\\\"Telegram ID пользователя\\\")\\n    nickname: Optional[str] = Field(None, description=\\\"Ник пользователя\\\")\\n    email: EmailStr = Field(..., description=\\\"Email пользователя\\\")\\n    password: str = Field(..., min_length=6, description=\\\"Пароль пользователя\\\")\\n\\nclass UpdateUserRequest(BaseModel):\\n    nickname: Optional[str] = Field(None, description=\\\"Новое имя или ник пользователя\\\")\\n    email: Optional[EmailStr] = Field(None, description=\\\"Новый email пользователя\\\")\\n    password: Optional[str] = Field(None, min_length=6, description=\\\"Новый пароль пользователя\\\")\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/order.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\nfrom pydantic import BaseModel, Field\\n\\nclass CreateOrderRequest(BaseModel):\\n    user_id: UUID = Field(..., description=\\\"ID пользователя, который оформляет заказ\\\")\\n    product_id: UUID = Field(..., description=\\\"ID продукта, который заказывается\\\")\\n    card_number: str = Field(..., min_length=13, max_length=19, description=\\\"Номер карты для оплаты\\\")\\n\\n\\nclass UpdateOrderRequest(BaseModel):\\n    status: Optional[str] = Field(None, description=\\\"Новый статус заказа (например, 'pending', 'approved', 'rejected')\\\")\\n    card_number: Optional[str] = Field(None, description=\\\"Новая карта\\\")\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/routes/requests/review.py\",\n    \"content\": \"from uuid import UUID\\n\\nfrom pydantic import BaseModel, Field\\nfrom typing import Optional\\n\\nclass CreateReviewRequest(BaseModel):\\n    user_id: UUID = Field(..., description=\\\"ID юзера, который оценивается\\\")\\n    product_id: UUID = Field(..., description=\\\"ID продукта, который оценивается\\\")\\n    rating: int = Field(..., ge=1, le=5, description=\\\"Оценка продукта от 1 до 5\\\")\\n    comment: str = Field(..., description=\\\"Комментарий к отзыву\\\")\\n\\nclass UpdateReviewRequest(BaseModel):\\n    rating: Optional[int] = Field(None, ge=1, le=5, description=\\\"Обновлённая оценка продукта (от 1 до 5)\\\")\\n    comment: Optional[str] = Field(None, description=\\\"Обновлённый комментарий\\\")\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/moderator.py\",\n    \"content\": \"from typing import Optional\\n\\nfrom pydantic import BaseModel, Field\\n\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass UpdateProductStatusRequest(BaseModel):\\n    status: Optional[ProductStatus] = None\\n    comment_to_seller: Optional[str] = Field(None, validation_alias=\\\"commentSeller\\\")\\n    comment_to_moderator: Optional[str] = Field(None, validation_alias=\\\"commentModerator\\\")\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/update_product.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel\\nfrom fastapi import UploadFile\\nfrom infrastructure.enums.category import Category\\nfrom infrastructure.enums.payout_time import PayoutTime\\nfrom infrastructure.enums.product_status import ProductStatus\\n\\n\\nclass UpdateProductForm(BaseModel):\\n    name: Optional[str] = None\\n    article: Optional[str] = None\\n    brand: Optional[str] = None\\n    category: Optional[Category] = None\\n    key_word: Optional[str] = None\\n    general_repurchases: Optional[int] = None\\n    daily_repurchases: Optional[int] = None\\n    price: Optional[float] = None\\n    wb_price: Optional[float] = None\\n    tg: Optional[str] = None\\n    status: Optional[ProductStatus] = None\\n    payment_time: Optional[PayoutTime] = None\\n    review_requirements: Optional[str] = None\\n    image: Optional[UploadFile] = None\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/product.py\",\n    \"content\": \"from typing import Optional\\n\\nfrom pydantic import BaseModel, Field\\n\\nfrom infrastructure.enums.category import Category\\nfrom infrastructure.enums.payout_time import PayoutTime\\n\\n\\nclass CreateProductRequest(BaseModel):\\n    name: str = Field(..., description=\\\"Название товара\\\")\\n    article: str = Field(..., description=\\\"Уникальный артикул товара\\\")\\n    brand: str = Field(..., description=\\\"Бренд товара\\\")\\n    category: Category = Field(..., description=\\\"Категория товара\\\")\\n    key_word: str = Field(..., description=\\\"Ключевое слово\\\")\\n    general_repurchases: int = Field(..., description=\\\"Общий план по выкупам\\\")\\n    daily_repurchases: int = Field(..., description=\\\"План по выкупам на день\\\")\\n    price: float = Field(..., gt=0, description=\\\"Цена товара\\\")\\n    wb_price: float = Field(..., description=\\\"Цена товара на вб\\\")\\n    tg: str = Field(..., description=\\\"Телеграм для связи с продавцом\\\")\\n    payment_time: PayoutTime = Field(..., description=\\\"Время выплаты\\\")\\n    review_requirements: str = Field(..., description=\\\"Требования к отзыву\\\")\\n    image_path: Optional[str] = Field(None, description=\\\"Путь к изображению товара\\\")\\n\\n\\nclass UpdateProductRequest(BaseModel):\\n    name: Optional[str] = Field(None, description=\\\"Название товара\\\")\\n    article: Optional[str] = Field(None, description=\\\"Уникальный артикул товара\\\")\\n    brand: Optional[str] = Field(None, description=\\\"Бренд товара\\\")\\n    category: Category = Field(..., description=\\\"Категория товара\\\")\\n    key_word: Optional[str] = Field(None, description=\\\"Ключевое слово\\\")\\n    general_repurchases: Optional[int] = Field(None, description=\\\"Общий план по выкупам\\\")\\n    daily_repurchases: Optional[int] = Field(None, description=\\\"План по выкупам на день\\\")\\n    price: Optional[float] = Field(None, gt=0, description=\\\"Цена товара\\\")\\n    wb_price: Optional[float] = Field(None, description=\\\"Цена товара на вб\\\")\\n    tg: Optional[str] = Field(None, description=\\\"Телеграм для связи с продавцом\\\")\\n    payment_time: Optional[PayoutTime] = Field(None, description=\\\"Время выплаты\\\")\\n    review_requirements: Optional[str] = Field(None, description=\\\"Требования к отзыву\\\")\\n    image_path: Optional[str] = Field(None, description=\\\"Путь к изображению товара\\\")\\n\"\n  },\n  {\n    \"path\": \"backend/routes/requests/push.py\",\n    \"content\": \"from typing import Optional\\n\\nfrom fastapi import UploadFile\\nfrom pydantic import BaseModel\\n\\n\\nclass CreatePushRequest(BaseModel):\\n    title: str\\n    text: str\\n    image: Optional[UploadFile] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\\n\\nclass UpdatePushRequest(BaseModel):\\n    title: Optional[str] = None\\n    text: Optional[str] = None\\n    image: Optional[UploadFile] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"backend/services/user.py\",\n    \"content\": \"import logging\\nfrom dataclasses import dataclass\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import ProductRepositoryInterface\\nfrom abstractions.repositories.user import UserRepositoryInterface\\nfrom abstractions.services import UserServiceInterface\\nfrom abstractions.services.notification import NotificationServiceInterface\\nfrom domain.dto import CreateUserDTO, UpdateUserDTO, UpdateProductDTO\\nfrom domain.models import User\\nfrom infrastructure.enums.product_status import ProductStatus\\nfrom infrastructure.enums.user_role import UserRole\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass UserService(UserServiceInterface):\\n    user_repository: UserRepositoryInterface\\n    notification_service: NotificationServiceInterface\\n    product_repository: ProductRepositoryInterface\\n\\n    bot_username: str\\n\\n    async def create_user(self, dto: CreateUserDTO) -> None:\\n        return await self.user_repository.create(dto)\\n\\n    async def get_user(self, user_id: UUID) -> User:\\n        return await self.user_repository.get(user_id)\\n\\n    async def update_user(self, user_id: UUID, dto: UpdateUserDTO) -> None:\\n        await self.user_repository.update(user_id, dto)\\n\\n    async def delete_user(self, user_id: UUID) -> None:\\n        await self.user_repository.delete(user_id)\\n\\n    async def get_users(self, limit: int = 100, offset: int = 0) -> List[User]:\\n        return await self.user_repository.get_all(limit=limit, offset=offset)\\n\\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\\n        return await self.user_repository.ensure_user(dto)\\n\\n    async def get_user_products(self, user_id: UUID):\\n        return await self.user_repository.get_user_products(user_id)\\n\\n    async def ban(self, user_id: UUID):\\n        dto = UpdateUserDTO(\\n            is_banned=True,\\n        )\\n        await self.user_repository.update(\\n            obj_id=user_id,\\n            obj=dto,\\n        )\\n\\n    async def unban(self, user_id: UUID):\\n        dto = UpdateUserDTO(\\n            is_banned=False,\\n        )\\n        await self.user_repository.update(\\n            obj_id=user_id,\\n            obj=dto,\\n        )\\n\\n    async def promote_user(self, user_id: UUID):\\n        dto = UpdateUserDTO(\\n            role=UserRole.MODERATOR,\\n        )\\n        await self.user_repository.update(\\n            obj_id=user_id,\\n            obj=dto,\\n        )\\n\\n    async def demote_user(self, user_id: UUID) -> None:\\n        dto = UpdateUserDTO(\\n            role=UserRole.USER,\\n        )\\n        await self.user_repository.update(\\n            obj_id=user_id,\\n            obj=dto,\\n        )\\n\\n    async def get_banned(self) -> list[User]:\\n        return await self.user_repository.get_banned()\\n\\n    async def get_sellers(self) -> list[User]:\\n        return await self.user_repository.get_sellers()\\n\\n    async def get_clients(self) -> list[User]:\\n        return await self.user_repository.get_clients()\\n\\n    async def get_moderators(self) -> list[User]:\\n        return await self.user_repository.get_moderators()\\n\\n    async def increase_balance(self, user_id: UUID, balance_sum: int):\\n        user = await self.user_repository.get(user_id)\\n        update_dto = UpdateUserDTO(\\n            balance=user.balance + balance_sum,\\n        )\\n        res = await self.user_repository.update(user_id, update_dto)\\n        try:\\n            await self.notification_service.send_balance_increased(\\n                user_id=user_id,\\n                amount=balance_sum,\\n            )\\n        except Exception:\\n            logger.error(\\\"Error while sending push notification\\\", exc_info=True)\\n\\n        products = await self.product_repository.get_by_seller(user_id)\\n        necessary_balance = sum(product.remaining_products for product in products if product.status==ProductStatus.ACTIVE\\n                                or product.status==ProductStatus.NOT_PAID)\\n        if user.balance + balance_sum >= necessary_balance:\\n            for product in products:\\n                if product.status == ProductStatus.NOT_PAID:\\n                    update_product_dto = UpdateProductDTO(\\n                        status=ProductStatus.ACTIVE,\\n                    )\\n                    await self.product_repository.update(product.id, update_product_dto)\\n        else:\\n            active_products_sum = sum(product.remaining_products for product in products if product.status == ProductStatus.ACTIVE)\\n            not_paid_products = [product for product in products if product.status == ProductStatus.NOT_PAID]\\n            for product in not_paid_products:\\n                if user.balance + balance_sum >= active_products_sum + product.remaining_products:\\n                    update_product_dto = UpdateProductDTO(\\n                        status=ProductStatus.ACTIVE,\\n                    )\\n                    await self.product_repository.update(product.id, update_product_dto)\\n\\n\\n\\n\\n\\n        return res\\n\\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\\n        await self.user_repository.increase_referrer_bonus(user_id, bonus)\\n\\n    async def use_discount(self, user_id: UUID) -> None:\\n        update_dto = UpdateUserDTO(\\n            has_discount=False,\\n        )\\n\\n        await self.user_repository.update(user_id, update_dto)\\n\\n    async def get_invite_link(self, user_id: UUID) -> str:\\n        return f'https://t.me/{self.bot_username}?start={user_id}'\\n\"\n  },\n  {\n    \"path\": \"backend/services/upload.py\",\n    \"content\": \"import logging\\nimport os\\nfrom dataclasses import dataclass, field\\nfrom typing import Annotated\\nfrom uuid import uuid4\\n\\nimport aiofiles\\nfrom fastapi import UploadFile\\n\\nfrom abstractions.services.upload import UploadServiceInterface\\n\\nlogger = logging.getLogger(__name__)\\n\\n@dataclass\\nclass UploadService(UploadServiceInterface):\\n    images_dir: str = field(default=\\\"/app/upload\\\")\\n\\n    async def initialize(self) -> None:\\n        os.makedirs(self.images_dir, exist_ok=True)\\n\\n    async def upload(self, file: UploadFile) -> str:\\n        new_filename, new_filepath = self._get_new_file_path(file.filename)\\n        try:\\n            async with aiofiles.open(new_filepath, \\\"wb\\\") as f:\\n                content = await file.read()\\n                await f.write(content)\\n            return new_filename\\n        except Exception:\\n            logger.error(\\\"There was an error while uploading file\\\", exc_info=True)\\n            raise\\n\\n    def get_file_path(self, filename: str) -> str:\\n        return os.path.join(self.images_dir, filename)\\n\\n    def _get_new_file_path(\\n            self,\\n            filename: str,\\n    ) -> tuple[\\n        Annotated[str, 'filename'],\\n        Annotated[str, 'file path'],\\n    ]:\\n        new_filename = f\\\"{uuid4()}.{filename.split('.')[-1]}\\\"\\n        return new_filename, self.get_file_path(new_filename)\\n\"\n  },\n  {\n    \"path\": \"backend/services/permission.py\",\n    \"content\": \"from dataclasses import dataclass\\nfrom uuid import UUID\\n\\nfrom abstractions.services import UserServiceInterface\\nfrom abstractions.services.permissions import PermissionServiceInterface\\nfrom infrastructure.enums.user_role import UserRole\\nfrom services.exceptions import PermissionException\\n\\n\\n@dataclass\\nclass PermissionService(PermissionServiceInterface):\\n    user_service: UserServiceInterface\\n\\n    async def is_moderator(self, user_id: UUID) -> None:\\n        user = await self.user_service.get_user(user_id)\\n        is_moderator = user.role == UserRole.MODERATOR or user.role == UserRole.ADMIN\\n\\n        if not is_moderator:\\n            raise PermissionException(\\\"Only moderators can do this\\\")\\n\\n    async def is_admin(self, user_id: UUID) -> None:\\n        user = await self.user_service.get_user(user_id)\\n        is_moderator = user.role == UserRole.ADMIN\\n\\n        if not is_moderator:\\n            raise PermissionException(\\\"Only admins can do this\\\")\\n\"\n  },\n  {\n    \"path\": \"backend/services/order.py\",\n    \"content\": \"from dataclasses import dataclass\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import OrderRepositoryInterface, ProductRepositoryInterface, UserRepositoryInterface\\nfrom abstractions.services import OrderServiceInterface\\nfrom abstractions.services.notification import NotificationServiceInterface\\nfrom domain.dto import UpdateOrderDTO, CreateOrderDTO, UpdateUserDTO, UpdateProductDTO\\nfrom domain.models import Order\\nfrom domain.responses.order_report import OrderReport\\nfrom infrastructure.enums.order_status import OrderStatus\\nfrom infrastructure.enums.product_status import ProductStatus\\nfrom infrastructure.enums.user_role import UserRole\\n\\n\\n@dataclass\\nclass OrderService(OrderServiceInterface):\\n    order_repository: OrderRepositoryInterface\\n    product_repository: ProductRepositoryInterface\\n    notification_service: NotificationServiceInterface\\n    user_repository: UserRepositoryInterface\\n\\n    async def create_order(self, dto: CreateOrderDTO) -> UUID:\\n        await self.order_repository.create(dto)\\n        order = await self.order_repository.get(dto.id)\\n        return order.id\\n\\n    async def get_order(self, order_id: UUID) -> Order:\\n        return await self.order_repository.get(order_id)\\n\\n    async def update_order(self, order_id: UUID, dto: UpdateOrderDTO) -> None:\\n        await self.order_repository.update(order_id, dto)\\n        order = await self.order_repository.get(order_id)\\n        product = await self.product_repository.get(order.product_id)\\n        seller = await self.user_repository.get(product.seller_id)\\n        if dto.step == 5:\\n            if seller.role == UserRole.CLIENT or seller.role == UserRole.USER:\\n                seller_dto = UpdateUserDTO(\\n                    role=UserRole.SELLER,\\n                    balance=seller.balance - 1\\n                )\\n            else:\\n                seller_dto = UpdateUserDTO(\\n                    balance=seller.balance - 1\\n                )\\n            await self.user_repository.update(seller.id, seller_dto)\\n\\n            product = await self.product_repository.get(product.id)\\n            remaining_products = product.remaining_products - 1\\n            if remaining_products == 0:\\n                product_dto = UpdateProductDTO(\\n                    remaining_products=product.remaining_products - 1,\\n                    status=ProductStatus.ARCHIVED\\n                )\\n            else:\\n                product_dto = UpdateProductDTO(\\n                    remaining_products=product.remaining_products - 1,\\n                )\\n\\n            await self.product_repository.update(product.id, product_dto)\\n        if dto.status == OrderStatus.CASHBACK_PAID:\\n            await self.notification_service.send_cashback_paid(order_id)\\n\\n            order = await self.order_repository.get(order_id)\\n            user_dto = UpdateUserDTO(\\n                role=UserRole.CLIENT,\\n            )\\n            await self.user_repository.update(order.user_id, user_dto)\\n\\n    async def delete_order(self, order_id: UUID) -> None:\\n        await self.order_repository.delete(order_id)\\n\\n    async def get_orders(self, limit: int = 100, offset: int = 0) -> List[Order]:\\n        return await self.order_repository.get_all(limit=limit, offset=offset)\\n\\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\\n        return await self.order_repository.get_orders_by_user(user_id=user_id)\\n\\n    async def get_user_report(self, order_id: UUID) -> OrderReport:\\n        order = await self.order_repository.get(order_id)\\n        product = await self.product_repository.get(order.product_id)\\n        order_dict = order.model_dump()\\n        order_dict['article'] = product.article\\n        order_dict['cashback'] = product.wb_price - product.price\\n        order_report = OrderReport.model_validate(order_dict)\\n        return order_report\\n\\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\\n        orders = await self.order_repository.get_orders_by_seller(seller_id)\\n        return orders\\n\"\n  },\n  {\n    \"path\": \"backend/services/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/services/review.py\",\n    \"content\": \"from dataclasses import dataclass\\nfrom typing import List\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import ReviewRepositoryInterface\\nfrom abstractions.services import ReviewServiceInterface\\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\\nfrom domain.models import Review\\n\\n\\n@dataclass\\nclass ReviewService(ReviewServiceInterface):\\n    review_repository: ReviewRepositoryInterface\\n\\n    async def create_review(self, dto: CreateReviewDTO) -> None:\\n        return await self.review_repository.create(dto)\\n\\n    async def get_review(self, review_id: UUID) -> Review:\\n        return await self.review_repository.get(review_id)\\n\\n    async def update_review(self, review_id: UUID, dto: UpdateReviewDTO) -> None:\\n        await self.review_repository.update(review_id, dto)\\n\\n    async def delete_review(self, review_id: UUID) -> None:\\n        await self.review_repository.delete(review_id)\\n\\n    async def get_reviews(self, limit: int = 100, offset: int = 0) -> List[Review]:\\n        return await self.review_repository.get_all(limit=limit, offset=offset)\\n\\n    async def list_reviews_by_product(self, product_id: UUID) -> List[Review]:\\n        return await self.review_repository.get_reviews_by_product(product_id=product_id)\\n\\n\\n\"\n  },\n  {\n    \"path\": \"backend/services/moderator.py\",\n    \"content\": \"import logging\\nfrom dataclasses import dataclass\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import ProductRepositoryInterface\\nfrom abstractions.repositories.moderator_review import ModeratorReviewRepositoryInterface\\nfrom abstractions.services import UserServiceInterface\\nfrom abstractions.services.moderator import ModeratorServiceInterface\\nfrom abstractions.services.notification import NotificationServiceInterface\\nfrom domain.dto import UpdateProductDTO, CreatePushDTO, UpdatePushDTO\\nfrom domain.dto.moderator_review import CreateModeratorReviewDTO\\nfrom domain.models import Product, User, Push\\nfrom infrastructure.enums.product_status import ProductStatus\\nfrom routes.requests.moderator import UpdateProductStatusRequest\\n\\nlogger = logging.getLogger(__name__)\\n@dataclass\\nclass ModeratorService(ModeratorServiceInterface):\\n    products_repository: ProductRepositoryInterface\\n    user_service: UserServiceInterface\\n    moderator_review_repository: ModeratorReviewRepositoryInterface\\n    notification_service: NotificationServiceInterface\\n\\n    async def get_products(self) -> list[Product]:\\n        return await self.products_repository.get_all()\\n\\n    async def get_product(self, product_id: UUID) -> Product:\\n        return await self.products_repository.get(product_id)\\n\\n    async def get_products_to_review(self) -> list[Product]:\\n        return await self.products_repository.get_products_to_review()\\n\\n    async def review_product(\\n            self,\\n            product_id: UUID,\\n            moderator_id: UUID,\\n            request: UpdateProductStatusRequest,\\n    ):\\n        product = await self.products_repository.get(product_id)\\n\\n        if request.status == ProductStatus.ACTIVE:\\n            product = await self.products_repository.get(product_id)\\n            logger.info(f\\\"Reviewing product {product}\\\")\\n            seller = await self.user_service.get_user(product.seller_id)\\n            seller_products = await self.products_repository.get_by_seller(product.seller_id)\\n            required_balance = sum(product.general_repurchases for product in seller_products)\\n            logger.info(f\\\"required_balance {required_balance}\\\")\\n            logger.info(f\\\"seller.balance {seller.balance}\\\")\\n            if required_balance > seller.balance:\\n                status = ProductStatus.NOT_PAID\\n            else:\\n                status = request.status\\n        else:\\n            status = request.status\\n        product_dto = UpdateProductDTO(\\n            status=status,\\n        )\\n        logger.info(request)\\n        review_dto = CreateModeratorReviewDTO(\\n            moderator_id=moderator_id,\\n            product_id=product_id,\\n            comment_to_seller=request.comment_to_seller,\\n            comment_to_moderator=request.comment_to_moderator,\\n            status_before=product.status,\\n            status_after=status,\\n        )\\n        await self.moderator_review_repository.create(review_dto)\\n        await self.products_repository.update(\\n            obj_id=product_id,\\n            obj=product_dto,\\n        )\\n\\n    async def get_users(self) -> list[User]:\\n        return await self.user_service.get_users()\\n\\n    async def get_user(self, user_id: UUID) -> User:\\n         return await self.user_service.get_user(user_id)\\n\\n    async def get_moderators(self) -> list[User]:\\n        return await self.user_service.get_moderators()\\n\\n    async def get_sellers(self) -> list[User]:\\n        return await self.user_service.get_sellers()\\n\\n    async def get_clients(self) -> list[User]:\\n        return await self.user_service.get_clients()\\n\\n    async def get_banned(self) -> list[User]:\\n        return await self.user_service.get_banned()\\n\\n    async def ban_user(self, user_id: UUID):\\n        await self.user_service.ban(user_id)\\n\\n    async def unban_user(self, user_id: UUID):\\n        await self.user_service.unban(user_id)\\n\\n    async def promote_user(self, user_id: UUID):\\n        await self.user_service.promote_user(user_id)\\n\\n    async def demote_user(self, user_id: UUID):\\n        await self.user_service.demote_user(user_id)\\n\\n    async def create_push(self, push: CreatePushDTO) -> None:\\n        await self.notification_service.create_push(push)\\n\\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\\n        await self.notification_service.activate_push(push_id, user_ids)\\n\\n    async def get_pushes(self) -> list[Push]:\\n        return await self.notification_service.get_pushes()\\n\\n    async def get_push(self, push_id: UUID) -> Push:\\n        return await self.notification_service.get_push(push_id)\\n\\n    async def update_push(self, push_id: UUID, update_dto: UpdatePushDTO) -> None:\\n        return await self.notification_service.update_push(push_id, update_dto)\\n\\n    async def delete_push(self, push_id: UUID) -> None:\\n        return await self.notification_service.delete_push(push_id)\\n\\n    async def use_discount(self, user_id: UUID) -> None:\\n        await self.user_service.use_discount(user_id)\\n\\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\\n        await self.user_service.increase_referrer_bonus(user_id, bonus)\\n\"\n  },\n  {\n    \"path\": \"backend/services/exceptions.py\",\n    \"content\": \"class PermissionException(Exception):\\n    ...\\n\\nclass BannedUserException(Exception):\\n    ...\"\n  },\n  {\n    \"path\": \"backend/services/notifications.py\",\n    \"content\": \"from dataclasses import dataclass\\nfrom uuid import UUID\\n\\nfrom httpx import AsyncClient\\n\\nfrom abstractions.repositories import OrderRepositoryInterface, UserRepositoryInterface\\nfrom abstractions.repositories.push import PushRepositoryInterface\\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\\nfrom abstractions.services.notification import NotificationServiceInterface\\nfrom domain.dto import CreatePushDTO, CreateUserPushDTO, UpdatePushDTO\\nfrom domain.models import Push\\n\\n\\n@dataclass\\nclass NotificationService(NotificationServiceInterface):\\n    token: str\\n    orders_repository: OrderRepositoryInterface\\n    users_repository: UserRepositoryInterface\\n    push_repository: PushRepositoryInterface\\n    user_push_repository: UserPushRepositoryInterface\\n\\n    async def send_cashback_paid(self, order_id: UUID) -> None:\\n        order = await self.orders_repository.get(order_id)\\n        user = await self.users_repository.get(order.user_id)\\n        async with AsyncClient() as client:\\n            await client.post(\\n                url=f'https://api.telegram.org/bot{self.token}/sendMessage',\\n                params={\\n                    'chat_id': user.telegram_id,\\n                    'text': 'Ваш кешбек выплачен!',\\n                }\\n            )\\n\\n    async def send_balance_increased(self, user_id: UUID, amount: int) -> None:\\n        user = await self.users_repository.get(user_id)\\n        async with AsyncClient() as client:\\n            await client.post(\\n                url=f'https://api.telegram.org/bot{self.token}/sendMessage',\\n                params={\\n                    'chat_id': user.telegram_id,\\n                    'text': f'Ваш баланс полонен на {amount} раздач',\\n                }\\n            )\\n\\n    async def create_push(self, push: CreatePushDTO) -> None:\\n        await self.push_repository.create(push)\\n\\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\\n        dtos = [CreateUserPushDTO(push_id=push_id, user_id=user_id) for user_id in user_ids]\\n        await self.user_push_repository.create_many(dtos)\\n\\n    async def get_push(self, push_id: UUID) -> Push:\\n        return await self.push_repository.get(push_id)\\n\\n    async def get_pushes(self) -> list[Push]:\\n        return await self.push_repository.get_all()\\n\\n    async def update_push(self, push_id: UUID, push: UpdatePushDTO) -> None:\\n        return await self.push_repository.update(push_id, push)\\n\\n    async def delete_push(self, push_id: UUID) -> None:\\n        return await self.push_repository.delete(push_id)\\n\"\n  },\n  {\n    \"path\": \"backend/services/product.py\",\n    \"content\": \"from dataclasses import dataclass\\nfrom typing import List, Optional\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import ProductRepositoryInterface, UserRepositoryInterface\\nfrom abstractions.services import ProductServiceInterface\\nfrom domain.dto import CreateProductDTO, UpdateProductDTO, UpdateUserDTO\\nfrom domain.models import Product\\n\\n\\n@dataclass\\nclass ProductService(ProductServiceInterface):\\n    product_repository: ProductRepositoryInterface\\n    user_repository: UserRepositoryInterface\\n\\n    async def create_product(self, dto: CreateProductDTO) -> UUID:\\n        await self.product_repository.create(dto)\\n        update_user = UpdateUserDTO(\\n            is_seller=True,\\n        )\\n        await self.user_repository.update(\\n            obj_id=dto.seller_id,\\n            obj=update_user\\n        )\\n        # await self.user_repository.become_seller(dto.seller_id)\\n        return dto.id\\n\\n    async def get_product(self, product_id: UUID) -> Product:\\n        return await self.product_repository.get(product_id)\\n\\n    async def update_product(self, product_id: UUID, dto: UpdateProductDTO) -> None:\\n        await self.product_repository.update(product_id, dto)\\n\\n    async def delete_product(self, product_id: UUID) -> None:\\n        await self.product_repository.delete(product_id)\\n\\n    async def get_products(self, limit: int = 100, offset: int = 0) -> List[Product]:\\n        return await self.product_repository.get_all(limit=limit, offset=offset)\\n\\n    async def get_by_article(self, article: str) -> Product:\\n        return await self.product_repository.get_by_article(article)\\n\\n    async def get_by_seller(self, seller_id: UUID) -> Optional[list[Product]]:\\n        return await self.product_repository.get_by_seller(seller_id)\\n\\n    async def get_active_products(self, limit: int = 100, offset: int = 0, search: Optional[str] = None) -> List[Product]:\\n        return await self.product_repository.get_active_products(limit=limit, offset=offset, search=search)\\n\"\n  },\n  {\n    \"path\": \"backend/services/auth/service.py\",\n    \"content\": \"import hashlib\\nimport hmac\\nimport logging\\nimport time\\nimport json\\nfrom typing import Optional\\nfrom urllib.parse import parse_qs\\nfrom dataclasses import dataclass\\nfrom uuid import UUID\\n\\nfrom abstractions.services import UserServiceInterface\\nfrom abstractions.services.auth.service import AuthServiceInterface\\nfrom abstractions.services.auth.tokens import TokenServiceInterface\\nfrom domain.dto import CreateUserDTO\\nfrom domain.responses.auth import AuthTokens\\nfrom infrastructure.repositories.exceptions import NotFoundException\\nfrom services.auth.exceptions import ExpiredDataException, InvalidTokenException\\nfrom services.exceptions import BannedUserException\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass AuthService(AuthServiceInterface):\\n    bot_token: str\\n    token_service: TokenServiceInterface\\n    user_service: UserServiceInterface\\n\\n    async def get_user_id_from_jwt(self, token: str) -> UUID:\\n        try:\\n            if token == 'abc':\\n                return UUID('9cfed29e-9b5e-444f-8746-e1355ddd95b1')\\n\\n            payload = self.token_service.get_token_payload(token=token)\\n            user_id: str | None = payload.get('sub', None)\\n            if not user_id:\\n                raise InvalidTokenException()\\n\\n            user = await self.user_service.get_user(UUID(user_id))  # todo: pk type\\n\\n            if user.is_banned:\\n                raise BannedUserException\\n\\n            return user.id\\n        except (InvalidTokenException, NotFoundException):\\n            raise\\n\\n    async def create_token(self, init_data: str, ref_user_id: Optional[UUID] = None) -> AuthTokens:\\n        \\\"\\\"\\\"Verifies Telegram Mini App auth data properly.\\\"\\\"\\\"\\n        # Parse initData properly (decode URL params)\\n        data_dict = {k: v[0] for k, v in parse_qs(init_data).items()}\\n\\n        # Extract hash separately\\n        received_hash = data_dict.pop(\\\"hash\\\", None)\\n        if not received_hash:\\n            raise InvalidTokenException(\\\"Missing hash in init data\\\")\\n\\n        # Check expiration\\n        auth_date = int(data_dict.get(\\\"auth_date\\\", \\\"0\\\"))\\n        if time.time() - auth_date > 86400:  # Expire after 1 day\\n            raise ExpiredDataException()\\n\\n        # Step 1: Sort the key-value pairs in alphabetical order\\n        sorted_data_string = \\\"\\\\n\\\".join(f\\\"{k}={v}\\\" for k, v in sorted(data_dict.items()))\\n\\n        # Step 2: Create HMAC-SHA256 signature of the bot token using 'WebAppData' as key\\n        secret_key = hmac.new(b\\\"WebAppData\\\", self.bot_token.encode(), hashlib.sha256).digest()\\n\\n        # Step 3: Create final HMAC-SHA256 signature using the previous step result as the key\\n        computed_hash = hmac.new(secret_key, sorted_data_string.encode(), hashlib.sha256).hexdigest()\\n\\n        logger.info(f\\\"Computed Hash: {computed_hash}, Received Hash: {received_hash}, InitData: {init_data}\\\")\\n\\n        # Step 4: Validate hash\\n        if computed_hash != received_hash:\\n            raise InvalidTokenException(\\\"Invalid init data hash\\\")\\n\\n        # Extract Telegram User ID\\n        user_data = json.loads(data_dict.get(\\\"user\\\", \\\"{}\\\"))\\n        telegram_user_id = int(user_data.get(\\\"id\\\", 0))\\n        username = user_data.get(\\\"username\\\", None)\\n\\n        # Ensure user exists\\n        user_dto = CreateUserDTO(telegram_id=telegram_user_id, nickname=username, invited_by=ref_user_id)\\n        user = await self.user_service.ensure_user(user_dto)\\n\\n        # Generate access & refresh tokens\\n        return self.token_service.create_auth_token(user_id=str(user.id))\\n\\n    async def refresh_token(self, refresh_token: str) -> AuthTokens:\\n        try:\\n            old_claims = self.token_service.get_token_payload(refresh_token)\\n            user_id = old_claims['sub']\\n            await self.user_service.get_user(user_id)\\n\\n            return self.token_service.create_auth_token(user_id)\\n        except (InvalidTokenException, NotFoundException):\\n            raise\\n\"\n  },\n  {\n    \"path\": \"backend/services/auth/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"backend/services/auth/tokens.py\",\n    \"content\": \"import logging\\nfrom dataclasses import dataclass\\nfrom datetime import datetime, timedelta, UTC\\n\\nfrom jwt import (\\n    decode, encode,\\n    ExpiredSignatureError as ExpiredSignatureJWTError,\\n    InvalidTokenError as InvalidTokenJWTError\\n)\\n\\nfrom abstractions.services.auth.tokens import TokenServiceInterface\\nfrom domain.responses.auth import AuthTokens\\nfrom services.auth.exceptions import InvalidTokenException, ExpiredTokenException\\nfrom settings import JwtSettings\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass TokenService(TokenServiceInterface):\\n    jwt_settings: JwtSettings\\n\\n    def create_auth_token(self, user_id: str) -> AuthTokens:\\n        access_claims = {\\n            'sub': user_id,\\n            'exp': datetime.now(tz=UTC) + timedelta(seconds=self.jwt_settings.access_expire),\\n        }\\n\\n        refresh_claims = {\\n            'sub': user_id,\\n            'exp': datetime.now(tz=UTC) + timedelta(seconds=self.jwt_settings.refresh_expire),\\n        }\\n\\n        return AuthTokens(\\n            access_token=self._create_token(**access_claims),\\n            refresh_token=self._create_token(**refresh_claims),\\n        )\\n\\n    def _create_token(self, **claims) -> str:\\n        if 'iss' not in claims:\\n            claims[\\\"iss\\\"] = self.jwt_settings.issuer\\n\\n        if 'aud' not in claims:\\n            claims[\\\"aud\\\"] = self.jwt_settings.audience\\n\\n        token = encode(\\n            payload=claims,\\n            key=self.jwt_settings.secret_key.get_secret_value(),\\n            algorithm=\\\"HS256\\\"\\n        )\\n\\n        return token\\n\\n    def get_token_payload(self, token: str) -> dict:\\n        try:\\n            claims = decode(\\n                token,\\n                self.jwt_settings.secret_key.get_secret_value(),\\n                algorithms=[\\\"HS256\\\"],\\n                issuer=self.jwt_settings.issuer,\\n                audience=self.jwt_settings.audience,\\n                options={\\n                    \\\"verify_exp\\\": True\\n                },\\n            )\\n\\n            return claims\\n        except ExpiredSignatureJWTError as ex:\\n            logger.error(\\\"Token has expired: %s\\\", token)\\n            raise ExpiredTokenException from ex\\n        except InvalidTokenJWTError as ex:\\n            logger.error(\\\"Invalid token: %s. Error: %s\\\", token, ex)\\n            raise InvalidTokenException from ex\\n\"\n  },\n  {\n    \"path\": \"backend/services/auth/exceptions.py\",\n    \"content\": \"class ExpiredDataException(Exception):\\n    ...\\n\\n\\nclass InvalidTokenException(Exception):\\n    ...\\n\\n\\nclass ExpiredTokenException(Exception):\\n    ...\\n\"\n  },\n  {\n    \"path\": \"nginx/compose.yaml\",\n    \"content\": \"services:\\n  nginx:\\n    image: nginx:latest\\n    ports:\\n      - \\\"80:80\\\"\\n      - \\\"443:443\\\"\\n    volumes:\\n      - ./certs:/etc/nginx/certs\\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\\n    restart: always\\n\"\n  },\n  {\n    \"path\": \"nginx/nginx.conf\",\n    \"content\": \"events {\\n    worker_connections 1024;\\n}\\n\\nhttp {\\n    resolver 127.0.0.11;\\n\\n    server {\\n        listen 80;\\n        server_name cashbackwb.ru;\\n        return 301 https://$host$request_uri;\\n    }\\n\\n    server {\\n        listen 443 ssl;\\n        server_name cashbackwb.ru;\\n\\n        ssl_certificate /etc/nginx/certs/cashbackwbru.crt;\\n        ssl_certificate_key /etc/nginx/certs/cashbackwbru.key;\\n\\n        location / {\\n            resolver 127.0.0.11 valid=30s;\\n            set $frontend_upstream http://frontend:80;\\n            proxy_pass $frontend_upstream;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n        }\\n\\n        location /api {\\n            client_max_body_size 50M;\\n            resolver 127.0.0.11 valid=30s;\\n            set $backend_upstream http://backend:8080;\\n            proxy_pass $backend_upstream;\\n            proxy_set_header Host $host;\\n            proxy_set_header X-Real-IP $remote_addr;\\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header X-Forwarded-Proto $scheme;\\n        }\\n    }\\n}\\n\"\n  },\n  {\n    \"path\": \"nginx/certs/cashbackwbru.key\",\n    \"content\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIJKgIBAAKCAgEAwSNvVe7OmTgFVV5DIm4L7uq8TaXG7/DlLDcw0ZaxWdoouJbl\\nYK9TXklR9FzVr5/HdrNxDt12/vdCoajsu3Dbj2q0NVY9tN651Mof/zPSr9mmBJA8\\nrO7h4AsKONtZ/4UyHAbTfq9Izouw+kvZupVeDzkUzICzH6AByOUUG+T5c2AwCcuq\\nKRc4dBiMxsOU4U2X0YfoL0K+xSNXAtxKOPa/EtHelh/JCNNeDIkSXYer59XQvtSf\\ntpniFCGvFQOKv89u78lNJ3qmFpK9bbugn4LI6vFhJmFg+OFwb58NCRnnHuk1Yp7B\\nav4TZcIjcEHsP/6WQzuZ9fQgqKXEMxIhlA4ZCQrTJsXm64rPEGW5Br5kz+Y7cePc\\ncNENOWVLp065A2d9FCJShpY2d37wXrmhKYoQtC2Nk7UXtRqoGs4xblp/X7TOlRjs\\nv43D5vhPLfOUUr3Ziza7eitlhZVgmhj/RKJtFQHyfpKq8C2tnVJiXNEtNPplep73\\nKqCuFOQGmSeJ02FrlrptlW08d1oT0C/jWt+GIJxDKos2fsY9/6PhbjQmRCHOFL5/\\nLRt/h5lY2AlNUNaO8HIRQlVaHsqAFU/ty2gKZRFjkn5fd35UJvneXOzx2XBxn1q5\\nqOE0gxrr3NdvC3KWMZV98bSKC6nxWItGznoGtww545YlHB1KwNcrtqNqNPUCAwEA\\nAQKCAgEAuHKa1TpnW7RAg7Kt8qeeBeFvS8hSILuyYXOjz8VWQjUyRnb1QEywFY94\\nESLHgB3bY+Uix8uA5SZGIBUvYCL7zA9fYsCl1aIPXsRZomNfhkkZX6pQB+drF4fz\\njzEM1hXiMRnjyUyk/3ww3BisKqCTX35n+pW+eylYCv+bILif8iueNPyn2O4wH8+C\\nQiBugmyT3KsqdlgL0EFby4ON7rDW8aY0KLLaTu9tFhOh0mjLJ3DvFhABJ2X2nrs8\\ndZkYXO5BSAa7BEUBcPVaqv1Q/ITuVFGJMho1ffnuYutGi7aNHtwg+7oZhZB3/epV\\n5dNPSB5ean71HgqzVdxZb1yVbMu541wFfpVzLIcIiWtBBwwqfsTqIe77y8RmGC4z\\nsnHIfxIi8lVNlK6s45jSysCcdG3eyK0USdavhZZiSmbyNikHqmwlkMqjUnSKaJ2m\\nzzqP9S6TzcgN4HW1/tWvrVqmtse+nPiq2EPSyZX5t7a8sW8GMkE+rOWVwqkllTuK\\nUuSKo2R2auZxku8fNcjYkt1YO5l3Q/672hCJmOj0dQBqe0bMIk6R4AFbLd8t1mk8\\ni3jov1KhRu8S9N3QlU+TbPQ5f/NZwjaGnTBo6AwzZoet6mBGR1oy81dhK+aXURBU\\nLzUuW83xlQSVnMUl5EhpAxgHIhuO56tHchhnqCt2/RW2/VG8h1ECggEBAOKSA3mc\\nWotz5hkwIs0nSSY54wkde2SA3y6Btdrtw6Opa48b8+C/p1IfcZzIV5q/NI7GjWoU\\nGf19OrB19fhsArzZpTVnXRNBIF4HL31qHUeimNY8tA3hVhQUmiUgAyc0Rp/6x35d\\nh3GBtgEg0VkRhg+/rsrGTGNacsWkkwW8wxwLfr85KEcNTA5BPLG9TDxPXiFUqsP0\\nmYaejmTacIfIBsFBD413I87hm08T3bu8TKE/f+mbYcPBq1QQsQWW/cScFkfUq9j5\\nCazcpBFxbW9CDQLnIsu+ZOLEXJjVO6Qxw0iW2JtHdEhfHpDsV+eN7bEeZY1IRHl3\\ngxd/4gC5tsLw4+8CggEBANo5u2kDkW4hwLTG2zeR3xoFOkODtFKsiDQW+/uT8g5T\\njNvKb3Mt7qHWGRfowFqI86cZ6eUDp2SqVyt5FtvHAj9wGTtpYvhOh88c9gey8D6Z\\nhSbXL7odCze+ez1EYIY+VVCC4LDQszkwP6otG/hpjmSuJdy4bx7P/+UncRaalxr6\\nCV4OSIfNJZoyw3BcLOX81f2bdsc532ngqmAHjGawbsa1PcmJB4GceguYSO2G1sbB\\nv0sVLyW0lD/V6ErFUiRySx8OpgY3OckskSVNh8lFjU4q5kYGn4ByDLmH1UWCF5Ic\\n6oQCr4ItvAFjllaOBRyKZKl4N7HqaLqJFK3BWqkuwVsCggEASDEiLlOlfh21yXzO\\n+fN0mVuEfdkJAiMV+emWmmV8Gt/Wx8iuUoR+ueoO91fWohYelweo843oIh8O3j8X\\n2sn/rVDkFToULBhqScucVCfFoJesf0bkUC/mj4to+j9TAeDkSAFOI3OFvqMH7SAZ\\n1HmC7+2xsiaxHE8rltIzjnZw7LS09BUwQkN4Ympi/ndEnUrkwVYK+1kqufw3fucj\\nSAByNo2WeQrnO/oi1HWOB02eVRq4lSTPZ+KDxstyvEc6ILVjXAvlncLsVEoRdQVh\\nSzwOjUg8jBLkbmUG5CO9VzoL8UsvRXrlEFJOmPrVn5BXlkILNZM7TkDIYmp7BqQm\\nGcNLvQKCAQEA0nC/8Gn3cYvtCKeHONRbn/0QjZDRcLReeFT91EJ8NyKNAFr8FMdj\\niv8qnare66+Lv0W3Dxjx8Jpvi0WvLGuCGGjifC+JuEgKoUidXRlKoiNriuQSa1ic\\nu7ndoFxy9KHhpc1AHmJzop+LlXEAuxIXtbFWY74bskwEyhe574FOXD5okCIYAZVs\\nQIHZhF3vEi46seCcr0x4zOJRil9dHp3fhZG7rsCM04lxDANjuGLCdVLbRO191M+J\\n8vE1m/0i1HC/TojSw8W33O80XROh8Q84T/wAqeCzKatR6Aw8N1ZXopht8rWgSFoQ\\nJgrCLF+yQC6ZGfALTW/uZIvSvChsZB/pZwKCAQEAkEVbmWndFH8G2Rb3RVhqJ1Ru\\nlxYQQxmu4myNbfbJue/AMzpx/+YGxadbHqYeQ0vXAB+Jhkhpyif8rCCoS5eRlVS8\\npTJhMDRc2Q0Tqco5bMRhYZJiVtqkYHjfCs0IbvUnL3nGfPtW3I+22F0acd8m9Xcd\\nB8Jn5i0wDxoJk1ynN8gXWT8G5tcF0vAJKvSHZ8/tMaOyv139c6pK35mR8DQMrlrc\\nUgvtwMjqjzTanhPbFMYkohkGwDRgk6EAtMKrDRiy6wVFDU12+uEr6RTsMUUIcYCa\\nlAFrwAI+hEJ5VxHxjrGSZSv/sRXH8igzOeJJVz46u1CutnG1VZfrNKgeXosVcg==\\n-----END RSA PRIVATE KEY-----\\n\"\n  },\n  {\n    \"path\": \"nginx/certs/cashbackwbru.crt\",\n    \"content\": \"-----BEGIN CERTIFICATE-----\\nMIIHmzCCBoOgAwIBAgIMVUmFfnC+ZIHJqfnJMA0GCSqGSIb3DQEBCwUAMFMxCzAJ\\nBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMSkwJwYDVQQDEyBH\\nbG9iYWxTaWduIEdDQyBSMyBEViBUTFMgQ0EgMjAyMDAeFw0yNDEyMTUxNTA2NDda\\nFw0yNTA3MTcxNTA2NDdaMBwxGjAYBgNVBAMTEXd3dy5jYXNoYmFja3diLnJ1MIIC\\nIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwSNvVe7OmTgFVV5DIm4L7uq8\\nTaXG7/DlLDcw0ZaxWdoouJblYK9TXklR9FzVr5/HdrNxDt12/vdCoajsu3Dbj2q0\\nNVY9tN651Mof/zPSr9mmBJA8rO7h4AsKONtZ/4UyHAbTfq9Izouw+kvZupVeDzkU\\nzICzH6AByOUUG+T5c2AwCcuqKRc4dBiMxsOU4U2X0YfoL0K+xSNXAtxKOPa/EtHe\\nlh/JCNNeDIkSXYer59XQvtSftpniFCGvFQOKv89u78lNJ3qmFpK9bbugn4LI6vFh\\nJmFg+OFwb58NCRnnHuk1Yp7Bav4TZcIjcEHsP/6WQzuZ9fQgqKXEMxIhlA4ZCQrT\\nJsXm64rPEGW5Br5kz+Y7cePccNENOWVLp065A2d9FCJShpY2d37wXrmhKYoQtC2N\\nk7UXtRqoGs4xblp/X7TOlRjsv43D5vhPLfOUUr3Ziza7eitlhZVgmhj/RKJtFQHy\\nfpKq8C2tnVJiXNEtNPplep73KqCuFOQGmSeJ02FrlrptlW08d1oT0C/jWt+GIJxD\\nKos2fsY9/6PhbjQmRCHOFL5/LRt/h5lY2AlNUNaO8HIRQlVaHsqAFU/ty2gKZRFj\\nkn5fd35UJvneXOzx2XBxn1q5qOE0gxrr3NdvC3KWMZV98bSKC6nxWItGznoGtww5\\n45YlHB1KwNcrtqNqNPUCAwEAAaOCA6QwggOgMA4GA1UdDwEB/wQEAwIFoDAMBgNV\\nHRMBAf8EAjAAMIGTBggrBgEFBQcBAQSBhjCBgzBGBggrBgEFBQcwAoY6aHR0cDov\\nL3NlY3VyZS5nbG9iYWxzaWduLmNvbS9jYWNlcnQvZ3NnY2NyM2R2dGxzY2EyMDIw\\nLmNydDA5BggrBgEFBQcwAYYtaHR0cDovL29jc3AuZ2xvYmFsc2lnbi5jb20vZ3Nn\\nY2NyM2R2dGxzY2EyMDIwMFYGA1UdIARPME0wQQYJKwYBBAGgMgEKMDQwMgYIKwYB\\nBQUHAgEWJmh0dHBzOi8vd3d3Lmdsb2JhbHNpZ24uY29tL3JlcG9zaXRvcnkvMAgG\\nBmeBDAECATBBBgNVHR8EOjA4MDagNKAyhjBodHRwOi8vY3JsLmdsb2JhbHNpZ24u\\nY29tL2dzZ2NjcjNkdnRsc2NhMjAyMC5jcmwwbgYDVR0RBGcwZYIRd3d3LmNhc2hi\\nYWNrd2IucnWCGmF1dG9kaXNjb3Zlci5jYXNoYmFja3diLnJ1ghJtYWlsLmNhc2hi\\nYWNrd2IucnWCEW93YS5jYXNoYmFja3diLnJ1gg1jYXNoYmFja3diLnJ1MB0GA1Ud\\nJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAWgBQNmMBzf6u9vdlH\\nS0mtCkoMrD7HfDAdBgNVHQ4EFgQUfKuVVc5yO8csEB2o0beJVtFzE8UwggF+Bgor\\nBgEEAdZ5AgQCBIIBbgSCAWoBaAB2AK8YGijWjKPgqYpMnGerCfi7vCK6rryxOKOh\\nndP5tgMNAAABk8rbm94AAAQDAEcwRQIgPqVbFbgTUSu9z07HuOEWSjm0RSbY4Jp2\\nu4aFPHjL26ACIQCZE7VKD6iPs4YOg3mq8//c8RvFRn+ezUdLC8aOVj2BIQB3ABoE\\n/0nQVB1Ar/agw7/x2MRnL07s7iNAaJhrF0Au3Il9AAABk8rbnIYAAAQDAEgwRgIh\\nAOiYJcmB27kPLECJpAvakBoHidJB7WMN11QOrrgDlAQeAiEAl/9grfDpQy4ZJnjg\\nhlN+gUNjc4nK+WEfIHK8ZgQbx8kAdQAS8U40vVNyTIQGGcOPP3oT+Oe1YoeInG0w\\nBYTr5YYmOgAAAZPK25zeAAAEAwBGMEQCIGKrubH2fwAS0OBjoZlHl2cvcQmSttJt\\nWBnG4iGrZ8dUAiAvDV5DWrB6LXELPuxVjuy/3tVeVMh7wxdSy1nIzx4x2jANBgkq\\nhkiG9w0BAQsFAAOCAQEAF99vfNMM3HAErvEApHzdkjy2B+sP6aUY3Z56ro9PIi52\\nCN6aeTls6pYR7qEx3GubOpGIxnbrCqOYDYklo6Pa7WGNe5Kz2un0k0R5jExQx79i\\n+kXjxOIB9c/NJNm1+FiQUcyQIYcy4IOvvBJ8ZIb6bujNqcLxCAcORflMgA9qNIUk\\nEF9qJuIF7AxecNr+gQ221JxCUK89L79zQQq6+LLLpnsw2yqhO6lsx297y3FYTDsY\\nOInn/QlMm0+dQbaa3u5V3Q4xziMz0WLcjLiu+esjdifnHIQ2/Iqi7OxO8dLAdh+3\\nfWTQFPdIReEF72JMpfj37X7ig7vTefHNZ8ccPdAxsw==\\n-----END CERTIFICATE-----\\n\"\n  },\n  {\n    \"path\": \".github/workflows/deploy.yml\",\n    \"content\": \"name: DEPLOY\\n\\n\\non:\\n  push:\\n    branches:\\n      - main\\n  workflow_dispatch:\\n\\n\\njobs:\\n  deploy:\\n    name: Deploy all\\n    runs-on: [\\n      \\\"self-hosted\\\",\\n      \\\"dev\\\"\\n    ]\\n    steps:\\n      - name: Checkout\\n        uses: actions/checkout@v4\\n\\n      - name: Compose up\\n        run: |\\n          sudo docker compose up --build -d\\n\\n      - name: Cleanup\\n        run: |\\n          docker system prune -a -f\\n        \\n\"\n  },\n  {\n    \"path\": \".github/workflows/reboot-nginx.yml\",\n    \"content\": \"name: REBOOT NGINX\\n\\n\\non:\\n  workflow_dispatch:\\n\\n\\njobs:\\n  reboot:\\n    name: Reboot nginx docker service\\n    runs-on: [\\n      \\\"self-hosted\\\",\\n      \\\"dev\\\"\\n    ]\\n    steps:\\n      - name: Checkout\\n        uses: actions/checkout@v4\\n\\n      - name: Reboot\\n        run: |\\n          docker compose stop nginx\\n          docker compose up --build -d nginx\\n\"\n  },\n  {\n    \"path\": \"bot/requirements.txt\",\n    \"content\": \"aiofiles==24.1.0\\naiogram==3.18.0\\naiohappyeyeballs==2.6.1\\naiohttp==3.11.13\\naiosignal==1.3.2\\nannotated-types==0.7.0\\nattrs==25.3.0\\ncertifi==2025.1.31\\nfrozenlist==1.5.0\\nidna==3.10\\nmagic-filter==1.0.12\\nmultidict==6.1.0\\npropcache==0.3.0\\npydantic==2.10.6\\npydantic_core==2.27.2\\npython-dotenv==1.1.0\\ntyping_extensions==4.12.2\\nyarl==1.18.3\\n\"\n  },\n  {\n    \"path\": \"bot/Dockerfile\",\n    \"content\": \"FROM python:3.12\\n\\nENV ENVIRONMENT=dev\\n\\nRUN apt-get update\\n\\nWORKDIR /wb\\n\\nCOPY requirements.txt .\\n\\nRUN pip install -r requirements.txt\\n\\nCOPY . .\"\n  },\n  {\n    \"path\": \"bot/main.py\",\n    \"content\": \"import asyncio\\nimport logging\\nimport os\\n\\nfrom aiogram import Bot, Dispatcher, types\\nfrom aiogram.filters import CommandStart, CommandObject\\nfrom aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo\\nfrom aiogram.utils.deep_linking import decode_payload\\nfrom dotenv import load_dotenv\\n\\nload_dotenv(dotenv_path=f'{os.getenv(\\\"ENVIRONMENT\\\", \\\"local\\\")}.env')\\n\\nTOKEN = os.getenv('TOKEN')\\nWEB_APP_URL = os.getenv('WEB_APP_URL')\\n\\n# Configure logging\\nlogging.basicConfig(\\n    level=logging.INFO,\\n    format=\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\",\\n)\\n\\n# Initialize bot and dispatcher\\nbot = Bot(token=TOKEN)\\ndp = Dispatcher()\\n\\nlogger = logging.getLogger(__name__)\\n\\n@dp.message(CommandStart(deep_link=True))\\nasync def handler(message: types.Message, command: CommandObject):\\n    arg = command.args\\n    web_app_url = WEB_APP_URL\\n    if arg:\\n        web_app_url += f\\\"?ref={arg}\\\"\\n\\n    instruction_url = f\\\"{WEB_APP_URL}/instruction\\\"\\n    text = (\\n        \\\"Привет! ❤️\\\\n\\\\n\\\"\\n        \\\"Это удобный бот с простой инструкцией для выгодных покупок с максимальным кэшбэком\\\\n\\\\n\\\"\\n        \\\"<b>КАК ЭТО РАБОТАЕТ?</b>\\\\n\\\\n\\\"\\n        \\\"1️⃣ Выбирай товар из каталога  \\\\n\\\"\\n        \\\"2️⃣ Открывай карточку и следуй шагам  \\\\n\\\"\\n        \\\"3️⃣ Получай кэшбек и выгодные условия\\\\n\\\\n\\\"\\n        \\\"<b>ПОЧЕМУ МЫ?</b>\\\\n\\\\n\\\"\\n        \\\"😊 15 000+ довольных покупателей  \\\\n\\\"\\n        \\\"🏳 Все продавцы проверены вручную  \\\\n\\\"\\n        \\\"🫂 Поддержка 24/7 – поможем в любое время  \\\\n\\\"\\n        \\\"📝 Реальные отзывы – убедись сам\\\\n\\\\n\\\"\\n        f\\\"✅ <a href=\\\\\\\"{instruction_url}\\\\\\\">Инструкция здесь</a>\\\\n\\\\n\\\"\\n        \\\"🔥 Все товары в каталоге ждут тебя!\\\"\\n    )\\n\\n    keyboard = InlineKeyboardMarkup(\\n        inline_keyboard=[\\n            [InlineKeyboardButton(text=\\\"Открыть приложение 🛍\\\", web_app=WebAppInfo(url=web_app_url))]\\n        ]\\n    )\\n\\n    await message.answer(\\n        text,\\n        reply_markup=keyboard,\\n        parse_mode=\\\"HTML\\\",\\n        disable_web_page_preview=True,\\n    )\\n\\n\\n@dp.message(CommandStart())\\nasync def start(message: types.Message):\\n    instruction_url = f\\\"{WEB_APP_URL}/instruction\\\"\\n    text = (\\n        \\\"Привет! ❤️\\\\n\\\\n\\\"\\n        \\\"Это удобный бот с простой инструкцией для выгодных покупок с максимальным кэшбэком\\\\n\\\\n\\\"\\n        \\\"<b>КАК ЭТО РАБОТАЕТ?</b>\\\\n\\\\n\\\"\\n        \\\"1️⃣ Выбирай товар из каталога  \\\\n\\\"\\n        \\\"2️⃣ Открывай карточку и следуй шагам  \\\\n\\\"\\n        \\\"3️⃣ Получай кэшбек и выгодные условия\\\\n\\\\n\\\"\\n        \\\"<b>ПОЧЕМУ МЫ?</b>\\\\n\\\\n\\\"\\n        \\\"😊 15 000+ довольных покупателей  \\\\n\\\"\\n        \\\"🏳 Все продавцы проверены вручную  \\\\n\\\"\\n        \\\"🫂 Поддержка 24/7 – поможем в любое время  \\\\n\\\"\\n        \\\"📝 Реальные отзывы – убедись сам\\\\n\\\\n\\\"\\n        f\\\"✅ <a href=\\\\\\\"{instruction_url}\\\\\\\">Инструкция здесь</a>\\\\n\\\\n\\\"\\n        \\\"🔥 Все товары в каталоге ждут тебя!\\\"\\n    )\\n\\n    keyboard = InlineKeyboardMarkup(\\n        inline_keyboard=[\\n            [InlineKeyboardButton(text=\\\"Открыть приложение 🛍\\\", web_app=WebAppInfo(url=WEB_APP_URL))]\\n        ]\\n    )\\n\\n    await message.answer(\\n        text,\\n        reply_markup=keyboard,\\n        parse_mode=\\\"HTML\\\",\\n        disable_web_page_preview=True,\\n    )\\n\\n\\nasync def main():\\n    \\\"\\\"\\\"Run the bot.\\\"\\\"\\\"\\n    await dp.start_polling(bot)\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    asyncio.run(main())\\n\"\n  },\n  {\n    \"path\": \"notificator/settings.json\",\n    \"content\": \"{\\n  \\\"db\\\": {\\n    \\\"host\\\": \\\"db\\\",\\n    \\\"port\\\": 5432,\\n    \\\"user\\\": \\\"wbuser\\\",\\n    \\\"password\\\": \\\"wbpassword\\\",\\n    \\\"name\\\": \\\"postgres\\\"\\n  },\\n  \\\"bot\\\": {\\n    \\\"local\\\": \\\"7782070677:AAHtu78aPEQSf15dYsXJbBhcbfMoz7bDXQg\\\",\\n    \\\"dev\\\": \\\"7923150921:AAGAUkeu-dfp_fXkwTwb3HQZZlYEf66MzYg\\\"\\n  }\\n}\\n\"\n  },\n  {\n    \"path\": \"notificator/requirements.txt\",\n    \"content\": \"annotated-types==0.7.0\\nanyio==4.9.0\\nasyncpg==0.30.0\\ncertifi==2025.1.31\\ngreenlet==3.1.1\\nh11==0.14.0\\nhttpcore==1.0.7\\nhttpx==0.28.1\\nidna==3.10\\npydantic==2.11.3\\npydantic-settings==2.8.1\\npydantic_core==2.33.1\\npython-dotenv==1.1.0\\nsniffio==1.3.1\\nSQLAlchemy==2.0.40\\ntyping-inspection==0.4.0\\ntyping_extensions==4.13.1\\n\"\n  },\n  {\n    \"path\": \"notificator/Dockerfile\",\n    \"content\": \"# ------------------------------------------\\n# Stage 1: Build dependencies and install Python packages\\n# ------------------------------------------\\nARG PYTHON_VERSION=3.12.3\\nFROM python:${PYTHON_VERSION}-slim AS builder\\n\\nENV PYTHONDONTWRITEBYTECODE=1 \\\\\\n    PYTHONUNBUFFERED=1\\n\\n# Install build dependencies\\nRUN apt-get update && \\\\\\n    apt-get install --no-install-recommends -y gcc libpq-dev wget && \\\\\\n    rm -rf /var/lib/apt/lists/*\\n\\nWORKDIR /app\\n\\n# Install Python dependencies\\nCOPY ./requirements.txt .\\nRUN pip install --upgrade pip && \\\\\\n    pip install --prefix=/install -r requirements.txt\\n\\n# ------------------------------------------\\n# Stage 2: Final runtime image\\n# ------------------------------------------\\nFROM python:${PYTHON_VERSION}-slim AS runtime\\n\\nENV PYTHONDONTWRITEBYTECODE=1 \\\\\\n    PYTHONUNBUFFERED=1 \\\\\\n    ENVIRONMENT=dev\\n\\nWORKDIR /app\\n\\n# Copy installed Python packages from builder stage\\nCOPY --from=builder /install /usr/local\\n\\n# Copy application code\\nCOPY . .\\n\\n#ENTRYPOINT [\\\"sh\\\", \\\"-c\\\", \\\"uvicorn main:app --host 0.0.0.0 --port 8080\\\"]\\n\"\n  },\n  {\n    \"path\": \"notificator/settings.py\",\n    \"content\": \"import os\\nfrom pathlib import Path\\nfrom typing import Type, Tuple\\n\\nfrom pydantic import SecretStr\\nfrom pydantic_settings import (\\n    BaseSettings,\\n    SettingsConfigDict,\\n    PydanticBaseSettingsSource,\\n    JsonConfigSettingsSource,\\n)\\n\\n\\nclass DBSettings(BaseSettings):\\n    host: str\\n    port: int\\n    name: str\\n    user: str\\n    password: SecretStr\\n\\n    @property\\n    def url(self):\\n        return (\\n            f\\\"postgresql+asyncpg://{self.user}:{self.password.get_secret_value()}@\\\"\\n            f\\\"{self.host}:{self.port}/{self.name}\\\"\\n        )\\n\\nclass BotTokenSettings(BaseSettings):\\n      local: str\\n      dev: str\\n  \\n      @property\\n      def token(self) -> str:\\n          match os.getenv(\\\"ENVIRONMENT\\\", \\\"local\\\"):\\n              case \\\"dev\\\":\\n                  return self.dev\\n              case \\\"local\\\":\\n                  return self.local\\n  \\n\\nclass Settings(BaseSettings):\\n    db: DBSettings\\n\\n    bot: BotTokenSettings\\n\\n    debug: bool = True\\n\\n    model_config = SettingsConfigDict(\\n        extra=\\\"ignore\\\",\\n        json_file=Path(__file__).parent / \\\"settings.json\\\",\\n        json_file_encoding=\\\"utf-8\\\",\\n    )\\n\\n    @classmethod\\n    def settings_customise_sources(\\n            cls,\\n            settings_cls: Type[BaseSettings],\\n            init_settings: PydanticBaseSettingsSource,\\n            env_settings: PydanticBaseSettingsSource,\\n            dotenv_settings: PydanticBaseSettingsSource,\\n            file_secret_settings: PydanticBaseSettingsSource,\\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\\n        return (\\n            JsonConfigSettingsSource(settings_cls),  # Fallback to JSON\\n        )\\n\\n\\nsettings = Settings()\\n\"\n  },\n  {\n    \"path\": \"notificator/main.py\",\n    \"content\": \"import asyncio\\nimport logging\\n\\nfrom dependencies.services.consumer import get_consumer\\nfrom dependencies.services.notification import get_notificator\\n\\nlogger = logging.getLogger(__name__)\\nlogging.basicConfig(\\n    level=logging.INFO,\\n    format=\\\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\\\",\\n)\\n\\n\\nasync def main():\\n    logger.info(\\\"Initializing service...\\\")\\n\\n    consumer = get_consumer()\\n    notificator = get_notificator()\\n\\n    logger.info(\\\"Service initialized, starting...\\\")\\n\\n    try:\\n        await consumer.execute(notificator)\\n    except KeyboardInterrupt:\\n        logger.info(\\\"Shutting down...\\\")\\n    except Exception as e:\\n        logger.error(\\\"Unexpected exception\\\", exc_info=True)\\n    finally:\\n        logger.info(\\\"Service has been successfully shut down\\\")\\n\\n\\nif __name__ == '__main__':\\n    asyncio.run(main())\\n\"\n  },\n  {\n    \"path\": \"notificator/dependencies/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/dependencies/repositories/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/dependencies/repositories/session_maker.py\",\n    \"content\": \"from sqlalchemy.ext.asyncio import async_sessionmaker\\n\\nfrom infrastructure import session_maker\\n\\n\\ndef get_session_maker() -> async_sessionmaker:\\n    return session_maker\"\n  },\n  {\n    \"path\": \"notificator/dependencies/repositories/user_push.py\",\n    \"content\": \"from abstractions.repositories.user_push import UserPushRepositoryInterface\\nfrom dependencies.repositories.session_maker import get_session_maker\\nfrom infrastructure.db.repositories.user_push import UserPushRepository\\n\\n\\ndef get_user_push_repository() -> UserPushRepositoryInterface:\\n    return UserPushRepository(\\n        session_maker=get_session_maker(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"notificator/dependencies/services/upload.py\",\n    \"content\": \"from abstractions.services.upload import UploadServiceInterface\\nfrom services.upload import UploadService\\n\\n\\ndef get_upload_service() -> UploadServiceInterface:\\n    return UploadService(\\n\\n    )\\n\"\n  },\n  {\n    \"path\": \"notificator/dependencies/services/notification.py\",\n    \"content\": \"from abstractions.services.notification import NotificationServiceInterface\\nfrom dependencies.repositories.user_push import get_user_push_repository\\nfrom services.notification import Notificator\\nfrom settings import settings\\n\\n\\ndef get_notificator() -> NotificationServiceInterface:\\n    return Notificator(\\n        token=settings.bot.token,\\n        notifications_repository=get_user_push_repository(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"notificator/dependencies/services/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/dependencies/services/consumer.py\",\n    \"content\": \"from abstractions.services.consumer import ConsumerInterface\\nfrom dependencies.repositories.user_push import get_user_push_repository\\nfrom dependencies.services.notification import get_notificator\\nfrom services.consumer import Consumer\\n\\n\\ndef get_consumer() -> ConsumerInterface:\\n    return Consumer(\\n        notification_repository=get_user_push_repository(),\\n    )\\n\"\n  },\n  {\n    \"path\": \"notificator/abstractions/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/abstractions/repositories/user.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\\nfrom domain.models import User\\n\\n\\nclass UserRepositoryInterface(\\n    CRUDRepositoryInterface[User, CreateUserDTO, UpdateUserDTO],\\n    ABC,\\n):\\n    @abstractmethod\\n    async def get_by_telegram_id(self, telegram_id: str) -> Optional[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\\n        ...\\n\\n    @abstractmethod\\n    async def get_moderators(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_sellers(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def get_banned(self) -> list[User]:\\n        ...\\n\\n    @abstractmethod\\n    async def become_seller(self, user_id: UUID):\\n        ...\\n\\n\\n\"\n  },\n  {\n    \"path\": \"notificator/abstractions/repositories/__init__.py\",\n    \"content\": \"from .crud import CRUDRepositoryInterface\\n\"\n  },\n  {\n    \"path\": \"notificator/abstractions/repositories/user_push.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\\nfrom domain.models.user_push import UserPush\\nfrom infrastructure.db.enums.push_status import PushStatus\\n\\n\\nclass UserPushRepositoryInterface(\\n    CRUDRepositoryInterface[UserPush, CreateUserPushDTO, UpdateUserPushDTO],\\n    ABC,\\n):\\n    @abstractmethod\\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\\n        ...\\n\\n    @abstractmethod\\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\\n        ...\\n\"\n  },\n  {\n    \"path\": \"notificator/abstractions/repositories/crud.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom uuid import UUID\\n\\n\\nclass CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO](ABC):\\n    @abstractmethod\\n    async def create(self, obj: CreateDTO) -> None:\\n        pass\\n\\n    @abstractmethod\\n    async def get(self, obj_id: UUID) -> Model:\\n        pass\\n\\n    @abstractmethod\\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\\n        pass\\n\\n    @abstractmethod\\n    async def delete(self, obj_id: UUID) -> None:\\n        pass\\n\\n    @abstractmethod\\n    async def get_all(self, limit: int = 100, offset: int = 0) -> list[Model]:\\n        pass\\n\"\n  },\n  {\n    \"path\": \"notificator/abstractions/services/upload.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\n\\n\\nclass UploadServiceInterface(ABC):\\n    @abstractmethod\\n    def get_filepath(self, filename: str) -> str:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"notificator/abstractions/services/notification.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\n\\nfrom domain.models import UserPush\\n\\n\\nclass NotificationServiceInterface(ABC):\\n    @abstractmethod\\n    async def send_notification(self, notification: UserPush) -> None:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"notificator/abstractions/services/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/abstractions/services/consumer.py\",\n    \"content\": \"from abc import ABC, abstractmethod\\nfrom typing import NoReturn\\n\\nfrom abstractions.services.notification import NotificationServiceInterface\\n\\n\\nclass ConsumerInterface(ABC):\\n    @abstractmethod\\n    async def execute(self, notificator: NotificationServiceInterface) -> NoReturn:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/__init__.py\",\n    \"content\": \"from .db import session_maker\\nfrom .db.entities import (\\n    User\\n)\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/__init__.py\",\n    \"content\": \"from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker\\n\\nfrom settings import settings\\n\\n__all__ = [\\n    \\\"session_maker\\\",\\n]\\n\\n\\nengine = create_async_engine(settings.db.url, echo=False, pool_recycle=1800, pool_timeout=30)\\nsession_maker = async_sessionmaker(engine, expire_on_commit=False)\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/entities.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional, List\\nfrom uuid import UUID as pyUUID\\n\\nfrom sqlalchemy import DateTime, ForeignKey, UUID, BigInteger, Enum\\nfrom sqlalchemy.orm import declarative_base, Mapped, mapped_column, relationship\\n\\nfrom infrastructure.db.enums import Category, OrderStatus, PayoutTime, ProductStatus, UserRole\\nfrom infrastructure.db.enums.push_status import PushStatus\\n\\nBase = declarative_base()\\n\\n\\nclass AbstractBase(Base):\\n    __abstract__ = True\\n\\n    id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True)\\n    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)\\n    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, onupdate=datetime.now)\\n\\n\\nclass Product(AbstractBase):\\n    __tablename__ = 'products'\\n\\n    name: Mapped[str]\\n    brand: Mapped[str]\\n    article: Mapped[str] = mapped_column(unique=True)\\n    category: Mapped[Category] = mapped_column(Enum(Category))\\n    key_word: Mapped[str]\\n    general_repurchases: Mapped[int]\\n    daily_repurchases: Mapped[int]\\n    price: Mapped[float]\\n    wb_price: Mapped[float]\\n    tg: Mapped[str]\\n    payment_time: Mapped[PayoutTime] = mapped_column(Enum(PayoutTime))\\n    review_requirements: Mapped[str]\\n    image_path: Mapped[Optional[str]]\\n    seller_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\\n    status: Mapped[ProductStatus] = mapped_column(Enum(ProductStatus), default=ProductStatus.CREATED)\\n\\n    reviews: Mapped[List['Review']] = relationship('Review', back_populates='product')\\n    orders: Mapped[List['Order']] = relationship('Order', back_populates='product')\\n    moderator_reviews: Mapped[list['ModeratorReview']] = relationship('ModeratorReview', back_populates='product')\\n\\n\\nclass User(AbstractBase):\\n    __tablename__ = 'users'\\n\\n    telegram_id: Mapped[Optional[int]] = mapped_column(BigInteger, unique=True)\\n    nickname: Mapped[Optional[str]]\\n    role: Mapped[UserRole] = mapped_column(Enum(UserRole))\\n    is_banned: Mapped[bool]\\n    is_seller: Mapped[bool]\\n    balance: Mapped[Optional[int]]\\n    user_orders: Mapped[List[\\\"Order\\\"]] = relationship(\\\"Order\\\", foreign_keys=\\\"Order.user_id\\\")\\n    seller_orders: Mapped[List[\\\"Order\\\"]] = relationship(\\\"Order\\\", foreign_keys=\\\"Order.seller_id\\\")\\n    reviews: Mapped[List[\\\"Review\\\"]] = relationship(\\\"Review\\\", back_populates=\\\"user\\\")\\n\\n\\nclass Order(AbstractBase):\\n    __tablename__ = 'orders'\\n\\n    user_id: Mapped[UUID] = mapped_column(ForeignKey(\\\"users.id\\\"))\\n    product_id: Mapped[UUID] = mapped_column(ForeignKey(\\\"products.id\\\"))\\n    seller_id: Mapped[UUID] = mapped_column(ForeignKey(\\\"users.id\\\"))\\n\\n    # Чтобы отслеживать, на каком шаге сейчас заказ\\n    step: Mapped[int] = mapped_column(default=1)\\n\\n    # Шаг 1: скриншоты\\n    search_screenshot_path: Mapped[Optional[str]]\\n    cart_screenshot_path: Mapped[Optional[str]]\\n\\n    # Шаг 4: реквизиты\\n    card_number: Mapped[Optional[str]]\\n    phone_number: Mapped[Optional[str]]\\n    name: Mapped[Optional[str]]\\n    bank: Mapped[Optional[str]]\\n\\n    # Шаг 5: финальный скрин корзины\\n    final_cart_screenshot_path: Mapped[Optional[str]]\\n\\n    # Шаг 6: скрин доставки, скрин штрихкодов\\n    delivery_screenshot_path: Mapped[Optional[str]]\\n    barcodes_screenshot_path: Mapped[Optional[str]]\\n\\n    # Шаг 7: скрин отзывов, скрин электронного чека, номер чека\\n    review_screenshot_path: Mapped[Optional[str]]\\n    receipt_screenshot_path: Mapped[Optional[str]]\\n    receipt_number: Mapped[Optional[str]]\\n\\n    status: Mapped[OrderStatus] = mapped_column(Enum(OrderStatus), default=\\\"CASHBACK_NOT_PAID\\\")\\n\\n    user: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[user_id], back_populates=\\\"user_orders\\\")\\n    seller: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[seller_id], back_populates=\\\"seller_orders\\\")\\n    product: Mapped[\\\"Product\\\"] = relationship(\\\"Product\\\", foreign_keys=[product_id], back_populates=\\\"orders\\\")\\n\\n\\nclass Review(AbstractBase):\\n    __tablename__ = 'reviews'\\n\\n    user_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\\n    rating: Mapped[int]\\n    comment: Mapped[str]\\n\\n    user: Mapped['User'] = relationship('User', back_populates='reviews')\\n    product: Mapped['Product'] = relationship('Product', back_populates='reviews')\\n\\n\\nclass ModeratorReview(AbstractBase):\\n    __tablename__ = 'moderator_reviews'\\n    \\n    moderator_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\\n    comment: Mapped[str]\\n    status_before: Mapped[ProductStatus]\\n    status_after: Mapped[ProductStatus]\\n\\n    moderator: Mapped['User'] = relationship('User')\\n    product: Mapped['Product'] = relationship('Product', back_populates='moderator_reviews')\\n\\nclass Push(AbstractBase):\\n    __tablename__ = 'pushes'\\n    title: Mapped[str] = mapped_column(unique=True)\\n    text: Mapped[str]\\n    creator_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\\n    image_path: Mapped[Optional[str]]\\n    button_text: Mapped[Optional[str]]\\n    button_link: Mapped[Optional[str]]\\n\\n    deleted_at: Mapped[Optional[datetime]]\\n\\n    creator: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[creator_id])\\n\\nclass UserPush(AbstractBase):\\n    __tablename__ = 'user_pushes'\\n\\n    push_id: Mapped[pyUUID] = mapped_column(ForeignKey('pushes.id'))\\n    user_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\\n    sent_at: Mapped[Optional[datetime]]\\n    status: Mapped[PushStatus]\\n\\n    push: Mapped[\\\"Push\\\"] = relationship(\\\"Push\\\")\\n    user: Mapped[\\\"User\\\"] = relationship(\\\"User\\\", foreign_keys=[user_id])\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/enums/user_role.py\",\n    \"content\": \"from enum import StrEnum\\n\\n\\nclass UserRole(StrEnum):\\n    USER = \\\"user\\\"\\n    MODERATOR = \\\"moderator\\\"\\n    ADMIN = \\\"admin\\\"\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/enums/payout_time.py\",\n    \"content\": \"from enum import StrEnum\\n\\nclass PayoutTime(StrEnum):\\n    AFTER_REVIEW = \\\"После отзыва\\\"\\n    AFTER_DELIVERY = \\\"После получения товара\\\"\\n    ON_15TH_DAY = \\\"На 15й день\\\"\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/enums/push_status.py\",\n    \"content\": \"from enum import StrEnum\\n\\n\\nclass PushStatus(StrEnum):\\n    PLANNED = 'planned'\\n    IN_PROGRESS = 'in_progress'\\n    DELIVERED = 'delivered'\\n    FAILED = 'failed'\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/enums/product_status.py\",\n    \"content\": \"from enum import Enum\\n\\n\\nclass ProductStatus(Enum):\\n    CREATED = \\\"created\\\"\\n    ACTIVE = \\\"active\\\"\\n    DISABLED = \\\"disabled\\\"\\n    REJECTED = \\\"rejected\\\"  # отклонен совсем\\n    ARCHIVED = \\\"archived\\\"\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/enums/__init__.py\",\n    \"content\": \"from .category import Category\\nfrom .user_role import UserRole\\nfrom .payout_time import PayoutTime\\nfrom .order_status import OrderStatus\\nfrom .product_status import ProductStatus\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/enums/order_status.py\",\n    \"content\": \"from enum import StrEnum\\n\\nclass OrderStatus(StrEnum):\\n    CASHBACK_PAID = \\\"cashback_paid\\\"\\n    CASHBACK_NOT_PAID = \\\"cashback_not_paid\\\"\\n    CANCELLED = \\\"cancelled\\\"\\n\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/enums/category.py\",\n    \"content\": \"from enum import StrEnum\\n\\nclass Category(StrEnum):\\n    WOMEN = \\\"Женщинам\\\"\\n    MEN = \\\"Мужчинам\\\"\\n    SHOES = \\\"Обувь\\\"\\n    KIDS = \\\"Детям\\\"\\n    HOME = \\\"Дом\\\"\\n    NEW_YEAR = \\\"Новый год\\\"\\n    BEAUTY = \\\"Красота\\\"\\n    ACCESSORIES = \\\"Аксессуары\\\"\\n    ELECTRONICS = \\\"Электроника\\\"\\n    TOYS = \\\"Игрушки\\\"\\n    FURNITURE = \\\"Мебель\\\"\\n    ADULT = \\\"Товары для взрослых\\\"\\n    APPLIANCES = \\\"Бытовая техника\\\"\\n    PETS = \\\"Зоотовары\\\"\\n    SPORTS = \\\"Спорт\\\"\\n    AUTO = \\\"Автотовары\\\"\\n    JEWELRY = \\\"Ювелирные изделия\\\"\\n    REPAIR = \\\"Для ремонта\\\"\\n    GARDEN = \\\"Сад и дача\\\"\\n    HEALTH = \\\"Здоровье\\\"\\n    STATIONERY = \\\"Канцтовары\\\"\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/repositories/user.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\n\\nfrom abstractions.repositories.user import UserRepositoryInterface\\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\\nfrom domain.models import User as UserModel\\nfrom infrastructure.db.entities import User\\nfrom infrastructure.db.enums import UserRole\\nfrom infrastructure.db.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\n\\nclass UserRepository(\\n    AbstractSQLAlchemyRepository[User, User, CreateUserDTO, UpdateUserDTO],\\n    UserRepositoryInterface\\n):\\n    async def get_moderators(self) -> list[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.role == UserRole.MODERATOR)\\n            )\\n\\n            result = result.scalars().all()\\n\\n        return [self.entity_to_model(x) for x in result]\\n\\n\\n    async def get_sellers(self) -> list[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.is_seller == True)\\n            )\\n\\n            result = result.scalars().all()\\n\\n        return [self.entity_to_model(x) for x in result]\\n\\n    async def get_banned(self) -> list[UserModel]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.is_banned == True)\\n            )\\n\\n            result = result.scalars().all()\\n\\n        return [self.entity_to_model(x) for x in result]\\n\\n    async def get_by_telegram_id(self, telegram_id: str) -> Optional[User]:\\n        async with self.session_maker() as session:\\n            result = await session.execute(select(self.entity).where(self.entity.telegram_id == telegram_id))\\n            user = result.scalars().first()\\n            if user:\\n                return self.entity_to_model(user)\\n            return None\\n\\n    async def become_seller(self, user_id: UUID):\\n        async with self.session_maker() as session:\\n            user = await session.get(self.entity, user_id)\\n            async with session.begin():\\n                user.is_seller = True\\n\\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\\n        async with self.session_maker() as session:\\n            result = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.telegram_id == dto.telegram_id)\\n            )\\n\\n            user = result.scalars().one_or_none()\\n        if not user:\\n            await self.create(dto)\\n\\n        return await self.get_by_telegram_id(dto.telegram_id)\\n\\n    def create_dto_to_entity(self, dto: CreateUserDTO) -> User:\\n        return User(\\n            id=dto.id,\\n            telegram_id=dto.telegram_id,\\n            nickname=dto.nickname,\\n            is_banned=False,\\n            is_seller=False,\\n            role=UserRole(dto.role),\\n            balance=0,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at\\n        )\\n\\n    def entity_to_model(self, entity: User) -> UserModel:\\n        return UserModel(\\n            id=entity.id,\\n            telegram_id=entity.telegram_id,\\n            nickname=entity.nickname,\\n            role=entity.role,\\n            balance=entity.balance,\\n            is_banned=entity.is_banned,\\n            is_seller=entity.is_seller,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at\\n        )\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/repositories/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/repositories/user_push.py\",\n    \"content\": \"from dataclasses import field, dataclass\\nfrom datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\n\\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\\nfrom domain.models import UserPush as UserPushModel, User as UserModel, Push as PushModel\\nfrom infrastructure.db.entities import UserPush, User, Push\\nfrom infrastructure.db.enums.push_status import PushStatus\\nfrom infrastructure.db.repositories.sqlalchemy import AbstractSQLAlchemyRepository\\n\\n@dataclass\\nclass UserPushRepository(\\n    AbstractSQLAlchemyRepository[UserPush, UserPushModel, CreateUserPushDTO, UpdateUserPushDTO],\\n    UserPushRepositoryInterface\\n):\\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\\n        'user': None,\\n        'push': None,\\n    })\\n\\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                user_push = await session.get(self.entity, user_push_id)\\n                user_push.status = status\\n                if sent_at:\\n                    user_push.sent_at = sent_at\\n\\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\\n        async with self.session_maker() as session:\\n            res = await session.execute(\\n                select(self.entity)\\n                .where(self.entity.status == PushStatus.PLANNED)\\n                .options(*self.options)\\n                .order_by(self.entity.created_at)\\n                .limit(size)\\n            )\\n            res = res.unique().scalars().all()\\n\\n        return [self.entity_to_model(x) for x in res]  # noqa\\n\\n    def create_dto_to_entity(self, dto: CreateUserPushDTO) -> UserPush:\\n        return UserPush(\\n            id=dto.id,\\n            push_id=dto.push_id,\\n            user_id=dto.user_id,\\n            sent_at=dto.sent_at,\\n            status=PushStatus.PLANNED,\\n            created_at=dto.created_at,\\n            updated_at=dto.updated_at\\n        )\\n\\n    def entity_to_model(self, entity: UserPush) -> UserPushModel:\\n        def _map_user(user: User) -> UserModel:\\n            return UserModel(\\n                id=user.id,\\n                telegram_id=user.telegram_id,\\n                nickname=user.nickname,\\n                role=user.role,\\n                balance=user.balance,\\n                is_banned=user.is_banned,\\n                is_seller=user.is_seller,\\n                created_at=user.created_at,\\n                updated_at=user.updated_at,\\n            )\\n\\n        def _map_push(push: Push) -> PushModel:\\n            return PushModel(\\n                id=push.id,\\n                title=push.title,\\n                text=push.text,\\n                creator_id=push.creator_id,\\n                image_path=push.image_path,\\n                button_text=push.button_text,\\n                button_link=push.button_link,\\n                created_at=push.created_at,\\n                updated_at=push.updated_at\\n            )\\n\\n        return UserPushModel(\\n            id=entity.id,\\n            push_id=entity.push_id,\\n            user_id=entity.user_id,\\n            sent_at=entity.sent_at,\\n            status=entity.status,\\n            user=_map_user(entity.user) if entity.user else None,\\n            push=_map_push(entity.push) if entity.push else None,\\n            created_at=entity.created_at,\\n            updated_at=entity.updated_at\\n        )\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/repositories/sqlalchemy.py\",\n    \"content\": \"import logging\\nfrom abc import abstractmethod\\nfrom dataclasses import dataclass, field\\nfrom typing import Type, Optional\\nfrom uuid import UUID\\n\\nfrom sqlalchemy import select\\nfrom sqlalchemy.exc import NoResultFound\\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\\nfrom sqlalchemy.orm import joinedload, InstrumentedAttribute\\n\\nfrom abstractions.repositories import CRUDRepositoryInterface\\nfrom .exceptions import NotFoundException\\n\\nlogger = logging.getLogger(__name__)\\n\\n\\n@dataclass\\nclass AbstractSQLAlchemyRepository[Entity, Model, CreateDTO, UpdateDTO](\\n    CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO]\\n):\\n    session_maker: async_sessionmaker\\n\\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=dict)\\n    options: list = field(default_factory=list)\\n\\n    def __post_init__(self):\\n        self.entity: Type[Entity] = self.__orig_bases__[0].__args__[0]  # noqa\\n        self._set_lazy_fields()\\n\\n    def _set_lazy_fields(self):\\n        if not self.joined_fields:\\n            return\\n\\n        def convert_to_nested_dict(fields):\\n            return {field: {} for field in (fields or [])}\\n\\n        def get_associated_entity_class(attr_field):\\n            \\\"\\\"\\\"\\n            Extract the associated entity class from an InstrumentedAttribute.\\n            \\\"\\\"\\\"\\n            if hasattr(attr_field, \\\"comparator\\\") and hasattr(attr_field.comparator, \\\"prop\\\"):\\n                relationship_prop = attr_field.comparator.prop\\n                if hasattr(relationship_prop, \\\"mapper\\\"):\\n                    return relationship_prop.mapper.entity\\n            return None\\n\\n        def build_joinedload(attr_field, subfields, depth=0):\\n            \\\"\\\"\\\"\\n            Recursively build joinedload options for nested relationships.\\n            \\\"\\\"\\\"\\n            associated_entity = get_associated_entity_class(attr_field)\\n            if not associated_entity:\\n                raise ValueError(f\\\"Cannot determine associated entity class for attribute {attr_field}\\\")\\n\\n            loader = joinedload(attr_field)\\n            for subfield, nested_subfields in subfields.items():\\n                nested_attr_field = getattr(associated_entity, subfield, None)\\n                if nested_attr_field is None:\\n                    raise ValueError(f\\\"{subfield} is not a valid attribute of {associated_entity}\\\")\\n\\n                subloader = build_joinedload(nested_attr_field, nested_subfields, depth + 1)\\n                loader = loader.options(subloader)\\n            return loader\\n\\n        # Convert self.joined_fields to nested dictionaries if not already\\n        joined_fields = {}\\n        for field in self.joined_fields:\\n            joined_fields[field] = convert_to_nested_dict(self.joined_fields[field])\\n\\n        options_to_add = []\\n        for attr, subfields in joined_fields.items():\\n            attr_field: InstrumentedAttribute = getattr(self.entity, attr)\\n            if attr_field.comparator.prop.uselist:\\n                loader = build_joinedload(attr_field, subfields or {})\\n                options_to_add.append(loader)\\n            else:\\n                options_to_add.append(joinedload(attr_field))\\n\\n        self.options.extend(options_to_add)\\n\\n    async def create(self, obj: CreateDTO) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                session.add(self.create_dto_to_entity(obj))\\n\\n    async def get(self, obj_id: UUID) -> Model:\\n        async with self.session_maker() as session:\\n            try:\\n                if self.options:\\n                    res = await session.execute(\\n                        select(self.entity)\\n                        .where(self.entity.id == obj_id)\\n                        .options(*self.options)\\n                    )\\n                    obj = res.unique().scalars().one()\\n                else:\\n                    obj = await session.get(self.entity, obj_id)\\n                return self.entity_to_model(obj)\\n            except NoResultFound:\\n                raise NotFoundException\\n\\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                entity = await session.get(self.entity, obj_id)\\n                for key, value in obj.model_dump(exclude_unset=True).items():\\n                    setattr(entity, key, value)\\n\\n    async def delete(self, obj_id: UUID) -> None:\\n        async with self.session_maker() as session:\\n            async with session.begin():\\n                obj = await session.get(self.entity, obj_id)\\n                await session.delete(obj)\\n\\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Model]:\\n        async with self.session_maker() as session:\\n            if joined:\\n                if self.options:\\n                    return [\\n                        self.entity_to_model(entity)\\n                        for entity in (await session.execute(\\n                            select(self.entity)\\n                            .limit(limit)\\n                            .offset(offset)\\n                            .options(*self.options)\\n                        )).unique().scalars().all()\\n                    ]\\n            res = (await session.execute(\\n                select(self.entity)\\n                .limit(limit)\\n                .offset(offset)\\n            )).scalars().all()\\n            return [\\n                self.entity_to_model(entity)\\n                for entity in res\\n            ]\\n\\n    @abstractmethod\\n    def entity_to_model(self, entity: Entity) -> Model:\\n        ...\\n\\n    @abstractmethod\\n    def create_dto_to_entity(self, dto: CreateDTO) -> Entity:\\n        ...\\n\"\n  },\n  {\n    \"path\": \"notificator/infrastructure/db/repositories/exceptions.py\",\n    \"content\": \"class NotFoundException(Exception):\\n    ...\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/domain/dto/abstract.py\",\n    \"content\": \"from datetime import datetime\\nfrom uuid import UUID, uuid4\\n\\nfrom pydantic import BaseModel, Field\\n\\n\\nclass CreateDTO(BaseModel):\\n    id: UUID = Field(default_factory=uuid4)\\n    created_at: datetime = Field(default_factory=datetime.now)\\n    updated_at: datetime = Field(default_factory=datetime.now)\\n\\n\\nclass UpdateDTO(BaseModel):\\n    updated_at: datetime = Field(default_factory=datetime.now)\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/dto/user.py\",\n    \"content\": \"from typing import Optional\\n\\nfrom pydantic import Field\\n\\nfrom .abstract import CreateDTO, UpdateDTO\\nfrom infrastructure.db.enums import UserRole\\n\\n\\nclass CreateUserDTO(CreateDTO):\\n    telegram_id: Optional[int]\\n    nickname: Optional[str] = None\\n    role: str = Field(default=UserRole.USER)\\n\\n\\n\\nclass UpdateUserDTO(UpdateDTO):\\n    telegram_id: Optional[int] = None\\n    nickname: Optional[str] = None\\n    role: Optional[str] = None\\n    is_banned: Optional[bool] = None\\n    is_seller: Optional[bool] = None\\n    balance: Optional[int] = None\\n\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/dto/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/domain/dto/user_push.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom infrastructure.db.enums.push_status import PushStatus\\nfrom .abstract import CreateDTO, UpdateDTO\\nfrom domain.models import User, Push\\n\\n\\nclass CreateUserPushDTO(CreateDTO):\\n    push_id: UUID\\n    user_id: UUID\\n    sent_at: Optional[datetime]\\n    push: Push\\n    user: User\\n\\nclass UpdateUserPushDTO(UpdateDTO):\\n    push_id: Optional[UUID] = None\\n    user_id: Optional[UUID] = None\\n    sent_at: Optional[datetime] = None\\n    status: Optional[PushStatus] = None\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/dto/push.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom .abstract import CreateDTO, UpdateDTO\\n\\n\\nclass CreatePushDTO(CreateDTO):\\n    title: str\\n    text: str\\n    creator_id: UUID\\n    image_path: Optional[str] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\\n\\nclass UpdatePushDTO(UpdateDTO):\\n    title: Optional[str] = None\\n    text: Optional[str] = None\\n    creator_id: Optional[UUID] = None\\n    image_path: Optional[str] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/dto/notification/__init__.py\",\n    \"content\": \"from .sending import SendMessageDto, MessageSendingResultDto\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/dto/notification/sending.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass SendMessageDto(BaseModel):\\n    text: str\\n    chat_id: int\\n    image_path: Optional[str] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\\n\\nclass MessageSendingResultDto(BaseModel):\\n    sent_at: Optional[datetime] = None\\n    error: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/models/abstract.py\",\n    \"content\": \"from datetime import datetime\\nfrom uuid import UUID\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass Model(BaseModel):\\n    id: UUID\\n    created_at: datetime\\n    updated_at: datetime\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/models/user.py\",\n    \"content\": \"from typing import Optional\\n\\nfrom pydantic import ConfigDict\\n\\nfrom infrastructure.db.enums import UserRole\\nfrom .abstract import Model\\n\\n\\nclass User(Model):\\n    telegram_id: Optional[int] = None\\n    nickname: Optional[str] = None\\n    role: UserRole\\n    is_banned: bool\\n    is_seller: bool\\n    balance: Optional[int] = None\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/models/notification.py\",\n    \"content\": \"from typing import Optional\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass Notification(BaseModel):\\n    text: str\\n    chat_id: int\\n    image_path: Optional[str] = None\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/models/__init__.py\",\n    \"content\": \"from .user import User\\nfrom .user_push import UserPush\\nfrom .push import Push\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/models/user_push.py\",\n    \"content\": \"from datetime import datetime\\nfrom typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import ConfigDict\\n\\nfrom infrastructure.db.enums.push_status import PushStatus\\nfrom .abstract import Model\\nfrom .push import Push\\nfrom .user import User\\n\\n\\nclass UserPush(Model):\\n    push_id: UUID\\n    user_id: UUID\\n    sent_at: Optional[datetime] = None\\n    status: PushStatus\\n\\n    push: Push\\n    user: User\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\"\n  },\n  {\n    \"path\": \"notificator/domain/models/push.py\",\n    \"content\": \"from typing import Optional\\nfrom uuid import UUID\\n\\nfrom pydantic import ConfigDict\\n\\nfrom domain.models import User\\nfrom .abstract import Model\\n\\n\\nclass Push(Model):\\n    title: str\\n    text: str\\n    creator_id: UUID\\n    image_path: Optional[str] = None\\n    button_text: Optional[str] = None\\n    button_link: Optional[str] = None\\n\\n    creator: Optional[User] = None\\n\\n    model_config = ConfigDict(from_attributes=True)\\n\"\n  },\n  {\n    \"path\": \"notificator/services/upload.py\",\n    \"content\": \"import os\\nfrom dataclasses import field, dataclass\\n\\nfrom abstractions.services.upload import UploadServiceInterface\\n\\n\\n@dataclass\\nclass UploadService(UploadServiceInterface):\\n    images_dir: str = field(default=\\\"/app/upload\\\")\\n\\n    def get_filepath(self, filename: str) -> str:\\n        return os.path.join(self.images_dir, filename)\\n\"\n  },\n  {\n    \"path\": \"notificator/services/notification.py\",\n    \"content\": \"import json\\nimport logging\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nfrom typing import Optional\\nimport os\\n\\nfrom httpx import AsyncClient\\n\\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\\nfrom abstractions.services.notification import NotificationServiceInterface\\nfrom dependencies.services.upload import get_upload_service\\nfrom domain.dto.notification import SendMessageDto, MessageSendingResultDto\\nfrom domain.models.user_push import UserPush\\nfrom infrastructure.db.enums.push_status import PushStatus\\n\\n\\nlogger = logging.getLogger(__name__)\\n\\n@dataclass\\nclass Notificator(NotificationServiceInterface):\\n    token: str\\n    notifications_repository: UserPushRepositoryInterface\\n\\n    async def send_notification(self, notification: UserPush) -> None:\\n        async def set_status(status: PushStatus, sent_at: Optional[datetime] = None):\\n            await self.notifications_repository.set_status(\\n                user_push_id=notification.id,\\n                status=status,\\n                sent_at=sent_at,\\n            )\\n\\n        await set_status(PushStatus.IN_PROGRESS)\\n\\n        upload_service = get_upload_service()\\n        message = SendMessageDto(\\n            text=notification.push.text,\\n            chat_id=notification.user.telegram_id,\\n            image_path=upload_service.get_filepath(notification.push.image_path),\\n            button_text=notification.push.button_text,\\n            button_link=notification.push.button_link,\\n        )\\n\\n        result = await self._send_message(message)\\n        if result.sent_at:\\n            await set_status(PushStatus.DELIVERED, datetime.now())\\n        if result.error:\\n            await set_status(PushStatus.FAILED)\\n            logger.error(result.error)\\n\\n    async def _send_message(self, message: SendMessageDto) -> MessageSendingResultDto:\\n        try:\\n            reply_markup = None\\n            # Use the web_app field for a miniapp button\\n            if message.button_text and message.button_link:\\n                inline_keyboard = [[{\\\"text\\\": message.button_text, \\\"web_app\\\": {\\\"url\\\": message.button_link}}]]\\n                reply_markup = json.dumps({\\\"inline_keyboard\\\": inline_keyboard})\\n\\n            async with AsyncClient() as client:\\n                if message.image_path:\\n                    with open(message.image_path, \\\"rb\\\") as image_file:\\n                        filename = os.path.basename(message.image_path)\\n                        files = {\\n                            \\\"photo\\\": (filename, image_file, \\\"application/octet-stream\\\")\\n                        }\\n                        data = {\\n                            \\\"chat_id\\\": message.chat_id,\\n                            \\\"caption\\\": message.text,\\n                        }\\n                        if reply_markup:\\n                            data[\\\"reply_markup\\\"] = reply_markup\\n                        url = f'https://api.telegram.org/bot{self.token}/sendPhoto'\\n                        response = await client.post(url, data=data, files=files)\\n                else:\\n                    params = {\\n                        \\\"chat_id\\\": message.chat_id,\\n                        \\\"text\\\": message.text,\\n                    }\\n                    if reply_markup:\\n                        params[\\\"reply_markup\\\"] = reply_markup\\n                    url = f'https://api.telegram.org/bot{self.token}/sendMessage'\\n                    response = await client.post(url, params=params)\\n\\n                response.raise_for_status()\\n\\n            return MessageSendingResultDto(sent_at=datetime.now())\\n        except Exception as e:\\n            logger.exception(\\\"Error sending message\\\")\\n            return MessageSendingResultDto(error=str(e))\\n\"\n  },\n  {\n    \"path\": \"notificator/services/__init__.py\",\n    \"content\": \"\"\n  },\n  {\n    \"path\": \"notificator/services/consumer.py\",\n    \"content\": \"import logging\\nfrom asyncio import sleep\\nfrom dataclasses import dataclass, field\\nfrom typing import NoReturn\\n\\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\\nfrom abstractions.services.consumer import ConsumerInterface\\nfrom abstractions.services.notification import NotificationServiceInterface\\n\\nlogger = logging.getLogger(__name__)\\n\\n@dataclass\\nclass Consumer(ConsumerInterface):\\n    notification_repository: UserPushRepositoryInterface\\n\\n    global_notification_delay: int = field(default=1)\\n    inner_notification_delay: int = field(default=1)\\n\\n    async def execute(self, notificator: NotificationServiceInterface) -> NoReturn:\\n        logger.info(\\\"Consumer started\\\")\\n        while True:\\n            notifications_to_send = await self.notification_repository.get_queued_pushes()\\n            for notification in notifications_to_send:\\n                await notificator.send_notification(notification)\\n                await sleep(self.inner_notification_delay)\\n\\n            await sleep(self.global_notification_delay)\\n\"\n  }\n]"
  },
  {
    "path": "scrape.py",
    "content": "#!/usr/bin/env python3\n\"\"\"\nScript to collect all .py files in a project, excluding specified files and directories,\nand write their names and contents to an output file in JSON format.\n\"\"\"\n\nimport os\nimport fnmatch\nimport json\nimport argparse\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description=\"Collect .py files from a project, excluding specified patterns.\"\n    )\n    parser.add_argument(\n        \"root_dir\",\n        nargs=\"?\",\n        default=\".\",\n        help=\"Root directory of the project (default: current directory).\"\n    )\n    parser.add_argument(\n        \"-o\", \"--output\",\n        default=\"collected_py_files.json\",\n        help=\"Output file to write the collected data (default: collected_py_files.json).\"\n    )\n    parser.add_argument(\n        \"--exclude-files\",\n        nargs=\"*\",\n        default=[\"*.lock\", \"*~\", '.DS_Store', '*.png', '*.ico', '*.jpg', '*.env'],\n        help=\"File patterns to exclude (default: ['*.lock', '*~']).\"\n    )\n    parser.add_argument(\n        \"--exclude-dirs\",\n        nargs=\"*\",\n        default=[\"__pycache__\", \".git\", \"node_modules\", \".venv\", 'upload', 'fonts', 'icons', 'images', '.yarn', '.idea'],\n        help=\"Directory names to exclude (default: ['__pycache__', '.git', 'node_modules']).\"\n    )\n    return parser.parse_args()\n\n\ndef should_exclude(name, patterns):\n    \"\"\"Check if a filename or directory matches any of the exclusion patterns.\"\"\"\n    return any(fnmatch.fnmatch(name, pat) for pat in patterns)\n\n\ndef collect_py_files(root_dir, exclude_files, exclude_dirs):\n    collected = []\n    for dirpath, dirnames, filenames in os.walk(root_dir):\n        # Exclude specified directories in-place to avoid descending into them\n        dirnames[:] = [d for d in dirnames if not should_exclude(d, exclude_dirs)]\n        for filename in filenames:\n            # Only .py files\n            # if not filename.endswith(\".py\"):\n            #     continue\n            # Skip excluded file patterns\n            if should_exclude(filename, exclude_files):\n                continue\n            full_path = os.path.join(dirpath, filename)\n            try:\n                with open(full_path, \"r\", encoding=\"utf-8\") as f:\n                    content = f.read()\n            except Exception as e:\n                print(f\"Warning: Could not read {full_path}: {e}\")\n                continue\n            rel_path = os.path.relpath(full_path, root_dir)\n            collected.append({\n                \"path\": rel_path,\n                \"content\": content\n            })\n    return collected\n\n\ndef main():\n    args = parse_args()\n    data = collect_py_files(args.root_dir, args.exclude_files, args.exclude_dirs)\n    with open(args.output, \"w\", encoding=\"utf-8\") as out_f:\n        json.dump(data, out_f, ensure_ascii=False, indent=2)\n    print(f\"Collected {len(data)} files and wrote to {args.output}\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  {
    "path": "frontend/tailwind.config.js",
    "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{js,ts,jsx,tsx,mdx}\"],\n  theme: {\n    extend: {\n      colors: {\n        brand:       \"#4872db\",\n        brand2:      \"#849cd6\",\n        brandlight:  \"#adbbde\",\n        brandlight2: \"#c8cedf\",\n        white: \"#f9fcff\",\n        white2: \"#e3e4da\",\n      },\n    },\n\n    linearGradientColors: theme => ({\n      brand:      [theme(\"colors.brand\"),      theme(\"colors.brand2\")],\n      brandlight: [theme(\"colors.brandlight\"), theme(\"colors.brandlight2\")],\n      gray:       [theme(\"colors.gray.300\"),   theme(\"colors.gray.100\")],\n      darkGray:       [theme(\"colors.gray.800\"),   theme(\"colors.gray.400\")],\n      white:       [theme(\"colors.white\"),  theme(\"colors.white2\")],\n    }),\n\n    radialGradientColors: theme => ({\n      brand:      [theme(\"colors.brand\"),      theme(\"colors.brand2\")],\n      brandlight: [theme(\"colors.brandlight\"), theme(\"colors.brandlight2\")],\n      gray:       [theme(\"colors.gray.400\"),   theme(\"colors.gray.100\")],\n      darkGray:       [theme(\"colors.gray.500\"),   theme(\"colors.gray.300\")],\n      white:       [theme(\"colors.white\"),  theme(\"colors.white2\")],\n    }),\n\n    // для конического\n    conicGradientColors: theme => ({\n      brand:      [theme(\"colors.brand\"),      theme(\"colors.brand2\")],\n      brandlight: [theme(\"colors.brandlight\"), theme(\"colors.brandlight2\")],\n      gray:       [theme(\"colors.gray.400\"),   theme(\"colors.gray.100\")],\n      darkGray:       [theme(\"colors.gray.500\"),   theme(\"colors.gray.300\")],\n      white:       [theme(\"colors.white\"),  theme(\"colors.white2\")],\n    }),\n\n    keyframes: {\n      borderShine: {\n        '0%':   { transform: 'translateX(-100%)' },\n        '100%': { transform: 'translateX(100%)' },\n      },\n      textShine: {\n        '0%':   { 'background-position': '0% 50%' },\n        '100%': { 'background-position': '200% 50%' },\n      },\n    },\n    animation: {\n      'once-border-shine': 'borderShine 1s ease-out forwards',\n      'once-text-shine':   'textShine   1.5s ease-out forwards',\n    },\n    backgroundImage: {\n      'shine-text':\n          'linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.8) 50%, transparent 100%)',\n    },\n    backgroundSize: {\n      '300%': '300% auto',\n    },\n  },\n  variants: {\n    backgroundImage:           ['responsive'],\n    linearGradients:           ['responsive'],\n    radialGradients:           ['responsive'],\n    conicGradients:            ['responsive'],\n    repeatingLinearGradients:  ['responsive'],\n    repeatingRadialGradients:  ['responsive'],\n    repeatingConicGradients:   ['responsive'],\n  },\n  plugins: [\n    require('tailwindcss-gradients'),\n    require('@tailwindcss/aspect-ratio'),\n  ],\n}\n"
  },
  {
    "path": "frontend/Dockerfile",
    "content": "FROM node:20-alpine as build\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --frozen-lockfile --network-timeout 300000\n\nCOPY . .\nRUN yarn build\n\n# Stage 2: Serve with Nginx\nFROM nginx:latest\nCOPY --from=build /app/build /usr/share/nginx/html\n# Copy our custom config file (make sure default.conf is in the same directory as your Dockerfile)\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
  },
  {
    "path": "frontend/README.md",
    "content": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `yarn start`\n\nRuns the app in the envelopment mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `yarn test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `yarn build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `yarn eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n"
  },
  {
    "path": "frontend/Dockerfile.dev",
    "content": "# Dockerfile.env для фронтенда\nFROM node:20-alpine\n\nWORKDIR /app\n\n# Копируем package.json и yarn.lock для установки зависимостей\nCOPY package.json yarn.lock ./\n\n# Устанавливаем зависимости\nRUN yarn install --frozen-lockfile --network-timeout 300000\n\n# Копируем весь проект\nCOPY . .\n\nCOPY local.env .env\n\nEXPOSE 3000\n\nCMD [\"yarn\", \"start\"]\n"
  },
  {
    "path": "frontend/.gitignore",
    "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# production\n/build\n\n# misc\n.DS_Store\n.env.local\n.env.envelopment.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n"
  },
  {
    "path": "frontend/package.json",
    "content": "{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@headlessui/react\": \"^2.2.2\",\n    \"@telegram-apps/sdk\": \"^3.5.3\",\n    \"@testing-library/dom\": \"^10.4.0\",\n    \"@testing-library/jest-dom\": \"^6.6.3\",\n    \"@testing-library/react\": \"^16.1.0\",\n    \"@testing-library/user-event\": \"^13.2.1\",\n    \"@types/jest\": \"^27.0.1\",\n    \"@types/node\": \"^16.7.13\",\n    \"@types/react\": \"^19.0.0\",\n    \"@types/react-dom\": \"^19.0.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"axios\": \"^1.8.3\",\n    \"axios-auth-refresh\": \"^3.3.6\",\n    \"eruda\": \"^3.4.1\",\n    \"framer-motion\": \"^12.9.2\",\n    \"lucide-react\": \"^0.503.0\",\n    \"postcss\": \"^8.4.24\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"react-router-dom\": \"^7.3.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"styled-components\": \"^6.1.17\",\n    \"tailwindcss\": \"^3.4.15\",\n    \"typescript\": \"^4.4.2\",\n    \"usehooks-ts\": \"^3.1.1\",\n    \"web-vitals\": \"^2.1.0\"\n  },\n  \"scripts\": {\n    \"tailwind:init\": \"tailwindcss init -p\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/aspect-ratio\": \"^0.4.2\",\n    \"@tailwindcss/line-clamp\": \"^0.4.4\",\n    \"@types/styled-components\": \"^5.1.34\",\n    \"tailwindcss-gradients\": \"^3.0.0\"\n  }\n}\n"
  },
  {
    "path": "frontend/tsconfig.json",
    "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"ESNext\",\n    \"jsx\": \"react-jsx\",\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"moduleResolution\": \"Node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src\"]\n}\n\n\n//{\n//  \"compilerOptions\": {\n//    \"target\": \"es5\",\n//    \"lib\": [\n//      \"dom\",\n//      \"dom.iterable\",\n//      \"esnext\"\n//    ],\n//    \"allowJs\": true,\n//    \"skipLibCheck\": true,\n//    \"esModuleInterop\": true,\n//    \"allowSyntheticDefaultImports\": true,\n//    \"strict\": true,\n//    \"forceConsistentCasingInFileNames\": true,\n//    \"noFallthroughCasesInSwitch\": true,\n//    \"module\": \"esnext\",\n//    \"moduleResolution\": \"node\",\n//    \"resolveJsonModule\": true,\n//    \"isolatedModules\": true,\n//    \"noEmit\": true,\n//    \"jsx\": \"react-jsx\"\n//  },\n//  \"include\": [\n//    \"src\",\n//    \"tailwind.config.ts\"\n//  ]\n//}\n"
  },
  {
    "path": "frontend/nginx.conf",
    "content": "server {\n    listen       80;\n    server_name  _;\n\n    root   /usr/share/nginx/html;\n    index  index.html;\n\n    location / {\n        # First attempt to serve request as file, then as directory,\n        # then fallback to index.html for client side routing.\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Optionally, you can cache static resources\n    location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ {\n        expires 1M;\n        add_header Cache-Control \"public\";\n    }\n}\n"
  },
  {
    "path": "frontend/tailwindcss.d.ts",
    "content": "declare module 'tailwindcss';\n"
  },
  {
    "path": "frontend/postcss.config.js",
    "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n"
  },
  {
    "path": "frontend/public/index.html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta name=\"viewport\" content=\"width=envice-width, initial-scale=1\" />\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <link rel=\"stylesheet\" href=\"%PUBLIC_URL%/fonts/fonts.css\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile envice or desktop. See https://ENVIRONMENTs.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n    <script src=\"https://telegram.org/js/telegram-web-app.js\"></script>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the envelopment, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n"
  },
  {
    "path": "frontend/public/manifest.json",
    "content": "{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n"
  },
  {
    "path": "frontend/public/robots.txt",
    "content": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n"
  },
  {
    "path": "frontend/src/index.tsx",
    "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"
  },
  {
    "path": "frontend/src/App.tsx",
    "content": "import React, {useEffect} from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport CatalogPage from './pages/CatalogPage';\nimport SellerCabinet from \"./pages/SellerCabinet\";\nimport MyProductsPage from \"./pages/MyProductsPage\";\nimport CreateProductForm from \"./pages/CreateProductForm\";\nimport CreateProductInfo from \"./pages/CreateProductInfo\";\nimport { AuthProvider } from \"./contexts/auth\";\nimport MyOrdersPage from \"./pages/MyOrdersPage\";\nimport InstructionPage from \"./pages/order_flow/InstructionPage\";\nimport CartScreenshotPage from \"./pages/order_flow/CartScreenshotPage\";\nimport ProductFindPage from \"./pages/order_flow/ProductFindPage\";\nimport ProductFavoritePage from \"./pages/order_flow/ProductFavoritePage\";\nimport PaymentDetailsPage from \"./pages/order_flow/PaymentDetailsPage\";\nimport StepOrderPlacement from \"./pages/order_flow/StepOrderPlacement\";\nimport ProductPickupPage from \"./pages/order_flow/ProductPickupPage\";\nimport StepReviewReportPage from \"./pages/order_flow/StepReviewReportPage\";\nimport ProductDetailPage from \"./pages/ProductDetailPage\";\nimport FinalDealPage from \"./pages/order_flow/FinalDealPage\";\nimport BackButtonManager from \"./components/BackButtonManager\";\nimport SellerReportsPage from \"./pages/SellerReportsPage\";\nimport OrderReportPage from \"./pages/OrderReportPage\";\nimport eruda from 'eruda';\nimport SellerBalancePage from \"./pages/SellerBalance\";\nimport AboutPage from \"./pages/AboutPage\";\nimport CompleteInstructionPage from \"./pages/CompleteInstructionPage\";\nimport RequirementsPage from \"./pages/RequirementsPage\";\nimport QuestionPage from \"./pages/QuestionPage\";\nimport ModeratorDashboard from \"./pages/moderator/ModeratorDashboard\";\nimport ModeratorProductsPage from \"./pages/moderator/ModeratorProductsPage\";\nimport ModeratorProductReviewPage from \"./pages/moderator/ModeratorProductReviewPage\";\nimport ModeratorUsersPage from \"./pages/moderator/ModeratorUserPage\";\nimport PushFormPage from \"./pages/moderator/PushFormPage\";\nimport InviteFriendsPage from \"./pages/InviteFriendsPage\";\nimport ModeratorUserDetailPage from \"./pages/moderator/ModeratorUserDetailPage\";\nimport PushAdminPage from \"./pages/moderator/PushAdminPage\";\nimport PushDetailsPage from \"./pages/moderator/PushDetailsPage\";\n\n\nimport { init, mountViewport, expandViewport } from '@telegram-apps/sdk';\n\n\nfunction App() {\n    useEffect(() => {\n        // 1) Локальная консоль ошибок\n        eruda.init();\n\n        // 2) Инициализируем Telegram Mini App SDK\n        init();\n\n        // 3) Монтируем viewport (запрашиваем у Telegram параметры вьюпорта)\n        if (mountViewport.isAvailable()) {\n            mountViewport()\n                .then(() => {\n                    // 4) После успешного монтирования расширяем WebApp\n                    if (expandViewport.isAvailable()) {\n                        expandViewport();\n                    }\n                })\n                .catch(console.error);\n        }\n    }, []);\n\n    return (\n        <AuthProvider>\n            <BrowserRouter>\n                <BackButtonManager/>\n                <Routes>\n                    <Route path=\"/\" element={<HomePage/>}/>\n                    <Route path=\"/invite\" element={<InviteFriendsPage/>}/>\n                    <Route path=\"/about\" element={<AboutPage/>}/>\n                    <Route path=\"/instruction\" element={<CompleteInstructionPage/>}/>\n                    <Route path=\"/requirements\" element={<RequirementsPage/>}/>\n                    <Route path=\"/question\" element={<QuestionPage/>}/>\n                    <Route path=\"/catalog\" element={<CatalogPage/>}/>\n                    <Route path=\"/product/:productId\" element={<ProductDetailPage/>}/>\n                    <Route path=\"/product/:productId/instruction\" element={<InstructionPage/>}/>\n                    <Route path=\"/product/:productId/step-1\" element={<CartScreenshotPage/>}/>\n                    <Route path=\"/order/:orderId/step-2\" element={<ProductFindPage/>}/>\n                    <Route path=\"/order/:orderId/step-3\" element={<ProductFavoritePage/>}/>\n                    <Route path=\"/order/:orderId/step-4\" element={<PaymentDetailsPage/>}/>\n                    <Route path=\"/order/:orderId/step-5\" element={<StepOrderPlacement/>}/>\n                    <Route path=\"/order/:orderId/step-6\" element={<ProductPickupPage/>}/>\n                    <Route path=\"/order/:orderId/step-7\" element={<StepReviewReportPage/>}/>\n                    <Route path=\"/order/:orderId/order-info\" element={<FinalDealPage/>}/>\n\n                    <Route path=\"/seller-cabinet\" element={<SellerCabinet/>}/>\n                    <Route path=\"/seller-cabinet/reports\" element={<SellerReportsPage/>}/>\n                    <Route path=\"/seller-cabinet/reports/:orderId\" element={<OrderReportPage/>}/>\n                    <Route path=\"/seller-cabinet/balance\" element={<SellerBalancePage/>}/>\n                    <Route path=\"/my-products\" element={<MyProductsPage/>}/>\n                    <Route path=\"/create-product/:productId?\" element={<CreateProductForm/>}/>\n                    <Route path=\"/product/:productId/seller\" element={<CreateProductInfo/>}/>\n                    <Route path=\"/user/orders\" element={<MyOrdersPage/>}/>\n\n                    <Route path=\"/moderator\" element={<ModeratorDashboard/>}/>\n                    <Route path=\"/moderator/users\" element={<ModeratorUsersPage/>}/>\n                    <Route path=\"/moderator/products\" element={<ModeratorProductsPage/>}/>\n                    <Route path=\"/moderator/products/:productId\" element={<ModeratorProductReviewPage/>}/>\n                    <Route path=\"/\" element={<HomePage />} />\n                    <Route path=\"/moderator\" element={<ModeratorDashboard />} />\n                    <Route path=\"/moderator/users\" element={<ModeratorUsersPage />} />\n                    <Route path=\"/moderator/users/:userId\" element={<ModeratorUserDetailPage />} />\n                    <Route path=\"/moderator/products\" element={<ModeratorProductsPage />} />\n                    <Route path=\"/moderator/products/:productId\" element={<ModeratorProductReviewPage />} />\n\n                    <Route path=\"/moderator/pushes\" element={<PushAdminPage/>}/>\n                    <Route path=\"/moderator/pushes/new\" element={<PushFormPage/>}/>\n                    <Route path=\"/moderator/pushes/:pushId\" element={<PushDetailsPage/>}/>\n                    <Route path=\"/moderator/pushes/:pushId/edit\" element={<PushFormPage/>}/>\n                </Routes>\n            </BrowserRouter>\n        </AuthProvider>\n    );\n}\n\nexport default App;\n"
  },
  {
    "path": "frontend/src/App.test.tsx",
    "content": "import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n"
  },
  {
    "path": "frontend/src/App.css",
    "content": ".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n"
  },
  {
    "path": "frontend/src/index.css",
    "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  @apply bg-gray-200;\n  font-family: 'Montserrat', sans-serif;\n}\n\n@layer utilities {\n    @keyframes flash-border {\n        0%, 100% { border-color: theme('colors.red.600'); }\n        50%      { border-color: transparent; }\n    }\n    .flash-border {\n        animation: flash-border 0.5s ease-in-out 2; /* длительность 0.5с, 2 цикла */\n    }\n}\n"
  },
  {
    "path": "frontend/src/setupTests.ts",
    "content": "// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n"
  },
  {
    "path": "frontend/src/telegram.d.ts",
    "content": "import { TelegramGameProxy } from \"@telegram-apps/sdk\";\n\ndeclare global {\n    interface Window {\n        Telegram: {\n            WebApp: {\n                initData?: string;\n                initDataUnsafe?: {\n                    query_id?: string;\n                    user?: {\n                        id: number;\n                        first_name?: string;\n                        last_name?: string;\n                        username?: string;\n                        photo_url?: string;\n                        language_code?: string;\n                    };\n                    auth_date?: number;\n                    hash?: string;\n                };\n                expand: () => void;\n                close: () => void;\n            };\n        };\n        TelegramGameProxy: TelegramGameProxy,\n    }\n}\n\nexport {};\n"
  },
  {
    "path": "frontend/src/reportWebVitals.ts",
    "content": "import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"
  },
  {
    "path": "frontend/src/react-app-env.d.ts",
    "content": "/// <reference types=\"react-scripts\" />\n"
  },
  {
    "path": "frontend/src/logo.svg",
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 841.9 595.3\"><g fill=\"#61DAFB\"><path d=\"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"/><circle cx=\"420.9\" cy=\"296.5\" r=\"45.7\"/><path d=\"M520.5 78.1z\"/></g></svg>"
  },
  {
    "path": "frontend/src/enums.ts",
    "content": "export enum PayoutTime {\n    AFTER_REVIEW = 'После отзыва',\n    AFTER_DELIVERY = 'После получения товара',\n    ON_15TH_DAY = 'На 15й день',\n}\n\nexport enum Category {\n    WOMEN = 'Женщинам',\n    MEN = 'Мужчинам',\n    SHOES = 'Обувь',\n    KIDS = 'Детям',\n    HOME = 'Дом',\n    NEW_YEAR = 'Новый год',\n    BEAUTY = 'Красота',\n    ACCESSORIES = 'Аксессуары',\n    ELECTRONICS = 'Электроника',\n    TOYS = 'Игрушки',\n    FURNITURE = 'Мебель',\n    ADULT = 'Товары для взрослых',\n    APPLIANCES = 'Бытовая техника',\n    PETS = 'Зоотовары',\n    SPORTS = 'Спорт',\n    AUTO = 'Автотовары',\n    JEWELRY = 'Ювелирные изделия',\n    REPAIR = 'Для ремонта',\n    GARDEN = 'Сад и дача',\n    HEALTH = 'Здоровье',\n    STATIONERY = 'Канцтовары',\n}\n\nexport enum UserRole {\n    USER = \"user\",\n    CLIENT = \"client\",\n    SELLER = \"seller\",\n    MODERATOR = \"moderator\",\n    ADMIN = \"admin\"\n}\n\nexport enum ProductStatus {\n    CREATED = \"created\",\n    ACTIVE = \"active\",\n    NOT_PAID = \"not_paid\",\n    DISABLED = \"disabled\",\n    REJECTED = \"rejected\",\n    ARCHIVED = \"archived\",\n}\n\nexport enum OrderStatus {\n    CASHBACK_PAID = \"cashback_paid\",\n    CASHBACK_NOT_PAID = \"cashback_not_paid\",\n    CANCELLED = \"cancelled\",\n    PAYMENT_CONFIRMED = \"payment_confirmed\"\n\n}"
  },
  {
    "path": "frontend/src/types/MeResponse.ts",
    "content": "import { UserRole } from \"../enums\";\n\nexport interface MeResponse {\n    id: string;\n    telegram_id?: number;\n    nickname?: string;\n    role: \"user\" | \"client\" | \"seller\" | \"moderator\" | \"admin\";\n    is_banned: boolean;\n    balance: number;\n    created_at: string;\n    updated_at: string;\n}\n"
  },
  {
    "path": "frontend/src/types/CreateProductRequest.ts",
    "content": "import {Category, PayoutTime} from \"../enums\";\n\nexport interface CreateProductRequest {\n    name: string;\n    article: string;\n    brand: string;\n    category: Category;\n    key_word: string;\n    general_repurchases: number;\n    daily_repurchases: number;\n    price: number;\n    wb_price: number;\n    tg: string;\n    payment_time: PayoutTime;\n    review_requirements: string;\n    image_path?: string;\n}\n"
  },
  {
    "path": "frontend/src/contexts/auth.tsx",
    "content": "import {createContext, useContext, useEffect, useState} from \"react\";\nimport {apiClient} from \"../services/apiClient\";\nimport {getMe} from \"../services/api\";\nimport {initData} from \"@telegram-apps/sdk\";\n\n\ninterface AuthContextType {\n    userId: string | null;\n    isModerator: boolean | null;\n    isAdmin: boolean | null;\n    loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {\n    const [userId, setUserId] = useState<string | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [isModerator, setIsModerator] = useState<boolean | null>(null);\n    const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\n\n    useEffect(() => {\n        const authenticateUser = async () => {\n            initData.restore();\n            const data = initData.raw();\n\n            if (!data) {\n                console.error(\"No initData found\");\n                setLoading(false);\n                return;\n            }\n\n            try {\n                // Extract the \"ref\" query parameter from the URL, if it exists.\n                const searchParams = new URLSearchParams(window.location.search);\n                const ref = searchParams.get(\"ref\");\n\n                // Create the payload, including initData and, if present, the ref parameter.\n                const payload: { initData: string; ref?: string } = { initData: data };\n                if (ref) {\n                    payload.ref = ref;\n                }\n\n                const response = await apiClient.post(\"/auth/telegram\", payload);\n                localStorage.setItem(\"authToken\", response.data.access_token);\n                localStorage.setItem(\"refreshToken\", response.data.refresh_token);\n\n                const me = await getMe();\n                setUserId(me.id);\n                setIsModerator(me.role === \"moderator\" || me.role === \"admin\");\n                setIsAdmin(me.role === \"admin\");\n            } catch (error) {\n                console.error(\"Authentication failed\", error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        authenticateUser();\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{userId, loading, isModerator, isAdmin}}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Hook for consuming authentication context\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n    return context;\n};"
  },
  {
    "path": "frontend/src/components/CopyableUuid.tsx",
    "content": "import React, { useState } from 'react';\n\ninterface CopyableUuidProps {\n    uuid: string;\n}\n\nconst CopyableUuid: React.FC<CopyableUuidProps> = ({ uuid }) => {\n    const [copied, setCopied] = useState(false);\n    const truncated = `${uuid.slice(0, 2)}...${uuid.slice(-2)}`;\n\n    const handleClick = async () => {\n        try {\n            await navigator.clipboard.writeText(uuid);\n            setCopied(true);\n            setTimeout(() => setCopied(false), 2000);\n        } catch (err) {\n            console.error('Ошибка при копировании UUID', err);\n        }\n    };\n\n    return (\n        <span onClick={handleClick} className=\"relative inline-block cursor-pointer text-blue-600\">\n      {truncated}\n            {copied && (\n                <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded shadow-lg text-center\">\n\n                    Скопировано\n                </div>\n            )}\n    </span>\n    );\n};\n\nexport default CopyableUuid;\n"
  },
  {
    "path": "frontend/src/components/NumericInput.tsx",
    "content": "import React from \"react\";\n\nexport interface NumericInputProps\n    extends React.InputHTMLAttributes<HTMLInputElement> {\n    name: string;\n    value: string;\n    onValueChange: (field: string, value: string) => void;\n}\n\nexport const NumericInput = React.forwardRef<HTMLInputElement, NumericInputProps>(\n    (\n        {\n            name,\n            value,\n            onValueChange,\n            onFocus,\n            onKeyDown,\n            className,\n            ...rest\n        },\n        ref\n    ) => {\n        // при фокусе очищаем \"0\"\n        const handleFocus: React.FocusEventHandler<HTMLInputElement> = (e) => {\n            if (e.target.value === \"0\") {\n                onValueChange(name, \"\");\n            }\n            onFocus?.(e);\n        };\n\n        // при вводе оставляем только цифры\n        const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n            const digits = e.target.value.replace(/\\D/g, \"\");\n            onValueChange(name, digits);\n            // курсор в конец\n            window.requestAnimationFrame(() => {\n                e.target.selectionStart = e.target.selectionEnd = e.target.value.length;\n            });\n        };\n\n        return (\n            <input\n                ref={ref}\n                name={name}\n                value={value}\n                type=\"text\"\n                inputMode=\"numeric\"\n                onFocus={handleFocus}\n                onChange={handleChange}\n                onKeyDown={onKeyDown}\n                className={className}\n                {...rest}\n            />\n        );\n    }\n);\n"
  },
  {
    "path": "frontend/src/components/ReferralButton.tsx",
    "content": "// ReferralGlowingButton.tsx\nimport React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n\n// Анимация скользящего блика по тексту\nconst textShine = keyframes`\n    0%   { background-position: -150% 0; }\n    100% { background-position: 150% 0; }\n`;\n\n\n// Основная кнопка с псевдоэлементами для эффекта\nconst StyledButton = styled.button`\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: 1rem 1.5rem;        /* text-lg */\n    font-size: 1.125rem;         /* 18px */\n    font-weight: 600;\n    color: #6b7280;              /* gray-500 */\n    background: linear-gradient(135deg, #ffffff, #f5f5f5);\n    border: none;\n    border-radius: 999px;\n    cursor: pointer;\n    overflow: hidden;\n\n\n\n    /* Контейнер текста */\n    & > span {\n        position: relative;\n        display: inline-block;\n        z-index: 1;\n        overflow: hidden;\n    }\n\n    /* Псевдоэлемент — градиентный блик текста */\n    & > span::before {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent);\n        background-size: 200% 100%;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        animation: ${textShine} 1.5s ease-out forwards;\n        pointer-events: none;\n    }\n`;\n\ninterface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    onClick: () => void;\n}\n\nexport const ReferralGlowingButton: React.FC<Props> = ({ onClick, className }) => (\n        <StyledButton onClick={onClick} className={className}>\n            <span data-text=\"Реферальная программа\">Реферальная программа</span>\n        </StyledButton>\n);\n"
  },
  {
    "path": "frontend/src/components/BackButtonManager.ts",
    "content": "import useBackButtonVisibility from \"../hooks/backButton\";\n\nfunction BackButtonManager() {\n    useBackButtonVisibility();\n    return null;\n}\n\nexport default BackButtonManager;\n"
  },
  {
    "path": "frontend/src/components/referral-utils.ts",
    "content": "// ReferralGlowingButton.tsx\nimport React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n// Анимация вращения конусного градиента бордера\nconst rotate360 = keyframes`\n    to { transform: rotate(360deg); }\n`;\n\n// Анимация блика по тексту\nconst textShine = keyframes`\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n`;\n\n// Стили кнопки с градиентным бордером\nconst StyledButton = styled.button`\n    display: block;\n    margin: 1rem auto;\n    position: relative;\n    padding: 1rem 1.5rem;\n    font-size: 1.125rem;\n    font-weight: 600;\n    color: #6b7280;\n    background: linear-gradient(135deg, #ffffff, #f5f5f5) padding-box;\n    border-radius: 999px;\n    border: 2px solid transparent;\n    cursor: pointer;\n    overflow: hidden;\n\n    /* Градиентный бордер через псевдоэлемент */\n    &::before {\n        content: '';\n        position: absolute;\n        top: -2px;\n        left: -2px;\n        right: -2px;\n        bottom: -2px;\n        border-radius: inherit;\n        border: 2px solid transparent;\n        border-image: conic-gradient(\n                rgba(255,255,255,0.6) 0deg,\n                rgba(255,255,255,0)   90deg,\n                rgba(255,255,255,0)   270deg,\n                rgba(255,255,255,0.6) 360deg\n        ) 1;\n        animation: ${rotate360} 6s linear infinite;\n        pointer-events: none;\n        z-index: 0;\n    }\n\n    /* Контейнер для текста */\n    & > span {\n        position: relative;\n        display: inline-block;\n        z-index: 1;\n    }\n\n    /* Градиентный блик текста */\n    & > span::after {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent);\n        background-size: 200% 100%;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        animation: ${textShine} 3s ease-out forwards;\n        pointer-events: none;\n    }\n`;\n\n\n"
  },
  {
    "path": "frontend/src/components/FileUploader.tsx",
    "content": "import React, { ChangeEvent } from 'react';\n\ninterface FileUploaderProps {\n    label: string;\n    file: File | null;\n    preview: string | null;\n    onFileChange: (file: File | null) => void;\n}\n\nconst FileUploader: React.FC<FileUploaderProps> = ({\n                                                       label,\n                                                       preview,\n                                                       onFileChange\n                                                   }) => (\n    <div className=\"flex flex-col gap-2 items-start px-4\">\n        <p className=\"uppercase text-xs text-gray-500\">{label}</p>\n        <label className=\"bg-brandlight text-brand py-2 px-4 rounded cursor-pointer hover:shadow-lg transition-shadow duration-200 text-sm inline-flex flex-col items-center gap-2\">\n            {preview ? (\n                <>\n                    <img\n                        src={preview}\n                        alt=\"preview\"\n                        className=\"w-32 h-32 object-cover mb-1\"\n                    />\n                    <div className=\"flex items-center text-green-600 text-sm\">\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"w-4 h-4 mr-1\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                        >\n                            <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-10.707a1 1 0 10-1.414-1.414L9 9.586 7.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                                clipRule=\"evenodd\"\n                            />\n                        </svg>\n                        Файл загружен\n                    </div>\n                </>\n            ) : (\n                <div className=\"flex items-center gap-2\">\n                    <img\n                        src=\"/icons/paperclip.png\"\n                        alt=\"paperclip\"\n                        className=\"h-4 w-4\"\n                    />\n                    <span>Выбрать файл</span>\n                </div>\n            )}\n            <input\n                type=\"file\"\n                accept=\"image/*\"\n                className=\"hidden\"\n                onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    onFileChange(e.target.files?.[0] || null)\n                }\n            />\n        </label>\n    </div>\n);\n\nexport default FileUploader;\n"
  },
  {
    "path": "frontend/src/components/GetUploadLink.ts",
    "content": "function GetUploadLink(image_path: string): string {\n    return process.env.REACT_APP_API_BASE + \"/upload/\" + image_path;\n}\n\nexport default GetUploadLink;"
  },
  {
    "path": "frontend/src/hooks/useDebounce.ts",
    "content": "import { useState, useEffect } from 'react'\n\n/**\n * Возвращает debounced-версию value:\n * обновляется не чаще чем раз в ms миллисекунд\n */\nexport function useDebounce<T>(value: T, ms: number): T {\n    const [debounced, setDebounced] = useState<T>(value)\n    useEffect(() => {\n        const handle = setTimeout(() => setDebounced(value), ms)\n        return () => clearTimeout(handle)\n    }, [value, ms])\n    return debounced\n}\n"
  },
  {
    "path": "frontend/src/hooks/backButton.ts",
    "content": "import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { postEvent } from '@telegram-apps/sdk';\n\nfunction useBackButtonVisibility() {\n     const location = useLocation();\n\n     useEffect(() => {\n         // Set is_visible to false for the home page ('/') and true otherwise.\n         const isVisible = location.pathname !== \"/\";\n         postEvent('web_app_setup_back_button', { is_visible: isVisible });\n     }, [location.pathname]);\n}\n\nexport default useBackButtonVisibility;\n"
  },
  {
    "path": "frontend/src/pages/CatalogPage.tsx",
    "content": "import React, {useEffect, useRef, useState} from 'react';\nimport {Link, useLocation, useNavigate, useSearchParams} from 'react-router-dom';\nimport {getProducts, getUser} from '../services/api';\nimport {on} from '@telegram-apps/sdk';\nimport GetUploadLink from \"../components/GetUploadLink\";\nimport {useDebounce} from \"../hooks/useDebounce\";\nimport {Combobox} from '@headlessui/react';\n\ninterface Product {\n    id: string;\n    name: string;\n    description?: string;\n    price: number;\n    article: string;\n    category: string;\n    seller_id: string;\n    image_path?: string;\n}\n\ninterface Seller {\n    id: string;\n    nickname: string;\n}\n\nfunction CatalogPage() {\n    const [products, setProducts] = useState<Product[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    const [searchQuery, setSearchQuery] = useState('');\n    const [filterPrice, setFilterPrice] = useState<number | ''>('');\n    const [filterCategory, setFilterCategory] = useState('');\n    const [filterSeller, setFilterSeller] = useState('');\n    const [showFilters, setShowFilters] = useState(false);\n\n    const [searchIsActive, setSearchIsActive] = useState(false);\n\n    const [sellerOptions, setSellerOptions] = useState<Seller[]>([]);\n\n    const [sellerQuery, setSellerQuery] = useState('');\n\n    // отфильтрованный список продавцов под комбо\n    const filteredSellers = sellerQuery === ''\n        ? sellerOptions\n        : sellerOptions.filter(s =>\n            s.nickname.toLowerCase().includes(sellerQuery.toLowerCase())\n        );\n\n    const navigate = useNavigate();\n\n    const [searchParams] = useSearchParams();\n    const location = useLocation();\n    const isOnCatalog = location.pathname === ('/catalog');\n    const searchRef = useRef<HTMLInputElement>(null);\n\n\n    const hasActiveFilters =\n        searchQuery.trim() !== '' ||\n        filterPrice !== '' ||\n        filterCategory !== '' ||\n        filterSeller !== '';\n\n    useEffect(() => {\n        const sellerParam = searchParams.get('seller');\n        if (sellerParam) {\n            setFilterSeller(sellerParam);\n        }\n    }, [searchParams]);\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => navigate('/'));\n        return () => removeBackListener();\n    }, [navigate]);\n\n    const debouncedSearch = useDebounce(searchQuery, 600);\n\n    useEffect(() => {\n        setLoading(true);\n        getProducts({search: debouncedSearch /* можно добавить: , limit, offset */})\n            .then(res => setProducts(res.data))\n            .catch(() => setError('Не удалось загрузить каталог товаров.'))\n            .finally(() => setLoading(false));\n    }, [debouncedSearch /*, limit, offset если нужно */]);\n\n\n    useEffect(() => {\n        if (!products.length) return;\n        const uniqueIds = Array.from(new Set(products.map(p => p.seller_id)));\n        (async () => {\n            try {\n                const sellers = await Promise.all(\n                    uniqueIds.map(async id => {\n                        const res = await getUser(id);\n                        return {id, nickname: res.data.nickname!};\n                    })\n                );\n                setSellerOptions(sellers);\n            } catch (err) {\n                console.error('Ошибка при загрузке продавцов:', err);\n            }\n        })();\n    }, [products]);\n\n\n    useEffect(() => {\n        if (searchIsActive) {\n            searchRef.current?.focus()\n        }\n    })\n\n\n    const filtered = products\n        .filter(p => (filterPrice === '' || p.price <= filterPrice))\n        .filter(p => (filterCategory === '' || p.category === filterCategory))\n        .filter(p => (filterSeller === '' || p.seller_id === filterSeller));\n\n    const categories = Array.from(new Set(products.map(p => p.category)));\n\n\n    return (\n        <div className=\"min-h-screen bg-gray-200\">\n            <div className=\"flex w-max mx-auto mt-2 bg-gray-200 p-1 rounded-full\">\n                <Link\n                    to=\"/catalog\"\n                    className={`\n            px-4 py-2 rounded-full\n            ${isOnCatalog\n                        ? 'bg-white text-black'\n                        : 'text-gray-500 hover:text-black'}\n          `}\n                >\n                    Каталог\n                </Link>\n\n                <Link\n                    to=\"/user/orders\"\n                    className={`\n            px-4 py-2 rounded-full\n            ${!isOnCatalog\n                        ? 'bg-white text-black'\n                        : 'text-gray-500 hover:text-black'}\n          `}\n                >\n                    Мои покупки\n                </Link>\n            </div>\n            <div className=\"p-4 mx-auto max-w-screen-sm relative\">\n                {/* Search  filter toggle */}\n                <div className=\"sticky top-0 z-10 mb-4 flex items-center gap-2\">\n                    <input\n                        ref={searchRef}\n                        type=\"text\"\n                        placeholder=\"Поиск по названию или артикулу\"\n                        value={searchQuery}\n                        onChange={e => setSearchQuery(e.target.value)}\n\n                        className=\"flex-1 border border-darkGray rounded-md p-2\"\n                    />\n                    <button\n                        onClick={() => setShowFilters(prev => !prev)}\n                        className=\"relative\"\n                    >\n                        <img\n                            src=\"/icons/filter.png\"\n                            alt=\"Фильтр\"\n                            className=\"w-6 h-6\"\n                        />\n\n                        {hasActiveFilters && (\n                            <span\n                                className={`\n                                    absolute\n                                    top-0 right-0\n                                    inline-flex items-center justify-center\n                                    w-3 h-3\n                                    bg-red-600\n                                    border-2 border-white\n                                    rounded-full\n                                  `}\n                            />\n                        )}\n                    </button>\n                </div>\n                {/* Показываем загрузку и ошибку под шапкой, но инпут не размонтируем */}\n                {loading && (\n                    <div className=\"p-4 text-center text-gray-600\">Загрузка каталога…</div>\n                )}\n                {error && (\n                    <div className=\"p-4 text-center text-red-600\">{error}</div>\n                )}\n\n                {/* Inline filters panel */}\n                {showFilters && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4 space-y-4\">\n                        <div>\n                            <label className=\"block text-sm font-medium mb-1\">Максимальная цена</label>\n                            <input\n                                type=\"number\"\n                                min={0}\n                                value={filterPrice}\n                                onChange={e => setFilterPrice(e.target.value === '' ? '' : Number(e.target.value))}\n                                className=\"w-full border border-darkGray rounded p-2 focus:outline-none focus:ring\"\n                            />\n                        </div>\n                        <div>\n                            <label className=\"block text-sm font-medium mb-1\">Категория</label>\n                            <select\n                                value={filterCategory}\n                                onChange={e => setFilterCategory(e.target.value)}\n                                className=\"w-full border border-darkGray rounded p-2 focus:outline-none focus:ring\"\n                            >\n                                <option value=\"\">Все категории</option>\n                                {categories.map(cat => <option key={cat} value={cat}>{cat}</option>)}\n                            </select>\n                        </div>\n                        <div>\n                            <label className=\"block text-sm font-medium mb-1\">Продавец</label>\n                            <Combobox value={filterSeller} onChange={setFilterSeller} as=\"div\" className=\"relative\">\n                                <Combobox.Input\n                                    className=\"w-full border border-darkGray rounded p-2 focus:outline-none focus:ring\"\n                                    placeholder=\"Поиск продавца\"\n                                    onChange={e => setSellerQuery(e.target.value)}\n                                    displayValue={(id: string) => {\n                                        const sel = sellerOptions.find(s => s.id === id);\n                                        return sel ? sel.nickname : '';\n                                    }}\n                                />\n                                <Combobox.Button className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                                    <span className=\"text-gray-400 select-none\">▾</span>\n                                </Combobox.Button>\n\n                                {/** render-props: получаем флаг open */}\n                                <Combobox.Options className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 overflow-auto rounded\">\n                                    <Combobox.Option\n                                        key=\"all\"\n                                        value=\"\"\n                                        className={({ active }) =>\n                                            `cursor-pointer select-none p-2 ${active ? 'bg-brandlight text-white' : 'text-gray-700'}`\n                                        }\n                                    >\n                                        Все продавцы\n                                    </Combobox.Option>\n\n                                    {filteredSellers.length === 0 ? (\n                                        <div className=\"p-2 text-sm text-gray-500\">Ничего не найдено</div>\n                                    ) : (\n                                        filteredSellers.map(sel => (\n                                            <Combobox.Option\n                                                key={sel.id}\n                                                value={sel.id}\n                                                className={({ active }) =>\n                                                    `cursor-pointer select-none p-2 ${active ? 'bg-brandlight text-white' : 'text-gray-700'}`\n                                                }\n                                            >\n                                                {sel.nickname}\n                                            </Combobox.Option>\n                                        ))\n                                    )}\n                                </Combobox.Options>\n                            </Combobox>\n\n                        </div>\n\n\n                        <div className=\"flex justify-end space-x-2\">\n                            <button\n                                onClick={() => {\n                                    setFilterPrice('');\n                                    setFilterCategory('');\n                                    setFilterSeller('');\n                                    setShowFilters(false);\n                                }}\n                                className=\"px-4 py-2 border rounded-md text-gray-700 hover:bg-gray-200-100\"\n                            >\n                                Сбросить\n                            </button>\n                            <button\n                                onClick={() => setShowFilters(false)}\n                                className=\"px-4 py-2 bg-brand text-white rounded-md hover:bg-brand-dark\"\n                            >\n                                Применить\n                            </button>\n                        </div>\n                    </div>\n                )}\n\n                {/* Products grid */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                    {filtered.map(product => (\n                        <div\n                            key={product.id}\n                            onClick={() => navigate(`/product/${product.id}`)}\n                            className=\"border border-gray-200 rounded-md shadow-sm overflow-hidden hover:shadow-md transition-shadow duration-300 cursor-pointer\"\n                        >\n                            <div className=\"w-full aspect-[3/4] bg-gray-200-100 overflow-hidden\">\n                                {product.image_path\n                                    ? <img\n                                        src={product.image_path.startsWith('http') ? product.image_path : GetUploadLink(product.image_path)}\n                                        alt={product.name} className=\"w-full h-full object-cover\"/>\n                                    : <div className=\"flex items-center justify-center h-full text-gray-400\">Нет\n                                        фото</div>\n                                }\n                            </div>\n                            <div className=\"p-3 bg-white flex flex-col\">\n                                <h3\n                                    className=\"\n                                        text-sm font-semibold mb-1\n                                        h-10\n                                        overflow-hidden\n                                        line-clamp-2\"\n                                >\n                                    {product.name}\n                                </h3>\n                                <p className=\"text-md font-bold mb-1 text-brand\">{product.price} ₽</p>\n                                <p className=\"text-xs text-gray-500 mt-auto\">Арт. {product.article}</p>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CatalogPage;\n"
  },
  {
    "path": "frontend/src/pages/InviteFriendsPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {redirect, useNavigate} from 'react-router-dom';\nimport {on, shareURL} from '@telegram-apps/sdk';\nimport {getInviteLink} from '../services/api';\n\nconst InviteFriendsPage: React.FC = () => {\n    const navigate = useNavigate();\n    const [inviteLink, setInviteLink] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string>('');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => navigate('/'));\n        return () => removeBackListener();\n    }, [navigate]);\n\n    useEffect(() => {\n        async function fetchInviteLink() {\n            try {\n                const response = await getInviteLink();\n                setInviteLink(response.data);\n            } catch (err) {\n                console.error('Ошибка при получении ссылки для приглашения:', err);\n                setError('Не удалось получить реферальную ссылку. Попробуйте позже.');\n            } finally {\n                setLoading(false);\n            }\n        }\n        fetchInviteLink();\n    }, []);\n\n    const displayLink = inviteLink\n        ? inviteLink.length > 50\n            ? `${inviteLink.slice(0, 25)}...${inviteLink.slice(-25)}`\n            : inviteLink\n        : '';\n\n    const copyInviteLink = () => {\n        navigator.clipboard.writeText(inviteLink);\n        alert('Ссылка скопирована');\n    };\n\n    const handleShareInvite = () => {\n        if (shareURL.isAvailable()) {\n            shareURL(inviteLink, 'Заходи по моей ссылке!');\n            redirect(inviteLink);\n        } else {\n            copyInviteLink();\n        }\n    };\n\n    if (loading) {\n        return <div className=\"p-4 text-center\">Загрузка…</div>;\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 flex items-center justify-center p-6\">\n            <div className=\"w-full max-w-md bg-white rounded-lg shadow-lg p-6\">\n                <h1 className=\"text-2xl font-bold text-center text-brand mb-6\">\n                    Приглашай продавцов и зарабатывай с нами!\n                </h1>\n\n                <p className=\"leading-relaxed mb-4 text-gray-800\">\n                    Получи за каждое приглашение по твоей реферальной ссылке <strong>20%</strong>.\n\n                </p>\n                <p className=\"leading-relaxed mb-4 text-gray-800\">\n                    Также <strong>20%</strong> скидки получит продавец.\n                </p>\n\n                <p className=\"leading-relaxed mb-4 text-gray-800\">\n                    Минимальная сумма для вывода средств 1000р.\n                </p>\n\n                <div className=\"bg-brandlight border-l-4 border-brand p-4 mb-6 rounded\">\n                    <p className=\"text-center text-gray-900\">\n                        Деньги начисляются после того, как продавец совершит покупку.\n                    </p>\n                </div>\n\n                {/* Invite link display */}\n                <div className=\"flex items-center bg-gray-200-100 border border-darkGray rounded p-2 mb-6 break-all\">\n                    <span className=\"flex-1 text-sm text-gray-700\">{displayLink}</span>\n                    <button onClick={copyInviteLink} className=\"ml-2\">\n                        <img src=\"/icons/copy.png\" alt=\"Копировать\" className=\"w-4 h-4\" />\n                    </button>\n                </div>\n\n                {/* Error message */}\n                {error && (\n                    <div className=\"p-4 mb-4 bg-red-100 text-red-800 rounded text-center\">\n                        {error}\n                    </div>\n                )}\n\n                {/* Share button */}\n                <button\n                    onClick={handleShareInvite}\n                    className=\"w-full flex items-center justify-center bg-brand text-white py-3 rounded-lg hover:bg-brand-dark transition\"\n                >\n                    <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-5 h-5 mr-2\" />\n                    Поделиться в Telegram\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default InviteFriendsPage;\n"
  },
  {
    "path": "frontend/src/pages/CreateProductInfo.tsx",
    "content": "import React, {FormEvent, useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getMe, getProductById, updateProductStatus} from '../services/api';\nimport {Category, PayoutTime, ProductStatus} from '../enums';\nimport {on} from \"@telegram-apps/sdk\";\nimport GetUploadLink from \"../components/GetUploadLink\";\n\n\ninterface ModeratorReview {\n    id: string;\n    moderator_id: string;\n    product_id: string;\n    comment_to_seller?: string;\n    comment_to_moderator?: string;\n    status_before: ProductStatus;\n    status_after: ProductStatus;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface Product {\n    id: string;\n    name: string;\n    article: string;\n    status: ProductStatus;\n    brand: string;\n    category: Category;\n    key_word: string;\n    general_repurchases: number;\n    daily_repurchases: number;\n    price: number;\n    wb_price: number;\n    tg: string;\n    payment_time: PayoutTime;\n    review_requirements: string;\n    image_path?: string;\n    last_moderator_review?: ModeratorReview;\n}\n\ninterface MeResponse {\n    id: string;\n    telegram_id?: number;\n    nickname?: string;\n    role: \"user\" | \"client\" | \"seller\" | \"moderator\" | \"admin\";\n    is_banned: boolean;\n    balance?: number;\n    created_at: string;\n    updated_at: string;\n}\n\nfunction CreateProductInfo() {\n    const navigate = useNavigate();\n    const {productId} = useParams<{ productId: string }>();\n    const [product, setProduct] = useState<Product | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [currentUser, setCurrentUser] = useState<MeResponse | null>(null);\n\n    useEffect(() => {\n        if (!productId) return;\n        getProductById(productId)\n            .then((res) => setProduct(res.data))\n            .catch((err) => {\n                console.error('Ошибка при загрузке товара:', err);\n                setError('Не удалось загрузить товар');\n            })\n            .finally(() => setLoading(false));\n    }, [productId]);\n\n    useEffect(() => {\n        getMe()\n            .then((user) => setCurrentUser(user))\n            .catch((err) => {\n                console.error('Ошибка получения данных пользователя:', err);\n            });\n    }, []);\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/my-products');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const handleMyBalanceClick = () => {\n        navigate(`/seller-cabinet/balance`);\n    };\n\n    const handleEditClick = () => {\n        if (product) {\n            navigate(`/create-product/${product.id}`);\n        }\n    };\n\n    const handlePublish = async (e: FormEvent) => {\n        e.preventDefault();\n        try {\n            const fd = new FormData();\n            fd.append('status', ProductStatus.ACTIVE);\n            await updateProductStatus(productId!, fd);\n            if (product) {\n                setProduct({...product, status: ProductStatus.ACTIVE});\n            }\n            alert('Товар опубликован');\n        } catch (err) {\n            console.error('Ошибка при сохранении товара:', err);\n            alert('Не удалось сохранить товар');\n        }\n    };\n\n    const handleStop = async (e: FormEvent) => {\n        e.preventDefault();\n        try {\n            const fd = new FormData();\n            fd.append('status', ProductStatus.ARCHIVED);\n            await updateProductStatus(productId!, fd);\n            if (product) {\n                setProduct({...product, status: ProductStatus.ARCHIVED});\n            }\n            alert('Товар заархивирован');\n        } catch (err) {\n            console.error('Ошибка при сохранении товара:', err);\n            alert('Не удалось сохранить товар');\n        }\n    };\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n\n    if (error || !product) {\n        return <div className=\"p-4 text-red-600\">{error || 'Товар не найден'}</div>;\n    }\n\n    const getReviewComment = (review: ModeratorReview): string | null => {\n        return review.comment_to_seller || null;\n        // if (currentUser?.role === 'seller') {\n        //     return review.comment_to_seller || null;\n        // } else if (currentUser?.role === 'moderator' || currentUser?.role === 'admin') {\n        //     return review.comment_to_moderator || null;\n        // }\n        // return review.comment_to_seller || review.comment_to_moderator || null;\n    };\n\n    const lastReview = product.last_moderator_review;\n    const reviewComment = lastReview ? getReviewComment(lastReview) : null;\n\n    return (\n        <div className=\"p-4 min-h-screen bg-gray-200 mx-auto max-w-lg\">\n            {(product.status === ProductStatus.CREATED || product.status === ProductStatus.DISABLED) && (\n                <div className=\"mb-4 p-3 bg-brandlight border-l-4 border-brand text-brand rounded\">\n                    Новая карточка отправлена на модерацию. Проверьте всю информацию. Вы еще можете внести изменения.\n                </div>\n            )}\n\n            <div className=\"flex justify-between items-center mb-6\">\n                <h1 className=\"text-2xl font-medium\">Карточка товара</h1>\n                <button onClick={handleEditClick} className=\"border border-brand text-brand px-2 py-1 text-sm rounded\">\n                    Редактировать\n                </button>\n            </div>\n\n            <div className=\"flex flex-col gap-4 mb-4\">\n                <div className=\"w-full max-h-80 bg-gray-200-100 rounded-md overflow-hidden\">\n                    {product.image_path ? (\n                        <img\n                            src={\n                                product.image_path.startsWith('http')\n                                    ? product.image_path\n                                    : GetUploadLink(product.image_path)\n                            }\n                            alt={product.name}\n                            className=\"w-full h-full object-contain\"\n                        />\n                    ) : (\n                        <div className=\"flex items-center justify-center h-48 text-gray-400\">\n                            Нет фото\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"bg-white border border-gray-200 rounded-md p-4\">\n                    <p className=\"text-lg font-bold mb-1\">{product.article}</p>\n                    <h3 className=\"text-xl font-semibold mb-3\">{product.name}</h3>\n\n                    <div className=\"space-y-2\">\n                        <div>\n                            <span className=\"text-sm text-gray-600\">Цена на сайте:</span>{' '}\n                            <span className=\"text-sm font-semibold\">{product.wb_price} руб</span>\n                        </div>\n                        <div>\n                            <span className=\"text-sm text-gray-600\">Цена для покупателя:</span>{' '}\n                            <span className=\"text-sm font-semibold\">{product.price} руб</span>\n                        </div>\n                        <div>\n                            <span className=\"text-sm text-gray-600\">Кол-во выкупов:</span>{' '}\n                            <span className=\"text-sm font-semibold\">{product.general_repurchases} шт</span>\n                        </div>\n                        <div>\n                            <span className=\"text-sm text-gray-600\">План выкупов на сутки:</span>{' '}\n                            <span className=\"text-sm font-semibold\">{product.daily_repurchases} шт</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <div className=\"mb-4\">\n                {lastReview && reviewComment && (\n                    <div key={lastReview.id} className=\"mb-3 p-4 bg-gray-200-50 border border-gray-200 rounded\">\n                        <h3 className=\"text-lg font-semibold\">\n                            Комментарий модератора:\n                        </h3>\n                        <p className=\"text-sm text-gray-800\">\n                            {reviewComment}\n                        </p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                            Дата: {new Date(lastReview.created_at).toLocaleDateString()}\n                        </p>\n                    </div>\n                )}\n            </div>\n\n            <div className=\"flex flex-col gap-2\">\n                {product.status === ProductStatus.NOT_PAID && (\n                <button\n                    onClick={handleMyBalanceClick}\n                    className=\"flex-1 bg-brand text-white p-2 rounded\"\n                >\n                    Пополнить кабинет\n                </button>\n                )}\n                {product.status === ProductStatus.ARCHIVED ? (\n                    <button\n                        onClick={handlePublish}\n                        className=\"flex-1 border border-brand text-brand p-2 rounded\"\n                    >\n                        Опубликовать\n                    </button>\n                ) : (\n                    <button\n                        onClick={handleStop}\n                        className=\"flex-1 border border-brand text-brand p-2 rounded\"\n                    >\n                        Снять с публикации\n                    </button>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default CreateProductInfo;\n"
  },
  {
    "path": "frontend/src/pages/AboutPage.tsx",
    "content": "import React, {useEffect} from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {on} from \"@telegram-apps/sdk\";\n\nfunction AboutPage() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(`/`);\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const handleQuestion = () => navigate('/question');\n    const handleInstruction = () => navigate('/instruction', {state: {backRoute: '/about'}});\n    const handleRequirements = () => navigate('/requirements');\n    const handleHomeClick = () => navigate('/');\n\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 flex items-center justify-center p-4\">\n            <div className=\"max-w-screen-md w-full bg-white border border-brand rounded-lg shadow-lg p-6\">\n                <div className=\"gap-6\">\n                    <h1 className=\"text-2xl font-bold mb-6 text-left\">О сервисе:</h1>\n\n                    {/*<div className=\"bg-white rounded-lg p-4\">*/}\n                        <section className=\"mb-6 text-left\">\n                            <p className=\"text-base text-gray-800 mb-4\">\n                                ВБ КЭШБЭК - бот поможет селлерам эффективнее проводить раздачи, а покупателям\n                                безопасно выкупать. Инструкция для покупателей, Обзор на кабинет продавца, Канал по\n                                раздачам.\n                            </p>\n                        </section>\n\n                        <div className=\"space-y-2\">\n                            <div>\n                                <a\n                                    href=\"https://t.me/Premiumcash1/9\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    className=\"text-blue-600 hover:underline\"\n                                >\n                                    Инструкция для покупателей\n                                </a>\n                            </div>\n                            <div>\n                                <a\n                                    href=\"https://t.me/Premiumcash1/8\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    className=\"text-blue-600 hover:underline\"\n                                >\n                                    Обзор на кабинет продавца\n                                </a>\n                            </div>\n                            <div>\n                                <a\n                                    href=\"https://t.me/Premiumcashb/13\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    className=\"text-blue-600 hover:underline\"\n                                >\n                                    Канал по раздачам\n                                </a>\n                            </div>\n                        </div>\n\n\n                        <section className=\"mb-6 mt-6 text-left\">\n                            <h2 className=\"text-xl font-bold mb-3\">Для селлеров</h2>\n                            <ul className=\"list-disc list-inside text-base text-gray-800 space-y-2\">\n                                <li>Сократит количество чатов</li>\n                                <li>Удобные отчеты</li>\n                                <li>Управление раздачами через кабинет</li>\n                                <li>Моментальные уведомления о выкупах и выплатах</li>\n                                <li>Неограниченное количество товаров</li>\n                                <li>Можно раздавать одновременно товары разных продавцов</li>\n                            </ul>\n                        </section>\n\n                        <section className=\"mb-6 text-left\">\n                            <h2 className=\"text-xl font-bold mb-3\">Для покупателей</h2>\n                            <ul className=\"list-disc list-inside text-base text-gray-800 space-y-2\">\n                                <li>Безопасные сделки</li>\n                                <li>Простая инструкция</li>\n                                <li>Проверенные продавцы</li>\n                            </ul>\n                            <hr className=\"my-6 border-darkGray\"/>\n                        </section>\n\n                        <section className=\"mb-6 text-left\">\n                            <div className=\"flex flex-col gap-2\">\n                                <button\n                                    onClick={handleQuestion}\n                                    className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                                >\n                                    Ответы на частые вопросы\n                                </button>\n                                <button\n                                    onClick={handleInstruction}\n                                    className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                                >\n                                    Инструкция\n                                </button>\n                                <button\n                                    onClick={handleRequirements}\n                                    className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                                >\n                                    Требования к отчету\n                                </button>\n                                <button\n                                    onClick={handleHomeClick}\n                                    className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                                >\n                                    На главную\n                                </button>\n                            </div>\n                        </section>\n                    {/*</div>*/}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AboutPage;\n"
  },
  {
    "path": "frontend/src/pages/SellerReportsPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useLocation, useNavigate} from 'react-router-dom';\nimport {getMe, getOrderBySellerId, updateOrderStatus} from '../services/api';\nimport {AxiosResponse} from 'axios';\nimport {on} from \"@telegram-apps/sdk\";\nimport {OrderStatus} from '../enums';\n\ninterface Product {\n    id: string;\n    name: string;\n    brand: string;\n    article: string;\n    category: string;\n    key_word: string;\n    general_repurchases: number;\n    daily_repurchases: number;\n    price: number;\n    wb_price: number;\n    tg: string;\n    payment_time: string;\n    review_requirements: string;\n    image_path?: string;\n    seller_id: string;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface User {\n    id: string;\n    telegram_id?: number;\n    nickname?: string;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface Order {\n    id: string;\n    user_id: string;\n    product_id: string;\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    status: OrderStatus;\n    product: Product;\n    user: User;\n}\n\nfunction SellerReportsPage() {\n    const navigate = useNavigate();\n    const [orders, setOrders] = useState<Order[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [sellerId, setSellerId] = useState<string>('');\n    const { search } = useLocation();\n    const params = new URLSearchParams(search);\n    const initialTab = params.get('tab') === 'paid'\n        ? OrderStatus.CASHBACK_PAID\n        : OrderStatus.CASHBACK_NOT_PAID;\n    const [activeTab, setActiveTab] = useState<OrderStatus>(initialTab);\n\n    const fetchReports = async () => {\n        if (!sellerId) return;\n        try {\n            const response: AxiosResponse<Order[]> = await getOrderBySellerId(sellerId);\n            console.log(\"sheesh\");\n            console.log(response.data[0]);\n            setOrders(response.data);\n        } catch (err) {\n            console.error(\"Ошибка при загрузке отчетов:\", err);\n            setError(\"Не удалось загрузить отчеты по выкупам\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/seller-cabinet');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n\n    useEffect(() => {\n        async function fetchSellerId() {\n            try {\n                const me = await getMe();\n                setSellerId(me.id);\n            } catch (err) {\n                console.error(\"Ошибка при получении sellerId:\", err);\n            }\n        }\n\n        fetchSellerId();\n    }, []);\n\n    useEffect(() => {\n        if (sellerId) {\n            fetchReports();\n        }\n    }, [sellerId]);\n\n    const filteredOrders = orders.filter(order => order.status === activeTab);\n\n    const handleCashbackPaid = async (orderId: string) => {\n        try {\n            const formData = new FormData();\n            formData.append(\"status\", OrderStatus.CASHBACK_PAID);\n            await updateOrderStatus(orderId, formData);\n            alert(\"Статус обновлен!\");\n            fetchReports();\n        } catch (err) {\n            console.error(\"Ошибка обновления статуса:\", err);\n            alert(\"Ошибка обновления статуса\");\n        }\n    };\n\n    if (loading) {\n        return <div className=\"p-4 text-center\">Загрузка отчетов...</div>;\n    }\n    if (error) {\n        return (\n            <div className=\"p-4 bg-brandlight border border-brand rounded text-center\">\n                <p className=\"text-sm text-brand\">{error}</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-200\">\n            <div className=\"p-4 max-w-screen-md mx-auto\">\n                <div className=\"sticky top-0 z-10 bg-gray-200\">\n\n                    <h1 className=\"text-2xl font-bold mb-4 text-center\">Отчеты по выкупам</h1>\n\n                    <div className=\"flex mb-4 border-b\">\n                        <button\n                            onClick={() => setActiveTab(OrderStatus.CASHBACK_NOT_PAID)}\n                            className={`px-4 py-2 font-semibold ${activeTab === OrderStatus.CASHBACK_NOT_PAID ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-600'}`}\n                        >\n                            Кешбек не выплачен\n                        </button>\n                        <button\n                            onClick={() => setActiveTab(OrderStatus.CASHBACK_PAID)}\n                            className={`px-4 py-2 font-semibold ${activeTab === OrderStatus.CASHBACK_PAID ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-600'}`}\n                        >\n                            Кешбек выплачен\n                        </button>\n\n                    </div>\n                </div>\n\n                <div className=\"flex flex-col gap-4\">\n                    {filteredOrders.length ? (\n                        filteredOrders.map((order) => (\n                            <div\n                                key={order.id}\n                                onClick={() => navigate(`/seller-cabinet/reports/${order.id}`)}\n                                className=\"border border-gray-200 rounded-md shadow-sm p-4 hover:shadow-md transition-shadow cursor-pointer bg-white\"\n                            >\n                                <h2 className=\"text-lg font-semibold\">{order.product.name}</h2>\n                                <p className=\"text-sm text-gray-600\">\n                                    Покупатель: {order.user.nickname || \"Не указан\"}\n                                </p>\n                                <p className=\"text-sm text-gray-600\">Статус: {order.status}</p>\n                                {activeTab === OrderStatus.CASHBACK_NOT_PAID && (\n                                    <button\n                                        onClick={(e) => {\n                                            e.stopPropagation(); // предотвращает переход по клику на карточку\n                                            handleCashbackPaid(order.id);\n                                        }}\n                                        className=\"mt-2 w-full py-2 rounded bg-green-500 text-white font-semibold text-base hover:opacity-90 transition\"\n                                    >\n                                        Отметить как выплаченный\n                                    </button>\n                                )}\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"text-center text-gray-600\">Заказов не найдено</p>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SellerReportsPage;\n"
  },
  {
    "path": "frontend/src/pages/SellerCabinet.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {on} from \"@telegram-apps/sdk\";\nimport {getMe, getSellerBalance} from \"../services/api\";\n\nfunction SellerCabinet() {\n    const navigate = useNavigate();\n    const [balance, setBalance] = useState(0);\n\n    const handleMyProductsClick = () => navigate('/my-products');\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/');\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n\n    const handleReportsClick = () => {\n        navigate(`/seller-cabinet/reports`);\n    };\n    const handleMyBalanceClick = () => {\n        navigate(`/seller-cabinet/balance`);\n    }\n\n    useEffect(() => {\n        const fetchBalance = async () => {\n            try {\n                const sellerId = await getMe()\n                const response = await getSellerBalance(sellerId.toString());\n                console.log(\"response\");\n                console.log(response);\n                console.log(response.data);\n                console.log(response.data.balance);\n                setBalance(response.data);\n            } catch (error) {\n                console.error(\"Ошибка получения баланса продавца:\", error);\n            }\n        };\n        fetchBalance();\n    }, []);\n\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n\n    return (\n        <div className=\"min-h-screen bg-gray-200\">  {/* Обертка на весь экран */}\n\n            <div className=\"p-4 max-w-screen-sm mx-auto relative\">\n                <h1 className=\"text-xl font-bold mb-4 text-center\">Кабинет продавца</h1>\n\n                <p className=\"text-sm text-gray-700 mb-6 text-center\">\n                    ВБКэшбэк — сервис для управления раздачами товара за кэшбэк\n                </p>\n\n                <div className=\"bg-white border border-darkGray rounded-md p-4 mb-4 relative\"\n                >\n                    <button\n                        onClick={handleMyBalanceClick}\n                        className=\"\n    absolute top-2 right-2\n    bg-brand\n    hover:bg-brand-dark\n    text-white\n    rounded-md\n    px-3 py-1.5\n    text-sm font-semibold\n    transition-colors\n  \"\n                    >\n                        Пополнить\n                    </button>\n\n                    <p className=\"text-md font-semibold mb-1\">Баланс</p>\n                    <p className=\"text-2xl font-bold\">{balance} раздач</p>\n                    <p className=\"text-sm text-gray-500\">Доступное количество раздач</p>\n                </div>\n\n                {/*<div className=\"flex justify-end mb-4\">*/}\n                    <button\n                        onClick={() => navigate('/create-product')}\n                        className=\"w-full border bg-white border-brand rounded-md px-4 py-2 text-base font-semibold hover:bg-gray-200-100\"\n                    >\n                        Разместить товар\n                    </button>\n                {/*</div>*/}\n\n                <div\n                    onClick={handleMyProductsClick}\n                    className=\"bg-white border border-darkGray rounded-md p-4 mb-4 mt-4 cursor-pointer\"\n                >\n                    <p className=\"text-md font-semibold mb-1\">Мои товары</p>\n                    <p className=\"text-sm text-gray-500\">Товары по раздачам</p>\n                </div>\n\n                <div\n                    onClick={handleReportsClick}\n                    className=\"bg-white border border-darkGray rounded-md p-4 mb-4 cursor-pointer\"\n                >\n                    <p className=\"text-md font-semibold mb-1\">Отчеты по выкупам</p>\n                    <p className=\"text-sm text-gray-500\">\n                        Просмотр отчетов по покупкам ваших товаров\n                    </p>\n                </div>\n\n\n                <div\n                    onClick={handleSupportClick}\n                    className=\"bg-white border border-brand rounded-xl shadow-sm p-4 mb-4 font-semibold cursor-pointer flex items-center gap-3\"\n                >\n                    <img src=\"/icons/support.png\" alt=\"Support\" className=\"w-7 h-7\"/>\n                    <div className=\"flex flex-col\">\n                        <span>Техподдержка</span>\n                        <span className=\"text-xs text-gray-500\">\n                            Оперативно ответим на все вопросы\n                        </span>\n                    </div>\n                    <img\n                        src=\"/icons/small_arrow.png\"\n                        alt=\"arrow\"\n                        className=\"w-5 h-5 ml-auto\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default SellerCabinet;\n"
  },
  {
    "path": "frontend/src/pages/MyOrdersPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {Link, useLocation, useNavigate} from 'react-router-dom';\nimport {getUserOrders, updateOrderStatus} from '../services/api';\nimport {on} from \"@telegram-apps/sdk\";\nimport GetUploadLink from \"../components/GetUploadLink\";\n\nconst STEP_NAMES: { [key: number]: string } = {\n    1: 'Шаг 1: Поиск товара по ключевому слову',\n    2: 'Шаг 2: Артикул товара',\n    3: 'Шаг 3: Добавить в избранное',\n    4: 'Шаг 4: Ввод реквизитов',\n    5: 'Шаг 5: Оформление заказа',\n    6: 'Шаг 6: Получение товара',\n    7: 'Шаг 7: Отзыв и чек',\n    8: 'Шаг 8: Все выполнено',\n};\n\nconst getOrderStepLink = (order: Order): string => {\n    if (order.step >= 1 && order.step <= 7) {\n        return `/order/${order.id}/step-${order.step + 1}`;\n    }\n    return `/order/${order.id}/order-info`;\n};\n\ninterface Product {\n    id: string;\n    name: string;\n    brand: string;\n    article: string;\n    category: string;\n    key_word: string;\n    general_repurchases: number;\n    daily_repurchases: number;\n    price: number;\n    wb_price: number;\n    tg: string;\n    payment_time: string;\n    review_requirements: string;\n    image_path?: string;\n    seller_id: string;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface Order {\n    id: string;\n    user_id: string;\n    product_id: string;\n    card_number: string;\n    screenshot_path: string;\n    status: string;\n    created_at: string;\n    updated_at: string;\n    step: number;\n    product: Product;\n    user: {\n        nickname: string;\n    };\n}\n\nfunction MyOrdersPage() {\n    const [orders, setOrders] = useState<Order[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const navigate = useNavigate();\n    const location = useLocation();\n    const isOnOrders = location.pathname === ('/user/orders');\n\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(`/`);\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    const fetchOrders = async () => {\n        try {\n            const response = await getUserOrders();\n            setOrders(response.data);\n        } catch (err) {\n            console.error('Ошибка при загрузке покупок:', err);\n            setError('Не удалось загрузить список покупок.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchOrders();\n    }, []);\n\n    const filteredOrders = orders.filter(order => order.status !== 'cancelled');\n\n    const handleCancelOrder = async (orderId: string, e: React.MouseEvent) => {\n        e.stopPropagation(); // Предотвращаем переход по карточке\n        e.preventDefault();\n        if (!window.confirm('Вы уверены, что хотите отменить заказ?')) return;\n        try {\n            const formData = new FormData();\n            formData.append(\"status\", \"cancelled\");\n            await updateOrderStatus(orderId, formData);\n            alert(\"Заказ отменён\");\n            fetchOrders();\n        } catch (err) {\n            console.error(\"Ошибка отмены заказа:\", err);\n            alert(\"Ошибка отмены заказа\");\n        }\n    };\n    const handleCashbackPaid = async (orderId: string, e: React.MouseEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        try {\n            const formData = new FormData();\n            formData.append(\"status\", \"payment_confirmed\");\n            await updateOrderStatus(orderId, formData);\n            // Вот эта строка обновит статус в локальном стейте и вызовет перерендер\n            setOrders(prev =>\n                prev.map(o =>\n                    o.id === orderId\n                        ? { ...o, status: \"payment_confirmed\" }\n                        : o\n                )\n            );\n        } catch (err) {\n            console.error(\"Ошибка отметки выплаты кешбека:\", err);\n            alert(\"Возникла ошибка, попробуйте позже\");\n        }\n    };\n\n\n    return (\n        <div className=\"bg-gray-200 bg-fixed min-h-screen\">\n            <div className=\"flex w-max mx-auto mb-2 mt-2 bg-gray-200 p-1 rounded-full\">\n                <Link\n                    to=\"/catalog\"\n                    className={`\n            px-4 py-2 rounded-full\n            ${!isOnOrders\n                        ? 'bg-white text-black'\n                        : 'text-gray-500 hover:text-black'}\n          `}\n                >\n                    Каталог\n                </Link>\n\n                <Link\n                    to=\"/user/orders\"\n                    className={`\n            px-4 py-2 rounded-full\n            ${isOnOrders\n                        ? 'bg-white text-black'\n                        : 'text-gray-500 hover:text-black'}\n          `}\n                >\n                    Мои покупки\n                </Link>\n            </div>\n            <div className=\"sticky top-0 z-10 mt-2 bg-inherit\">\n                <div className=\"flex items-center justify-center relative mb-4\">\n                    <h2 className=\"text-2xl font-bold text-center\">Мои покупки</h2>\n                </div>\n\n                <p className=\"text-sm text-gray-600 mb-4 text-center\">\n                    Нажмите на карточку, чтобы открыть инструкцию\n                </p>\n            </div>\n\n            <div className=\"w-full flex flex-col gap-3 mb-4\">\n                {loading ? (\n                    <div className=\"p-4 text-center text-gray-600\">\n                        Загрузка покупок…\n                    </div>\n                ) : error ? (\n                    <div className=\"p-4 bg-brandlight border border-brand rounded text-center\">\n                        <p className=\"text-sm text-brand\">{error}</p>\n                    </div>\n                ) : filteredOrders.length === 0 ? (\n                    <div className=\"bg-white rounded-md shadow-sm p-3 text-center\">\n                        Покупки не найдены\n                    </div>\n                ) : (\n                    filteredOrders.map(order => {\n                        const stepName = STEP_NAMES[order.step + 1] || `Шаг ${order.step + 1}`;\n                        const linkTo = getOrderStepLink(order);\n                        return (\n                            <Link to={linkTo} key={order.id}>\n                                <div className=\"relative bg-white border border-darkGray rounded-md shadow-sm p-3 flex flex-col gap-2 hover:shadow-md transition-shadow\">\n                                    {/* ваш контент карточки */}\n                                    <button\n                                        onClick={e => handleCancelOrder(order.id, e)}\n                                        className=\"absolute top-2 right-2 px-2 py-1 border border-red-500 text-red-500 text-xs rounded hover:bg-red-50 transition\"\n                                    >\n                                        Отменить\n                                    </button>\n                                    <div className=\"flex items-center gap-3\">\n                                        <div className=\"w-16 h-16 bg-gray-200-100 relative flex-shrink-0\">\n                                            {order.product.image_path ? (\n                                                <img\n                                                    src={\n                                                        order.product.image_path.startsWith('http')\n                                                            ? order.product.image_path\n                                                            : GetUploadLink(order.product.image_path)\n                                                    }\n                                                    alt={order.product.name}\n                                                    className=\"absolute inset-0 object-cover w-full h-full\"\n                                                />\n                                            ) : (\n                                                <div\n                                                    className=\"absolute inset-0 flex items-center justify-center text-gray-400 text-xs\">\n                                                    Нет фото\n                                                </div>\n                                            )}\n                                        </div>\n                                        <div className=\"flex-1\">\n                                        <span className=\"font-semibold text-sm\">\n                                            {order.product.name}\n                                        </span>\n                                            <br/>\n                                            <span className=\"text-md font-bold text-brand\">\n                                            {order.product.price} ₽\n                                        </span>\n                                            <br/>\n                                            <span className=\"text-xs text-gray-500\">\n                                            Текущий шаг: {stepName}\n                                        </span>\n                                        </div>\n                                    </div>\n                                    {order.status === \"payment_confirmed\" ? (\n                                        <span className=\"absolute top-10 right-2 text-xs font-semibold text-green-700\">\n                                        Кешбек выплачен\n                                      </span>\n                                    ) : order.step === 7 ? (\n                                        <button\n                                          onClick={e => handleCashbackPaid(order.id, e)}\n                                          className=\"absolute top-10 right-2\n                                                px-2 py-1\n                                                border border-blue-500\n                                                text-blue-500 text-xs\n                                                rounded\n                                                hover:bg-blue-50\n                                                transition\n                                              \"\n                                        >\n                                          Кешбек выплачен\n                                        </button>\n                                    ) : null}\n\n                                </div>\n                            </Link>\n                        );\n                    })\n                )}\n            </div>\n\n            <div\n                onClick={handleSupportClick}\n                className=\"bg-white border border-brand rounded-xl shadow-sm p-4 mb-4 font-semibold cursor-pointer flex items-center gap-3\"\n            >\n                <img src=\"/icons/support.png\" alt=\"Support\" className=\"w-7 h-7\"/>\n                <div className=\"flex flex-col\">\n                    <span>Техподдержка</span>\n                    <span className=\"text-xs text-gray-500\">\n                            Оперативно ответим на все вопросы\n                        </span>\n                </div>\n                <img\n                    src=\"/icons/small_arrow.png\"\n                    alt=\"arrow\"\n                    className=\"w-5 h-5 ml-auto\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default MyOrdersPage;\n"
  },
  {
    "path": "frontend/src/pages/SellerBalance.tsx",
    "content": "import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {on} from \"@telegram-apps/sdk\";\nimport {getMe, getSellerBalance} from \"../services/api\";\n\nfunction SellerBalancePage() {\n    const handleContactAdmin = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n    const navigate = useNavigate();\n    const [balance, setBalance] = useState(0);\n\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/seller-cabinet');\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchBalance = async () => {\n            try {\n                const sellerId = await getMe()\n                const response = await getSellerBalance(sellerId.toString());\n                console.log(\"response\");\n                console.log(response);\n                console.log(response.data);\n                console.log(response.data.balance);\n                setBalance(response.data);\n            } catch (error) {\n                console.error(\"Ошибка получения баланса продавца:\", error);\n            }\n        };\n        fetchBalance();\n    }, []);\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 flex flex-col gap-4\">\n\n            <div className=\"border-darkGray border border-darkGray rounded-md p-4 mx-4 mt-4\">\n                <p className=\"text-md font-semibold mb-1\">Баланс</p>\n                <p className=\"text-2xl font-bold\">{balance}</p>\n                <p className=\"text-sm text-gray-500\">Доступное количество раздач</p>\n            </div>\n            <p className=\"text-center text-gray-700 mx-4\">\n                Чтобы пополнить кабинет, свяжитесь с админом.\n            </p>\n            <button\n                onClick={handleContactAdmin}\n                className=\"p-2 rounded-lg mx-4 text-white font-semibold bg-brand hover:bg-brand justify-center\"\n            >\n                Написать администратору\n            </button>\n        </div>\n    );\n}\n\nexport default SellerBalancePage;"
  },
  {
    "path": "frontend/src/pages/MyProductsPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {getMe, getProductsBySellerId} from '../services/api';\nimport {on} from \"@telegram-apps/sdk\";\nimport {ProductStatus} from \"../enums\";\nimport {MeResponse} from \"../types/MeResponse\";\n\ninterface ModeratorReview {\n    id: string;\n    moderator_id: string;\n    product_id: string;\n    comment_to_seller?: string;\n    comment_to_moderator?: string;\n    status_before: ProductStatus;\n    status_after: ProductStatus;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface Product {\n    id: string;\n    name: string;\n    price: number;\n    status: ProductStatus;\n    moderator_reviews?: ModeratorReview[];\n    remaining_products: number;\n}\n\n\nfunction MyProductsPage() {\n    const navigate = useNavigate();\n\n    const [products, setProducts] = useState<Product[]>([]);\n    const [seller, setSeller] = useState<MeResponse | undefined>(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [filter, setFilter] = useState<'all' | 'active' | 'created' | 'rejected' | 'archived'>('all');\n\n    const totalCount = products.length;\n    const moderationCount = products.filter(p => p.status === ProductStatus.CREATED || p.status === ProductStatus.DISABLED).length; //todo\n    const publishedCount = products.filter(p => p.status === ProductStatus.ACTIVE).length;\n    const archivedCount = products.filter(p => p.status === ProductStatus.NOT_PAID).length;\n    const totalPlan = products\n        .filter(p =>\n            p.status === ProductStatus.ACTIVE ||\n            p.status === ProductStatus.NOT_PAID\n        )\n        .reduce((sum, p) => sum + p.remaining_products, 0);\n\n    const filteredProducts = products.filter((product) => {\n        if (filter !== 'all') {\n            if (filter === 'created') {\n                if (\n                    product.status.toLowerCase() !== ProductStatus.CREATED.toLowerCase() &&\n                    product.status.toLowerCase() !== ProductStatus.DISABLED.toLowerCase()\n                ) {\n                    return false;\n                }\n            } else if (product.status.toLowerCase() !== filter.toLowerCase()) {\n                return false;\n            }\n        }\n        if (searchQuery) {\n            return product.name.toLowerCase().includes(searchQuery.toLowerCase());\n        }\n        return true;\n    });\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/seller-cabinet');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    useEffect(() => {\n        async function fetchProducts() {\n            try {\n                const response = await getProductsBySellerId();\n                setProducts(response.data);\n                setError('');\n            } catch (err) {\n                console.error('Ошибка при загрузке товаров продавца:', err);\n                setError('Не удалось загрузить товары.');\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        fetchProducts();\n    }, []);\n\n    useEffect(() => {\n        async function fetchSeller() {\n            try {\n                const me = await getMe();\n                setSeller(me);\n            } catch (err) {\n                console.error(\"Ошибка при получении seller:\", err);\n            }\n        }\n\n        fetchSeller();\n    }, []);\n\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    const handleMyBalanceClick = () => {\n        navigate(`/seller-cabinet/balance`);\n    };\n\n    return (\n        <div className=\"p-4 min-h-screen bg-gray-200 mx-auto\">\n            <div className=\"mb-4 p-4 bg-brandlight rounded shadow\">\n                <p className=\"text-sm\">\n                    Всего карточек: <strong>{totalCount}</strong>\n                </p>\n                <p className=\"text-sm\">\n                    На проверке: <strong>{moderationCount}</strong>\n                </p>\n                <p className=\"text-sm\">\n                    Опубликовано: <strong>{publishedCount}</strong>\n                </p>\n                <p className=\"text-sm\">\n                    В архиве: <strong>{archivedCount}</strong>\n                </p>\n                <p className=\"text-sm\">\n                    Заявка оформлена и не оплачена: <strong>{archivedCount}</strong>\n                </p>\n                <p className=\"text-sm\">\n                    Общий план по раздачам: <strong>{totalPlan}</strong>\n                </p>\n                {seller && (() => {\n                    const missing=Math.max(0, totalPlan - seller.balance)\n\n                    return (missing) > 0 ? (\n                        <p className=\"text-sm text-red-800\">\n                            Баланс раздач: <strong>{seller.balance}</strong><br/>\n                            Для публикации товара необходимо пополнить баланс\n                            на <strong>{missing}</strong> раздач\n                        </p>\n                    ) : (\n                        <p className=\"text-sm text-black\">\n                            Баланс раздач: <strong>{seller.balance}</strong>\n                        </p>\n                    );\n                })()}\n\n            </div>\n            <div className=\"sticky top-0 z-10 bg-gray-200\">\n                {/*<div className=\"flex justify-end mb-4\">*/}\n                {/*    <button*/}\n                {/*        onClick={() => navigate('/create-product')}*/}\n                {/*        className=\"border border-brand rounded-md px-4 py-2 text-sm font-semibold hover:bg-gray-200-100\"*/}\n                {/*    >*/}\n                {/*        Разместить товар*/}\n                {/*    </button>*/}\n                {/*</div>*/}\n\n                {/* Блок статистики */}\n\n\n                <div className=\"relative mb-4\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Поиск\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"w-full border border-darkGray rounded-md py-2 pl-10 pr-3 text-sm focus:outline-none\"\n                    />\n                    <svg\n                        className=\"w-5 h-5 text-gray-400 absolute left-3 top-2.5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            d=\"M21 21l-4.35-4.35m0 0A7.35 7.35 0 1010.3 4.65a7.35 7.35 0 006.35 11.65z\"\n                        />\n                    </svg>\n                </div>\n\n                <div className=\"mb-4\">\n                    <select\n                        value={filter}\n                        onChange={(e) =>\n                            setFilter(e.target.value as 'all' | 'active' | 'created' | 'rejected' | 'archived')\n                        }\n                        className=\"w-full border border-darkGray rounded-md py-2 px-3 text-sm focus:outline-none\"\n                    >\n                        <option value=\"all\">Все статусы</option>\n                        <option value=\"active\">Активный</option>\n                        <option value=\"created\">Создано / Отключено</option>\n                        <option value=\"rejected\">Отклонено</option>\n                        <option value=\"archived\">Архив</option>\n                    </select>\n                </div>\n            </div>\n\n            {loading && <p className=\"text-sm text-gray-500\">Загрузка...</p>}\n\n            {!loading && (error || filteredProducts.length === 0) && (\n                <div className=\"p-4 bg-brandlight border border-darkGray rounded text-center\">\n                    <p className=\"text-sm text-gray-700\">Товары не найдены</p>\n                </div>\n            )}\n\n            <button\n                onClick={() => navigate('/create-product')}\n                className=\"w-full border border-brand rounded-md mt-4 px-4 py-2 text-base font-semibold hover:bg-gray-200-100\"\n            >\n                Разместить товар\n            </button>\n\n            {!loading && !error && filteredProducts.length > 0 && (\n                <div className=\"flex flex-col gap-2 mt-4\">\n                    {filteredProducts.map((product) => (\n                        <div\n                            key={product.id}\n                            onClick={() => navigate(`/product/${product.id}/seller`)}\n                            className={`relative border border-gray-200 rounded-md p-3 hover:shadow transition-shadow duration-300 cursor-pointer ${\n                                product.status.toLowerCase() === 'active'\n                                    ? 'bg-green-100'\n                                    : product.status.toLowerCase() === 'archived'\n                                        ? 'bg-gray-200-400 text-black border-dashed'\n                                        : 'bg-white'\n                            }`}\n\n                        >\n                            {product.moderator_reviews?.at(-1)?.comment_to_seller && (\n                                <img\n                                    src=\"/icons/flag.png\"\n                                    alt=\"Комментарий\"\n                                    className=\"absolute top-2 right-2 w-6 h-6\"\n                                />\n                            )}\n                            <h3 className=\"text-md font-semibold\">{product.name}</h3>\n                            <p className=\"text-sm text-gray-600\">\n                                Цена: {product.price} ₽\n                            </p>\n                            <p className={`text-xs ${product.status.toLowerCase() === 'archived' ? 'text-black' : 'text-gray-400'}`}>\n                                Статус:{' '}\n                                {product.status === ProductStatus.ACTIVE\n                                    ? 'Активный'\n                                    : product.status === ProductStatus.REJECTED\n                                        ? 'Отклонено'\n                                        : product.status === ProductStatus.ARCHIVED\n                                            ? 'Архив'\n                                            : product.status === ProductStatus.CREATED ||\n                                            product.status === ProductStatus.DISABLED\n                                                ? 'Создано / Отключено'\n                                                : product.status}\n                            </p>\n                        </div>\n                    ))}\n                </div>\n            )}\n\n            <button\n                onClick={handleMyBalanceClick}\n                className=\"    w-full\n                                bg-brand\n                                text-white\n                                rounded-full\n                                shadow-sm\n                                p-4\n                                mt-4\n                                mb-2\n                                text-sm font-semibold\n                                text-center\n                                cursor-pointer\"\n            >\n                Пополнить кабинет\n            </button>\n            <div\n                onClick={handleSupportClick}\n                className=\"bg-white border border-brand rounded-xl shadow-sm p-4 mt-2 text-sm font-semibold cursor-pointer flex items-center gap-3\"\n            >\n                <img src=\"/icons/support.png\" alt=\"Support\" className=\"w-7 h-7\"/>\n                <div className=\"flex flex-col\">\n                    <span>Техподдержка</span>\n                    <span className=\"text-xs text-gray-500\">\n                            Оперативно ответим на все вопросы\n                        </span>\n                </div>\n                <img\n                    src=\"/icons/small_arrow.png\"\n                    alt=\"arrow\"\n                    className=\"w-5 h-5 ml-auto\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default MyProductsPage;\n"
  },
  {
    "path": "frontend/src/pages/CompleteInstructionPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {on} from \"@telegram-apps/sdk\";\nimport {useLocation, useNavigate} from 'react-router-dom';\n\nfunction CompleteInstructionPage() {\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    const handleHomeClick = () => navigate('/');\n\n    const backRoute = location.state?.backRoute || '/';\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate, backRoute]);\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 flex items-center justify-center p-4\">\n            <div className=\"max-w-screen-lg w-full bg-white border border-brand rounded-lg shadow-lg p-8 relative\">\n                {/*<div className=\"bg-white rounded-lg p-4 mb-8\">*/}\n                    <h2 className=\"text-2xl font-bold mb-6 text-center\">\n                        Инструкция выкупа для покупателя\n                    </h2>\n                    <p className=\"text-base mb-8 text-left\">\n                        ВБ КЭШБЭК — это бот с пошаговой инструкцией для раздачи товаров за отзыв.&nbsp;\n                        <a\n                            href=\"tg://resolve?domain=Premiumcash1&post=9\"\n                            onClick={e => {\n                                // если хочешь fallback на веб, можно проверять\n                            }}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"underline text-blue-600\"\n                        >\n                            Посмотреть видео инструкцию\n                        </a>\n\n                    </p>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Шаг 1. Ключевое слово</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <li>Напишите ключевое слово и добавьте в корзину несколько товаров конкурентов. Все товары должны быть разных брендов. На этом этапе не ищите товар продавца. Поиск товара на втором шаге</li>\n                            <li><span className=\"font-semibold\">Важно! Вводите ключевое слово вручную</span></li>\n                        </ul>\n                    </section>\n\n                    <hr className=\"my-6 border-darkGray\"/>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Шаг 2. Поиск товара</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <li>Найдите товар используя фото на втором шаге, скопируйте арткиул и вставьте в поле для проверки</li>\n                            <p className=\"text-sm\">Если указан не правильный артикул, система не откроет доступ к следующему шагу. Артикул мы не даем.</p>\n                            <p><strong>Товара нет в наличии на ВБ</strong></p>\n                            <li>Добавьте товар в лист ожидания, как товар поступит, откройте инструкцию, дойдите до 5 го шага, если товар доступен к выкупу то можете выкупать</li>\n                            <p className=\"text-sm\">Лимит на выкуп может закончится, поэтому обязательно проверьте доступность на 5м шаге</p>\n                            <p className=\"font-bold\">Не могу найти товар</p>\n                            <li>Чтобы быстрее найти товар, используйте фильтры по цене, цвету, размеру и другие</li>\n                            <p className=\"font-bold\">Артикул не правильный</p>\n                            <li>Если система показывает что артикул неправильный, значит это не тот товар</li>\n                        </ul>\n                    </section>\n\n                    <hr className=\"my-6 border-darkGray\"/>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Шаг 3. Товар в избранное</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <li>Добавьте товар и бренд в избранное. Скрин прикладывать не требуется</li>\n                        </ul>\n                    </section>\n\n                    <hr className=\"my-6 border-darkGray\"/>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Шаг 4. Реквизиты</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <li>Заполняйте реквизиты одного банка. Перевод будет проводится на усмотрение продавца по номеру карты или СБП выбранного банка. Убедитесь, что вы верно указали реквизиты</li>\n                            <p className=\"font-bold\">Моего банка нет в списке</p>\n                            <li>Вы можете выбрать только те банки, которые есть в списке</li>\n                            <p className=\"font-bold\">Я указал не те реквизиты</p>\n                            <li>Если оплата уже проведена, реквизиты поменять нельзя. В других случаях обратитесь в техподдержку</li>\n                        </ul>\n                    </section>\n\n                    <hr className=\"my-6 border-darkGray\"/>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Шаг 5. Оформление заказа</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <li>Оформите заказ, сделайте скрин и прикрепите его в отчет.\n                                {/*Требования к скрину заказа смотрите здесь&nbsp;*/}\n                                {/*<span onClick={openModal} className=\"underline text-blue-600 cursor-pointer\">Пример скрина заказа</span>*/}\n                            </li>\n                            <p className=\"font-bold\">Оформила заказ, а лимит закончился</p>\n                            <li>Свяжитесь с техподдержкой. Мы пожем решить данный вопрос</li>\n                        </ul>\n                    </section>\n\n                    <hr className=\"my-6 border-darkGray\"/>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Шаг 6. Получение товара</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <li>Забирайте товар как обычно это делаете или через несколько дней после получения товара</li>\n                            <li>Сделайте скрин полученного товара в личном кабинете ВБ. На скрине дожна быть указана стоимость товара, дата получения и статус доставки</li>\n                            <li>Сделайте фото разрезанных штрих кодов на фоне товара без упаковки</li>\n                            <li>Сдавайте отчет в день получения товара. Дата сдачи отчета и дата получения товара должны быть в один день</li>\n                        </ul>\n                    </section>\n\n                    <hr className=\"my-6 border-darkGray\"/>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Шаг 7. Публикация отзыва</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <li>С согласованием. Перед публикацией вам обязательно надо согласовать отзыв с продавцом. Не публикуйте без согласования, даже если продавец не отвечает больше 5 дней</li>\n                            <li>Без согласования. Публикуйте отзыв через несколько дней после получения товара</li>\n                            <li>Требования к фото. Делайте фото высокого качества, без упаковки, покажите как используете товар в своей жизни</li>\n                            <li>Требования к тексту. Пишите больше про свои чувства и ощущения</li>\n                            <p className=\"font-bold\">Продавец мне не отвечает несколько дней</p>\n                            <li>Если продавец прочитал сообщение и не ответил в течение 3х дней напишите ему повторно</li>\n                            <li>Если продавец не отвечает больше недели, свяжитесь с нами</li>\n                            <li>Возможно вам не требуется согласование. Проверьте в вашей инструкции</li>\n                        </ul>\n                    </section>\n\n                    <hr className=\"my-6 border-darkGray\"/>\n\n                    <section className=\"mb-8\">\n                        <h3 className=\"text-xl font-bold mb-4 text-left\">Кэшбэк</h3>\n                        <ul className=\"list-disc list-inside space-y-2 ml-6\">\n                            <p>3 варианта выплаты кэшбэка:</p>\n                            <li>После получения товара</li>\n                            <li>После публикации отзыва</li>\n                            <li>на 15й день после получения товара</li>\n                            <p>Выплаты могут задерживаться до 7 дней. Это может быть связано с очередью на оплату. Выплаты проводятся вручную. Наберитесь терпения</p>\n                            <p>Не надо писать продавцу или в техподдержку раньше чем через 7 дней</p>\n                        </ul>\n                    </section>\n\n                    <div className=\"flex flex-col gap-2\">\n                        <button\n                            onClick={handleHomeClick}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            На главную\n                        </button>\n                    </div>\n                </div>\n\n            {/*</div>*/}\n        </div>\n    );\n}\n\nexport default CompleteInstructionPage;\n"
  },
  {
    "path": "frontend/src/pages/CreateProductForm.tsx",
    "content": "import React, {ChangeEvent, FormEvent, useEffect, useRef, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {createProduct, getProductById, updateProduct} from '../services/api';\nimport {Category, PayoutTime} from '../enums';\nimport {on} from \"@telegram-apps/sdk\";\nimport FileUploader from \"../components/FileUploader\";\nimport {NumericInput} from \"../components/NumericInput\";\n\ninterface ProductFormData {\n    id?: string;\n    name: string;\n    article: string;\n    brand: string;\n    category: Category;\n    key_word: string;\n    general_repurchases: string;\n    daily_repurchases: string;\n    price: string;\n    wb_price: string;\n    tg: string;\n    payment_time: PayoutTime;\n    review_requirements: string;\n    requirements_agree: boolean;\n    image_path?: string;\n}\n\n//todo: написать паттерны в инпуты\nfunction ProductForm() {\n    const navigate = useNavigate();\n    const {productId} = useParams();\n    const isEditMode = Boolean(productId);\n    const [originalFormData, setOriginalFormData] = useState<ProductFormData | null>(null);\n    const [showConfirmation, setShowConfirmation] = useState(false);\n    const [priceError, setPriceError] = useState('');\n    const [repurchasesError, setRepurchasesError] = useState('');\n    const [file, setFile] = useState<File | null>(null);\n    const [preview, setPreview] = useState<string | null>(null);\n    const [changedFields, setChangedFields] = useState<Record<string, { old: any, new: any }>>({});\n\n\n    const inputRefs = [\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null),\n        useRef<HTMLInputElement>(null)\n    ];\n\n    const reviewRequirementsRef = useRef<HTMLTextAreaElement>(null);\n    const agreeRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        if (!file) {\n            setPreview(null);\n            return;\n        }\n        const url = URL.createObjectURL(file);\n        setPreview(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file]);\n\n    const handleTextareaKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n        }\n    };\n\n\n    const [formData, setFormData] = useState<ProductFormData>({\n        name: '',\n        article: '',\n        brand: '',\n        category: Category.WOMEN,\n        key_word: '',\n        general_repurchases: '',\n        daily_repurchases: '',\n        price: '',\n        wb_price: '',\n        tg: '',\n        payment_time: PayoutTime.AFTER_REVIEW,\n        review_requirements: '',\n        requirements_agree: false,\n        image_path: '',\n    });\n\n    const handleKeyDown = (index: number) => (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            if (index === 8) {\n                reviewRequirementsRef.current?.focus();\n            } else {\n                inputRefs[index + 1]?.current?.focus();\n            }\n        }\n    };\n\n\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n\n    useEffect(() => {\n        if (!isEditMode) {\n            setLoading(false);\n            return;\n        }\n\n        (async () => {\n            try {\n                const response = await getProductById(productId!);\n                const data = response.data;\n\n                const loadedData: ProductFormData = {\n                    id: data.id,\n                    name: data.name,\n                    article: data.article,\n                    brand: data.brand,\n                    category: data.category,\n                    key_word: data.key_word,\n                    general_repurchases: String(data.general_repurchases),\n                    daily_repurchases: String(data.daily_repurchases),\n                    price: String(data.price),\n                    wb_price: String(data.wb_price),\n                    tg: data.tg,\n                    payment_time: data.payment_time,\n                    review_requirements: data.review_requirements,\n                    requirements_agree: data.requirements_agree ?? false,\n                    image_path: data.image_path || '', // если есть\n                };\n                setFormData(loadedData);\n                setOriginalFormData(loadedData);\n\n                setLoading(false);\n            } catch (err) {\n                console.error('Ошибка при загрузке товара:', err);\n                setError('Не удалось загрузить товар');\n                setLoading(false);\n            }\n        })();\n    }, [isEditMode, productId]);\n\n    // Обработчик для всех NumericInput\n    const handleNumericFieldChange = (field: string, val: string) => {\n        setFormData(prev => ({...prev, [field]: val}));\n    };\n\n\n    const validateField = (name: string, value: any, newFormData: ProductFormData) => {\n        // Проверяем оба поля цены, если поменяли или цену покупателя, или цену на сайте\n        if (['price', 'wb_price'].includes(name)) {\n            const numPrice = Number(newFormData.price);\n            const numWbPrice = Number(newFormData.wb_price);\n            if (numPrice > numWbPrice) {\n                setPriceError('Цена для покупателя не должна быть больше цены на сайте');\n            } else {\n                setPriceError('');\n            }\n        }\n\n        // Аналогично — оба поля выкупа\n        if (['daily_repurchases', 'general_repurchases'].includes(name)) {\n            if (newFormData.daily_repurchases > newFormData.general_repurchases) {\n                setRepurchasesError('Ежедневные выкупы не могут превышать общий план');\n            } else {\n                setRepurchasesError('');\n            }\n        }\n    };\n\n\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n        const {name, value, type, checked} = e.target as HTMLInputElement;\n        const newValue = type === 'checkbox'\n            ? checked\n            : value;\n        setFormData(prev => {\n            const updated = {...prev, [name]: newValue};\n            validateField(name, newValue, updated);\n            return updated;\n        });\n    }\n\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const handleSubmit = async (e: FormEvent) => {\n        e.preventDefault();\n\n        if (isEditMode && originalFormData) {\n            const changes: Record<string, { old: any, new: any }> = {};\n            Object.keys(formData).forEach((key) => {\n                if (formData[key as keyof ProductFormData] !== originalFormData[key as keyof ProductFormData]) {\n                    changes[key] = {\n                        old: originalFormData[key as keyof ProductFormData],\n                        new: formData[key as keyof ProductFormData],\n                    };\n                }\n            });\n            if (Object.keys(changes).length > 0) {\n                setChangedFields(changes);\n                setShowConfirmation(true);\n                return;\n            }\n        }\n        await submitData();\n    };\n\n    const submitData = async () => {\n\n        try {\n            const fd = new FormData();\n            fd.append('name', formData.name);\n            fd.append('article', formData.article);\n            fd.append('brand', formData.brand);\n            fd.append('category', formData.category);\n            fd.append('key_word', formData.key_word);\n            fd.append('general_repurchases', String(formData.general_repurchases));\n            fd.append('daily_repurchases', String(formData.daily_repurchases));\n            fd.append('price', String(Number(formData.price)));\n            fd.append('wb_price', String(formData.wb_price));\n            fd.append('tg', formData.tg);\n            fd.append('payment_time', formData.payment_time);\n            fd.append('review_requirements', formData.review_requirements);\n            fd.append('requirements_agree', String(formData.requirements_agree));\n\n            if (file) {\n                fd.append('image', file);\n            }\n\n            if (isEditMode) {\n                await updateProduct(productId!, fd);\n                navigate(`/product/${productId}/seller`);\n            } else {\n                const newId = await createProduct(fd);\n                navigate(`/product/${newId}/seller`);\n            }\n        } catch (err) {\n            console.error('Ошибка при сохранении товара:', err);\n            alert('Не удалось сохранить товар');\n        }\n    };\n\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n\n    if (error) {\n        return <div className=\"p-4 text-red-600\">{error}</div>;\n    }\n\n\n    return (\n        <div className=\"p-4 max-w-screen-sm bg-gray-200 mx-auto\">\n            <div className=\"sticky top-0 z-10 bg-gray-200\">\n                <div className=\"flex justify-between items-center px-2 py-1\">\n                    <button\n                        onClick={() => navigate('/')}\n                        type=\"button\"\n                        className=\"inline-flex items-center justify-center whitespace-nowrap py-1 px-1 text-xs font-semibold border border-brand text-brand bg-transparent rounded appearance-none focus:outline-none\"\n                    >\n                        Отменить\n                    </button>\n                </div>\n                <div className=\"px-2\">\n                    <h1 className=\"text-center text-base font-bold -mt-1\">\n                        {isEditMode ? 'Редактировать товар' : 'Добавить товар'}\n                    </h1>\n                </div>\n            </div>\n\n\n            <form id=\"product-form\" onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Название товара</label>\n                    <input\n                        type=\"text\"\n                        ref={inputRefs[0]}\n                        onKeyDown={handleKeyDown(0)}\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                        placeholder=\"Название товара\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Артикул</label>\n                    <input\n                        type=\"text\"\n                        ref={inputRefs[1]}\n                        onKeyDown={handleKeyDown(1)}\n                        name=\"article\"\n                        value={formData.article}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                        placeholder=\"Артикул\"\n                    />\n                </div>\n\n                <FileUploader\n                    label=\"Фото товара\"\n                    file={file}\n                    preview={preview}\n                    onFileChange={setFile}\n                />\n\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Бренд</label>\n                    <input\n                        type=\"text\"\n                        ref={inputRefs[2]}\n                        onKeyDown={handleKeyDown(2)}\n                        name=\"brand\"\n                        value={formData.brand}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Категория</label>\n                    <select\n\n                        name=\"category\"\n                        value={formData.category}\n                        onChange={handleInputChange}\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                    >\n                        {Object.values(Category).map((cat) => (\n                            <option key={cat} value={cat}>\n                                {cat}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Ключевое слово</label>\n                    <input\n                        type=\"text\"\n                        ref={inputRefs[3]}\n                        onKeyDown={handleKeyDown(3)}\n                        name=\"key_word\"\n                        value={formData.key_word}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                        placeholder=\"Например, 'рубашка в клетку'\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Общий план выкупов</label>\n                    <NumericInput\n                        name=\"general_repurchases\"\n                        ref={inputRefs[4]}\n                        onKeyDown={handleKeyDown(4)}\n                        value={formData.general_repurchases}\n                        onValueChange={handleNumericFieldChange}\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">План выкупов на сутки</label>\n                    <NumericInput\n                        name=\"daily_repurchases\"\n                        ref={inputRefs[5]}\n                        onKeyDown={handleKeyDown(5)}\n                        value={formData.daily_repurchases}\n                        onValueChange={handleNumericFieldChange}\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                    />\n                    {repurchasesError && (\n                        <p className=\"text-red-500 text-xs mt-1\">{repurchasesError}</p>\n                    )}\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Цена на сайте WB (₽)</label>\n                    <NumericInput\n                        name=\"wb_price\"\n                        ref={inputRefs[6]}\n                        onKeyDown={handleKeyDown(6)}\n                        value={formData.wb_price}\n                        onValueChange={handleNumericFieldChange}\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Цена для покупателя (₽)</label>\n                    <NumericInput\n                        name=\"price\"\n                        ref={inputRefs[7]}\n                        onKeyDown={handleKeyDown(7)}\n                        value={formData.price}\n                        onValueChange={handleNumericFieldChange}\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                    />\n                    {priceError && (\n                        <p className=\"text-red-500 text-xs mt-1\">{priceError}</p>\n                    )}\n                </div>\n\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Телеграм для связи</label>\n                    <input\n                        type=\"text\"\n                        ref={inputRefs[8]}\n                        onKeyDown={handleKeyDown(8)}\n                        name=\"tg\"\n                        value={formData.tg}\n                        onChange={handleInputChange}\n                        required\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                        placeholder=\"@username\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Когда выплата </label>\n                    <select\n                        name=\"payment_time\"\n                        value={formData.payment_time}\n                        onChange={handleInputChange}\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                    >\n                        {Object.values(PayoutTime).map((pt) => (\n                            <option key={pt} value={pt}>\n                                {pt}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium mb-1\">Требования к отзыву</label>\n                    <textarea\n                        name=\"review_requirements\"\n                        ref={reviewRequirementsRef}\n                        onKeyDown={handleTextareaKeyDown}\n                        value={formData.review_requirements}\n                        onChange={handleInputChange}\n                        rows={3}\n                        className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                        placeholder=\"Опишите требования к отзыву...\"\n                    />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                    <input\n                        type=\"checkbox\"\n                        name=\"requirements_agree\"\n                        id=\"requirements_agree\"\n                        checked={formData.requirements_agree}\n                        onChange={handleInputChange}\n                        ref={agreeRef}\n                        className=\"h-4 w-4 text-brand border-darkGray rounded\"\n                    />\n                    <label htmlFor=\"requirements_agree\" className=\"text-sm\">\n                        Согласовать отзыв\n                    </label>\n                </div>\n                <button\n                    type=\"submit\"\n                    className=\"w-full py-3 bg-brand text-white rounded-md text-sm font-semibold hover:bg-brand-dark transition-colors\"\n                >\n                    Отправить заявку\n                </button>\n            </form>\n            {showConfirmation && (\n                <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">\n                    <div className=\"bg-white p-6 rounded shadow-lg max-w-md w-full\">\n                        <h2 className=\"text-xl font-bold mb-4\">Вы изменили:</h2>\n                        <div className=\"bg-brandlight rounded p-4\">\n                            <ul className=\"text-sm mb-4\">\n                                {Object.entries(changedFields).map(([field, values]) => (\n                                    <li key={field}>\n                                        <strong>{field}</strong>: {String(values.old)} → {String(values.new)}\n                                    </li>\n                                ))}\n                            </ul>\n                            <div className=\"flex justify-end gap-3\">\n                            </div>\n                        </div>\n\n                        <div className=\"flex justify-end gap-3 mt-4\">\n                            <button\n                                onClick={() => setShowConfirmation(false)}\n                                className=\"px-4 py-2 bg-white border border-brand rounded text-brand hover:bg-gray-200-100\"\n                            >\n                                Отмена\n                            </button>\n                            <button\n                                onClick={async () => {\n                                    setShowConfirmation(false);\n                                    await submitData();\n                                }}\n                                className=\"px-4 py-2 bg-white text-brand rounded border border-brand\"\n                            >\n                                Все верно. Применить\n                            </button>\n                        </div>\n\n                    </div>\n                </div>\n            )}\n\n        </div>\n    )\n        ;\n}\n\nexport default ProductForm;\n"
  },
  {
    "path": "frontend/src/pages/OrderReportPage.tsx",
    "content": "import React, {useCallback, useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {AxiosResponse} from 'axios';\nimport {getOrderReport, updateOrderStatus} from \"../services/api\";\nimport {on} from \"@telegram-apps/sdk\";\nimport {OrderStatus} from \"../enums\";\nimport GetUploadLink from \"../components/GetUploadLink\";\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    article?: string;\n    status?: OrderStatus;\n    cashback: number;\n}\n\nfunction OrderReportPage() {\n    const {orderId} = useParams<{ orderId: string }>();\n    const navigate = useNavigate();\n    const [report, setReport] = useState<OrderReport | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    const copyToClipboard = useCallback((text: string) => {\n        navigator.clipboard.writeText(text)\n            .then(() => {\n                // Здесь можно заменить alert на Toast или иной UI-фидбэк\n                alert(`Скопировано: ${text}`);\n            })\n            .catch(() => alert('Не удалось скопировать'));\n    }, []);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReport(response.data);\n            })\n            .catch((err: any) => {\n                console.error('Ошибка при загрузке отчета:', err);\n                setError('Не удалось загрузить отчет');\n            })\n            .finally(() => setLoading(false));\n    }, [orderId]);\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/seller-cabinet/reports');\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const handleCashbackPaid = async (orderId: string) => {\n        try {\n            const formData = new FormData();\n            formData.append('status', OrderStatus.CASHBACK_PAID);\n            await updateOrderStatus(orderId, formData);\n            alert('Статус обновлен!');\n            // При возврате на список, сразу на вкладке \"выплаченные\"\n            navigate(\n                { pathname: '/seller-cabinet/reports', search: '?tab=paid' },\n                { replace: true }\n            );\n\n        } catch {\n            alert('Ошибка обновления статуса');\n        }\n    };\n\n    if (loading) {\n        return <div className=\"p-6 text-center text-xl\">Загрузка отчета...</div>;\n    }\n    if (error || !report) {\n        return <div className=\"p-6 text-center text-red-600 text-xl\">{error || 'Отчет не найден'}</div>;\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 py-6\">\n            <div className=\"max-w-screen-md mx-auto bg-white shadow-lg rounded-lg p-6\">\n                <h1 className=\"text-2xl font-bold mb-6 text-center\">Отчет по заказу</h1>\n\n                {(report.search_screenshot_path || report.cart_screenshot_path) && (\n                    <section className=\"mb-6 p-4 bg-gray-200 rounded-md\">\n                        <h2 className=\"text-xl font-semibold mb-2\">Шаг 1. Скрины корзины</h2>\n                        {report.search_screenshot_path && (\n                            <img\n                                src={GetUploadLink(report.search_screenshot_path)}\n                                alt=\"Скрин поискового запроса\"\n                                className=\"mt-2 w-full rounded-md\"\n                            />\n                        )}\n                        {report.cart_screenshot_path && (\n                            <img\n                                src={GetUploadLink(report.cart_screenshot_path)}\n                                alt=\"Скрин корзины\"\n                                className=\"mt-2 w-full rounded-md\"\n                            />\n                        )}\n                    </section>\n                )}\n\n                {report.article && (\n                    <section className=\"mb-6 p-4 bg-gray-200 rounded-md\">\n                        <h2 className=\"text-xl font-semibold mb-2\">Шаг 2. Артикул товара</h2>\n                        <p className=\"text-base\">{report.article}</p>\n                    </section>\n                )}\n\n                <section className=\"mb-6 p-4 bg-gray-200 rounded-md\">\n                    <h2 className=\"text-xl font-semibold mb-2\">Шаг 3. Товар и бренд добавлены в избранное</h2>\n                    <p className=\"text-base\">Ваш товар и бренд успешно добавлены в избранное.</p>\n                </section>\nё\n\n                {report.final_cart_screenshot_path && (\n                    <section className=\"mb-6 p-4 bg-gray-200 rounded-md\">\n                        <h2 className=\"text-xl font-semibold mb-2\">Шаг 4. Финальный скрин корзины</h2>\n                        <img\n                            src={GetUploadLink(report.final_cart_screenshot_path)}\n                            alt=\"Финальный скрин корзины\"\n                            className=\"mt-2 w-full rounded-md\"\n                        />\n                    </section>\n                )}\n\n                {(report.delivery_screenshot_path || report.barcodes_screenshot_path) && (\n                    <section className=\"mb-6 p-4 bg-gray-200 rounded-md\">\n                        <h2 className=\"text-xl font-semibold mb-2\">Шаг 5. Скрины доставки и штрихкодов</h2>\n                        {report.delivery_screenshot_path && (\n                            <img\n                                src={GetUploadLink(report.delivery_screenshot_path)}\n                                alt=\"Скрин доставки\"\n                                className=\"mt-2 w-full rounded-md\"\n                            />\n                        )}\n                        {report.barcodes_screenshot_path && (\n                            <img\n                                src={GetUploadLink(report.barcodes_screenshot_path)}\n                                alt=\"Скрин штрихкодов\"\n                                className=\"mt-2 w-full rounded-md\"\n                            />\n                        )}\n                    </section>\n                )}\n\n                {(report.review_screenshot_path || report.receipt_screenshot_path || report.receipt_number) && (\n                    <section className=\"mb-6 p-4 bg-gray-200 rounded-md\">\n                        <h2 className=\"text-xl font-semibold mb-2\">Шаг 6. Скрины отзыва и чека</h2>\n                        {report.review_screenshot_path && (\n                            <img\n                                src={GetUploadLink(report.review_screenshot_path)}\n                                alt=\"Скрин отзыва\"\n                                className=\"mt-2 w-full rounded-md\"\n                            />\n                        )}\n                        {report.receipt_screenshot_path && (\n                            <img\n                                src={GetUploadLink(report.receipt_screenshot_path)}\n                                alt=\"Скрин электронного чека\"\n                                className=\"mt-2 w-full rounded-md\"\n                            />\n                        )}\n                        {report.receipt_number && (\n                            <p className=\"text-base mt-2\">Номер чека: {report.receipt_number}</p>\n                        )}\n                    </section>\n                )}\n\n\n                {(report.card_number || report.phone_number || report.name || report.bank) && (\n                    <section className=\"mb-6 p-4 bg-gray-200 rounded-md\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                            <h2 className=\"text-xl font-semibold\">Реквизиты</h2>\n                        </div>\n                        {report.card_number && (\n                            <div className=\"flex items-center justify-between mb-1\">\n                                <span className=\"text-base\">Номер карты: {report.card_number}</span>\n                                <button\n                                    onClick={() => copyToClipboard(report.card_number!)}\n                                    className=\"ml-2\"\n                                >\n                                    <img\n                                        src=\"/icons/copy.png\"\n                                        alt=\"Скопировать\"\n                                        className=\"w-5 h-5\"\n                                    />\n                                </button>\n                            </div>\n                        )}\n                        {report.phone_number && (\n                            <div className=\"flex items-center justify-between mb-1\">\n                                <span className=\"text-base\">Телефон: {report.phone_number}</span>\n                                <button\n                                    onClick={() => copyToClipboard(report.phone_number!)}\n                                    className=\"ml-2\"\n                                >\n                                    <img\n                                        src=\"/icons/copy.png\"\n                                        alt=\"Скопировать\"\n                                        className=\"w-5 h-5\"\n                                    />\n                                </button>\n                            </div>\n                        )}\n                        {report.name && (\n                            <div className=\"flex items-center justify-between mb-1\">\n                                <span className=\"text-base\">Имя: {report.name}</span>\n                                <button\n                                    onClick={() => copyToClipboard(report.name!)}\n                                    className=\"ml-2\"\n                                >\n                                    <img\n                                        src=\"/icons/copy.png\"\n                                        alt=\"Скопировать\"\n                                        className=\"w-5 h-5\"\n                                    />\n                                </button>\n                            </div>\n                        )}\n                        {report.bank && (\n                            <div className=\"flex items-center justify-between mb-1\">\n                                <span className=\"text-base\">Банк: {report.bank}</span>\n                                <button\n                                    onClick={() => copyToClipboard(report.bank!)}\n                                    className=\"ml-2\"\n                                >\n                                    <img\n                                        src=\"/icons/copy.png\"\n                                        alt=\"Скопировать\"\n                                        className=\"w-5 h-5\"\n                                    />\n                                </button>\n                            </div>\n                        )}\n                        {report.cashback && (\n                            <div className=\"flex items-center justify-between\">\n                                <span className=\"text-base\">Кешбек: {report.cashback}</span>\n                                <button\n                                    onClick={() => copyToClipboard(report.cashback.toString()!)}\n                                    className=\"ml-2\"\n                                >\n                                    <img\n                                        src=\"/icons/copy.png\"\n                                        alt=\"Скопировать\"\n                                        className=\"w-5 h-5\"\n                                    />\n                                </button>\n                            </div>\n                        )}\n                    </section>\n                )}\n\n                {report.status === OrderStatus.CASHBACK_NOT_PAID &&\n                    <button\n                        onClick={() => handleCashbackPaid(orderId!)}\n                        className=\" w-full py-2 mt-3 rounded bg-green-500 text-white font-semibold text-lg\"\n                    >\n                        Отметить как выплаченный\n                    </button>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default OrderReportPage;\n"
  },
  {
    "path": "frontend/src/pages/RequirementsPage.tsx",
    "content": "import React, { useEffect, useState } from 'react';\nimport { on } from \"@telegram-apps/sdk\";\nimport { useNavigate } from 'react-router-dom';\n\n\ntype ModalContent = { src: string; isVideo: boolean };\n\nfunction RequirementsPage() {\n    const navigate = useNavigate();\n\n\n    // Пути к картинкам в public\n    const orderImgPath = '/images/order.jpg';\n    const receivingImgPath = '/images/receiving.jpg';\n    const feedbackImgPath = '/images/feedback.jpg';\n    const barcodeImgPath = '/images/barcode.jpg';\n    const receiptVideoPath = '/images/electronic_receipt.mp4';\n\n    // единственное состояние для модалки\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\n\n    const openModal = (src: string) => {\n        setModalContent({ src, isVideo: src.endsWith('.mp4') });\n    };\n    const closeModal = () => setModalContent(null);\n\n    const handleHomeClick = () => navigate('/');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/about');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 flex items-center justify-center p-4\">\n            <div className=\"max-w-screen-md w-full bg-white border border-brand rounded-lg shadow-lg p-8 relative\">\n                <div className=\"space-y-8\">\n                    <div className=\"mb-4\">\n                        <h2 className=\"text-2xl font-bold mb-4 text-left\">Требования к отчету</h2>\n                        <p className=\"text-base font-semibold text-left\">\n                            Не закрашивайте и не обрезайте скрины — они должны быть без повреждений.<br />\n                            За нарушение требований кэшбэк не будет выплачиваться.\n                        </p>\n                    </div>\n\n                    <hr className=\"border-darkGray\" />\n\n                    <ol className=\"list-decimal list-inside space-y-6 text-gray-800\">\n                        <li className=\"px-4\">\n                            <p className=\"font-semibold mb-1 text-lg\">Заказ оформлен</p>\n                            <p className=\"mt-1\">\n                                На скрине должна быть указана цена покупки и адрес ПВЗ.{' '}\n                                <div\n                                    onClick={() => openModal(orderImgPath)}\n                                    className=\"underline text-blue-600 cursor-pointer\"\n                                >\n                  Пример скрина заказа\n                </div>\n                            </p>\n                        </li>\n                        <li className=\"px-4\">\n                            <p className=\"font-semibold mb-1 text-lg\">Товар получен</p>\n                            <p className=\"mt-1\">\n                                На скрине должен быть указан статус \"Доставлено\" и дата получения.{' '}\n                                <div\n                                    onClick={() => openModal(receivingImgPath)}\n                                    className=\"underline text-blue-600 cursor-pointer\"\n                                >\n                  Пример скрина получения товара\n                </div>\n                            </p>\n                        </li>\n                        <li className=\"px-4\">\n                            <p className=\"font-semibold mb-1 text-lg\">Отзыв оставлен</p>\n                            <p className=\"mt-1\">\n                                На скрине должен быть опубликованный отзыв из вашего личного кабинета.{' '}\n                                <div\n                                    onClick={() => openModal(feedbackImgPath)}\n                                    className=\"underline text-blue-600 cursor-pointer\"\n                                >\n                  Пример отзыва\n                </div>\n                            </p>\n                        </li>\n                        <li className=\"px-4\">\n                            <p className=\"font-semibold mb-1 text-lg\">Разрезанный штрихкод</p>\n                            <p className=\"mt-1\">\n                                Разрежьте штрихкод на мелкие кусочки и сделайте фото на фоне товара.{' '}\n                                <div\n                                    onClick={() => openModal(barcodeImgPath)}\n                                    className=\"underline text-blue-600 cursor-pointer\"\n                                >\n                  Пример разрезанного штрихкода\n                </div>\n                            </p>\n                        </li>\n                        <li className=\"px-4\">\n                            <p className=\"font-semibold mb-1 text-lg\">Электронный чек</p>\n                            <p className=\"mt-1\">\n                                Для того чтобы получить Электронный чек перейдите в Профиль &rarr;\n                                Финансы &rarr; вкладка \"Эл. чеки\" &rarr; Найдите ваш чек, откройте его &rarr;\n                                Скопируйте номер чека и сделайте скриншот.{' '}\n                                <div>\n                                    {/* Кнопка для открытия модального окна */}\n                                    <div\n                                        onClick={() => openModal(receiptVideoPath)}\n                                        className=\"underline text-blue-600 cursor-pointer\"\n                                    >\n                                  Пример получения электронного чека\n                                </div>\n                                </div>\n                            </p>\n                        </li>\n                    </ol>\n\n                    <hr className=\"border-darkGray\" />\n\n                    <div className=\"flex flex-col gap-2\">\n                        <button\n                            onClick={() => navigate('/about')}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            О сервисе\n                        </button>\n                        <button\n                            onClick={() => navigate('/instruction')}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            Инструкция\n                        </button>\n                        <button\n                            onClick={handleSupportClick}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            Нужна помощь\n                        </button>\n                        <button\n                            onClick={handleHomeClick}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            На главную\n                        </button>\n                    </div>\n                </div>\n\n                {modalContent && (\n                    <div\n                        className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\"\n                        onClick={closeModal}\n                    >\n                        <div\n                            className=\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\"\n                            onClick={e => e.stopPropagation()}\n                        >\n                            {/* Крестик в правом верхнем углу */}\n                            <button\n                                onClick={closeModal}\n                                className=\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\"\n                            >\n                                &times;\n                            </button>\n\n                            {modalContent.isVideo ? (\n                                <video width=\"100%\" height=\"auto\" controls>\n                                    <source src={modalContent.src} type=\"video/mp4\" />\n                                    Ваш браузер не поддерживает видео.\n                                </video>\n                            ) : (\n                                <img src={modalContent.src} alt=\"Пример\" className=\"w-full h-auto\" />\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default RequirementsPage;\n"
  },
  {
    "path": "frontend/src/pages/ProductDetailPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getProductById} from '../services/api';\nimport {AxiosResponse} from \"axios\";\nimport {on} from \"@telegram-apps/sdk\";\nimport GetUploadLink from \"../components/GetUploadLink\";\n\ninterface Product {\n    id: string;\n    name: string;\n    description?: string;\n    price: number;\n    article: string;\n    image_path?: string;\n    wb_price: number;\n    payment_time: string;\n    shortDescription?: string;\n    seller_id: string;\n}\n\nfunction ProductDetailPage() {\n    const {productId} = useParams();\n    const [product, setProduct] = useState<Product | null>(null);\n    const navigate = useNavigate();\n\n    const handleOpenInstructionClick = () => {\n        if (product) {\n            navigate(`/product/${product.id}/instruction`);\n        }\n    };\n\n    const handleOpenSellerProducts = () => {\n        if (!product) return;\n        navigate(`/catalog?seller=${product.seller_id}`);\n    };\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/catalog');\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    useEffect(() => {\n        if (!productId) return;\n        getProductById(productId)\n            .then((response: AxiosResponse<Product>) => {\n                setProduct(response.data);\n            })\n            .catch((error: unknown) => {\n                console.error('Ошибка загрузки товара:', error);\n            });\n    }, [productId]);\n\n    if (!product) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n\n    const discountPercent = product.wb_price\n        ? (((product.wb_price - product.price) / product.wb_price) * 100).toFixed(2)\n        : '0';\n\n    const getLink = (path: string) => {\n        if (path.startsWith('http')) {\n            return path;\n        }\n\n        let url = GetUploadLink(path)\n        console.log(`url for photo is ${url}`)\n        return url;\n    }\n\n    const savedAmount = product.wb_price - product.price;\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto\">\n            <div className=\"relative w-full h-[60vh] overflow-hidden\">\n                {product.image_path ? (\n                    <img\n                        src={getLink(product.image_path)}\n                        alt={product.name}\n                        className=\"absolute inset-0 w-full h-full object-cover\"\n                    />\n                ) : (\n                    <div className=\"w-full h-full flex items-center justify-center text-gray-500\">\n                        Нет фото\n                    </div>\n                )}\n            </div>\n\n\n            <h1 className=\"text-2xl font-bold mb-2 text-left\">{product.name}</h1>\n            {product.shortDescription && (\n                <p className=\"text-gray-600 mb-4 text-center\">{product.shortDescription}</p>\n            )}\n\n            <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                <p className=\"text-xl font-bold mb-1 text-brand\">\n                    {product.price} ₽\n                </p>\n                {product.description && (\n                    <p className=\"text-sm text-gray-700 mb-2\">{product.description}</p>\n                )}\n                {product.article && (\n                    <p className=\"text-xs text-gray-500\">Арт. {product.article}</p>\n                )}\n            </div>\n\n            <div className=\"flex gap-2 mb-4\">\n                <button\n                    onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\n                    className=\"flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\"\n                >\n                    Проверить продавца\n                </button>\n\n                <button\n                    onClick={handleOpenInstructionClick}\n                    className=\"flex-1 bg-brand text-white py-2 rounded-lg border  text-center\"\n                >\n                    Выкупить товар\n                </button>\n            </div>\n\n\n            <div\n                onClick={() =>\n                    navigate(`/product/${product.id}/instruction?preview=1`)\n                }\n                className=\"flex items-center justify-start mt-2 mb-2 cursor-pointer select-none\"\n            >\n                <img\n                    src=\"/icons/question.png\"\n                    alt=\"Question\"\n                    className=\"w-7 h-7 mr-2\"\n                />\n                <span className=\"block text-sm text-gray-600 hover:underline\">\n                Хотите узнать, как выкупить товар?\n              </span>\n            </div>\n\n\n            <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                <h2 className=\"font-semibold mb-2\">Условия сделки</h2>\n                <p className=\"text-sm text-gray-700 mb-1\">\n                    Цена на сайте WB: {product.wb_price} руб\n                </p>\n                <p className=\"text-sm text-gray-700 mb-1\">\n                    Цена для вас: {product.price} руб\n                </p>\n                <p className=\"text-sm text-gray-700 mb-1\">\n                    Скидка: {discountPercent}% <span className=\"text-gray-600\">(сэкономите {savedAmount} ₽)</span>\n                </p>\n                <p className=\"text-sm text-gray-700 mb-1\">\n                    Условия оплаты: {product.payment_time}\n                </p>\n            </div>\n\n            <button\n                onClick={handleOpenSellerProducts}\n                className=\"block w-full bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\"\n            >\n                Перейти к товарам продавца\n            </button>\n\n\n        </div>\n    );\n}\n\nexport default ProductDetailPage;\n"
  },
  {
    "path": "frontend/src/pages/QuestionPage.tsx",
    "content": "import React, {useEffect} from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {on} from \"@telegram-apps/sdk\";\n\nfunction QuestionPage() {\n    const navigate = useNavigate();\n    const handleInstruction = () => navigate('/instruction');\n    const handleRequirements = () => navigate('/requirements');\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n    const handleAbout = () => navigate('/about');\n    const handleHomeClick = () => navigate('/');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/about');\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 flex items-center justify-center p-4\">\n            <div className=\"max-w-screen-md w-full bg-white border border-brand rounded-lg shadow-lg p-6\">\n                <p className=\"italic\">\n                    Привет! Наша команда создала бота, чтобы покупатели и продавцы могли легче заключать сделки.\n                    <br/><br/>\n                    <strong>ВАЖНО!</strong> Бот не проводит выплат, не дает никаких гарантий, поэтому будьте осторожны.\n                    Мы проверяем каждого продавца перед тем как разместить его, но гарантий на 100% нет.\n                    <br/><br/>\n                    Перед выкупом проверяйте продавцов через бота{\" \"}\n                    <a\n                        href=\"https://t.me/bigblacklist_bot\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-500 hover:underline\"\n                    >\n                        @bigblacklist_bot\n                    </a>{\" \"}\n                    или в других группах, где пишут отзывы. Не выкупайте одновременно много товара — вам никто не возместит деньги, если продавец окажется мошенником.\n                </p>\n\n                {/*<div className=\"bg-white rounded-lg p-4 mb-6\">*/}\n                    <h1 className=\"text-2xl font-bold mb-6 mt-2 text-left\">\n                        ЧАСТО ЗАДАВАЕМЫЕ ВОПРОСЫ (FAQ):\n                    </h1>\n\n                    <section className=\"mb-8\">\n                        <h2 className=\"text-xl font-bold mb-6 text-left\">\n                            1. Общие вопросы\n                        </h2>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Как работает бот?</h3>\n                            <p className=\"mt-1\">\n                                Бот помогает покупать товары с кэшбэком, соблюдая пошаговую инструкцию. Выбираете товар\n                                – проходите инструкцию – оформляете заказ, загружаете отчеты и получаете кэшбэк.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Кто проводит выплаты?</h3>\n                            <p className=\"mt-1\">\n                                Выплаты осуществляет продавец, а бот помогает фиксировать все этапы сделки.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Как разместить товар в боте?</h3>\n                            <p className=\"mt-1\">\n                                Если вы продавец, оставьте заявку в боте или напишите в поддержку.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Что делать если продавец оказался мошенником?</h3>\n                            <ul className=\"list-disc list-inside ml-4 mt-1\">\n                                <li>\n                                    После того как мы выясним, что продавец является мошенником, будет создана группа,\n                                    куда будут добавлены все обманутые покупатели.\n                                </li>\n                                <li>\n                                    Подробнее читайте{' '}\n                                    <a\n                                        href=\"https://telegra.ph/Protokol-protiv-moshennikov-03-04\"\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        className=\"text-blue-600 hover:underline\"\n                                    >\n                                        тут\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                        <hr className=\"my-6 border-darkGray\"/>\n                    </section>\n\n                    <section className=\"mb-8\">\n                        <h2 className=\"text-xl font-bold mb-6 text-left\">\n                            2. Выплаты кэшбэка\n                        </h2>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Когда я получу кэшбэк?</h3>\n                            <p className=\"mt-1\">\n                                Кэшбэк выплачивается согласно условиям в сделке:\n                            </p>\n                            <ul className=\"list-disc list-inside ml-4 mt-1\">\n                                <li>После получения товара + 7 дней</li>\n                                <li>После публикации отзыва + 7 дней</li>\n                                <li>На 15-й день после получения товара + 7 дней</li>\n                            </ul>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Возможны ли задержки?</h3>\n                            <p className=\"mt-1\">\n                                Да, возможны задержки из-за загрузки продавца, выходных или лимитов на переводы. Все\n                                вопросы по оплате решайте с продавцом.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Как проверить, что кэшбэк отправлен?</h3>\n                            <p className=\"mt-1\">\n                                Вы получите уведомление в боте (если продавец его отправил). Некоторые продавцы могут не\n                                отправлять уведомления, поэтому проверяйте поступления в банке.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Какие гарантии выплат?</h3>\n                            <p className=\"mt-1\">\n                                Нет никаких гарантий, проверяйте продавца перед тем, как заключать сделку. Перед\n                                покупкой проверяйте отзывы.\n                                {/*<a*/}\n                                {/*    href=\"https://t.me/bigblacklist_bot\"*/}\n                                {/*    target=\"_blank\"*/}\n                                {/*    rel=\"noopener noreferrer\"*/}\n                                {/*    className=\"text-blue-600 hover:underline\"*/}\n                                {/*>*/}\n                                {/*    @bigblacklist_bot*/}\n                                {/*</a>.*/}\n                            </p>\n                        </div>\n                        <hr className=\"my-6 border-darkGray\"/>\n                    </section>\n\n                    <section className=\"mb-8\">\n                        <h2 className=\"text-xl font-bold mb-6 text-left\">\n                            3. Вопросы по инструкции\n                        </h2>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Что делать, если артикул не проходит проверку?</h3>\n                            <p className=\"mt-1\">\n                                Если бот не пускает дальше, значит это не тот товар. Попробуйте найти товар заново через\n                                поиск.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Как поменять реквизиты?</h3>\n                            <ul className=\"list-disc list-inside ml-4 mt-1\">\n                                <li>Если кэшбэк уже отправлен – изменить ничего нельзя.</li>\n                                <li>Пройдите все этапы до конца, и там будет возможность поменять реквизиты.</li>\n                            </ul>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Как поменять скриншины в отчете?</h3>\n                            <p className=\"mt-1\">\n                                Никак. Как только полностью сдадите отчет, свяжитесь с продавцом и направьте ему всю\n                                информацию.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Можно ли купить у одного продавца несколько\n                                товаров?</h3>\n                            <p className=\"mt-1\">\n                                Только после получения кэшбэка за предыдущий товар. Важно! Не выкупайте несколько\n                                товаров, пока не получите оплату.\n                            </p>\n                        </div>\n                        <hr className=\"my-6 border-darkGray\"/>\n                    </section>\n\n                    <section className=\"mb-8\">\n                        <h2 className=\"text-xl font-bold mb-6 text-left\">\n                            4. Отзывы\n                        </h2>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Нужно ли согласовывать отзыв с продавцом?</h3>\n                            <p className=\"mt-1\">\n                                Да, если в инструкции указано \"С согласованием\".\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Продавец не отвечает на согласование отзыва. Что\n                                делать?</h3>\n                            <p className=\"mt-1\">\n                                Пишите повторно. Техподдержка будет решать вопросы только, если продавец окажется\n                                мошенником.\n                            </p>\n                        </div>\n                        <hr className=\"my-6 border-darkGray\"/>\n                    </section>\n\n                    <section className=\"mb-8\">\n                        <h2 className=\"text-xl font-bold mb-6 text-left\">\n                            5. Проблемы с ботом\n                        </h2>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Не грузится бот</h3>\n                            <p\n                                onClick={handleSupportClick}\n                                className=\"cursor-pointer text-blue-600 underline mt-1\"\n                            >\n                                Обратитесь в техподдержку\n                            </p>\n                        </div>\n                        <hr className=\"my-6 border-darkGray\"/>\n                    </section>\n\n                    <section className=\"mb-8\">\n                        <h2 className=\"text-xl font-bold mb-6 text-left\">\n                            6. Прочие вопросы\n                        </h2>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Можно ли вернуть товар?</h3>\n                            <p className=\"mt-1\">\n                                Только если обнаружен брак. Подайте заявку на возврат через приложение ВБ, укажите номер\n                                сделки. Не пишите, что вы выкупали по кэшбэку.\n                            </p>\n                        </div>\n                        <div className=\"mb-4 text-left text-sm\">\n                            <h3 className=\"text-lg font-bold mb-1\">Остались вопросы?</h3>\n                            <p\n                                onClick={handleSupportClick}\n                                className=\"cursor-pointer text-blue-600 underline mt-1\"\n                            >\n                                Обратитесь в техподдержку\n                            </p>\n                        </div>\n                        <hr className=\"my-6 border-darkGray\"/>\n                    </section>\n\n                    <div className=\"flex flex-col gap-2\">\n                        <button\n                            onClick={handleAbout}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            О сервисе\n                        </button>\n                        <button\n                            onClick={handleInstruction}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            Инструкция\n                        </button>\n                        <button\n                            onClick={handleRequirements}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            Требования к отчету\n                        </button>\n                        <button\n                            onClick={handleSupportClick}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            Нужна помощь\n                        </button>\n                        <button\n                            onClick={handleHomeClick}\n                            className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                        >\n                            На главную\n                        </button>\n                    </div>\n                {/*</div>*/}\n            </div>\n        </div>\n    );\n}\n\nexport default QuestionPage;\n"
  },
  {
    "path": "frontend/src/pages/HomePage.tsx",
    "content": "import React from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {getMe} from '../services/api';\nimport {useAuth} from '../contexts/auth';\nimport {ReferralGlowingButton} from \"../components/ReferralButton\";\n\nfunction HomePage() {\n    const navigate = useNavigate();\n    const {isModerator, loading} = useAuth();\n\n    window.onerror = (message, source, lineno, colno, error) => {\n        if (typeof message === \"string\" && message.includes(\"window.TelegramGameProxy.receiveEvent\")) {\n            return true;\n        }\n        console.log(typeof message, typeof message === \"string\");\n        return false;\n    };\n\n\n    const handleAboutClick = () => navigate('/about');\n    const handleInstructionClick = () => navigate('/instruction', {state: {backRoute: '/'}});\n    const handleComplaintsClick = () => {\n        window.open('https://t.me/Premiumcashb/1153', '_blank');\n    };\n    const handleMyOrdersClick = async () => {\n        try {\n            await getMe();\n            navigate(`/user/orders`);\n        } catch (error) {\n            console.error('Ошибка получения данных пользователя:', error);\n        }\n    };\n    const handleSellerClick = () => {\n        navigate(`/seller-cabinet`);\n    };\n    const handleCatalogClick = () => navigate(`/catalog`);\n    const handleReferralClick = () => navigate('/invite');\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank');\n    };\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 p-6 font-body\">\n            <div className=\"grid grid-cols-3 gap-4 mb-8\">\n                <div\n                    onClick={handleAboutClick}\n                    className=\"bg-white border border-darkGray text-center rounded-md shadow-sm p-2 text-xs font-medium cursor-pointer flex flex-col items-center justify-center\"\n                >\n                    <img src=\"/icons/about.png\" alt=\"О сервисе\" className=\"w-4 h-4 mb-1\"/>\n                    <span className=\"font-body\">О сервисе</span> {/* заголовок */}\n                </div>\n\n                <div\n                    onClick={handleInstructionClick}\n                    className=\"bg-white border border-darkGray text-center rounded-md shadow-sm p-2 text-xs font-medium cursor-pointer flex flex-col items-center justify-center\"\n                >\n                    <img src=\"/icons/instruction.png\" alt=\"Инструкция\" className=\"w-4 h-4 mb-1\"/>\n                    <span className=\"font-body\">Инструкция</span>\n                </div>\n\n                <div\n                    onClick={handleComplaintsClick}\n                    className=\"bg-white border border-darkGray text-center rounded-md shadow-sm p-2 text-xs font-medium cursor-pointer flex flex-col items-center justify-center\"\n                >\n                    <img src=\"/icons/book.png\" alt=\"Книга жалоб\" className=\"w-4 h-4 mb-1\"/>\n                    <span className=\"font-body\">Книга жалоб</span>\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4 mb-8\">\n                <div className=\"flex flex-col gap-4 col-span-2\">\n                    <div\n                        onClick={handleMyOrdersClick}\n                        className=\"bg-white border-2 border-brand rounded-lg shadow-sm p-4 text-base font-bold cursor-pointer\"\n                    >\n                        <div className=\"flex items-center justify-between\">\n                            <div className=\"flex flex-col\">\n                                {/* заголовок карточки */}\n                                <span className=\"font-heading\">Мои покупки</span>\n                                <span className=\"text-xs font-normal text-gray-500\">\n                                    Список ваших покупок\n                                </span>\n                            </div>\n                            <img\n                                src=\"/icons/small_arrow.png\"\n                                alt=\"arrow\"\n                                className=\"w-5 h-5\"\n                            />\n                        </div>\n                    </div>\n\n                    <div\n                        onClick={handleSellerClick}\n                        className=\"bg-white border-2 border-brand rounded-lg shadow-sm p-4 text-base font-bold cursor-pointer\"\n                    >\n                        <div className=\"flex items-center justify-between\">\n                            <div className=\"flex flex-col\">\n                                <span className=\"font-heading\">Кабинет продавца</span>\n                                <span className=\"text-xs font-normal text-gray-500\">\n                                    Для продавцов\n                                </span>\n                            </div>\n                            <img\n                                src=\"/icons/small_arrow.png\"\n                                alt=\"arrow\"\n                                className=\"w-5 h-5\"\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div\n                    onClick={handleCatalogClick}\n                    className=\"bg-brand rounded-lg px-1 py-4 text-sm font-semibold text-white cursor-pointer relative\"\n                >\n                    <span className=\"block text-left font-heading\">\n                        Каталог актуальных товаров\n                    </span>\n                    <img\n                        src=\"/icons/arrow.png\"\n                        alt=\"arrow\"\n                        className=\"w-11 h-11 absolute top-28 right-2\"\n                    />\n                </div>\n            </div>\n\n            {/*<div*/}\n            {/*    onClick={handleReferralClick}*/}\n            {/*    className=\"bg-white border border-brand rounded-full shadow-sm p-4 mb-4 text-lg font-semibold cursor-pointer text-center\"*/}\n            {/*>*/}\n            {/*    <span className=\"font-body\">Реферальная программа</span>*/}\n            {/*</div>*/}\n\n            {/* Центрируем и задаём форму как у «Помодерируем?» */}\n\n            <div className=\"flex justify-center\">\n                <ReferralGlowingButton\n                    onClick={handleReferralClick}\n                    className=\"\n                      bg-white border border-brand\n                      rounded-full shadow-sm p-4 mb-6\n                      text-sm font-semibold text-center\n                      cursor-pointer w-full\"\n                />\n            </div>\n\n            {!loading && isModerator && (\n                <div\n                    onClick={() => navigate('/moderator')}\n                    className=\"\n                    bg-white border border-brand\n                     rounded-full shadow-sm p-4 mb-4\n                      text-sm font-semibold cursor-pointer text-center\"\n                >\n                    <span className=\"font-body\">Помодерируем?</span>\n                </div>\n            )}\n\n            <div className=\"flex flex-col gap-4\">\n                <div\n                    onClick={handleChannelClick}\n                    className=\"bg-white border border-brand rounded-xl shadow-sm p-4 text-sm font-semibold cursor-pointer flex items-center gap-3\"\n                >\n                    <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-7 h-7\"/>\n                    <div className=\"flex flex-col\">\n                        <span className=\"font-body\">@Premiumcash1</span>\n                        <span className=\"text-xs text-gray-500\">Подпишись на канал</span>\n                    </div>\n                    <img\n                        src=\"/icons/small_arrow.png\"\n                        alt=\"arrow\"\n                        className=\"w-5 h-5 ml-auto\"\n                    />\n                </div>\n\n                <div\n                    onClick={handleSupportClick}\n                    className=\"bg-white border border-brand rounded-xl shadow-sm p-4 text-sm font-semibold cursor-pointer flex items-center gap-3\"\n                >\n                    <img src=\"/icons/support.png\" alt=\"Support\" className=\"w-7 h-7\"/>\n                    <div className=\"flex flex-col\">\n                        <span className=\"font-body\">Техподдержка</span>\n                        <span className=\"text-xs text-gray-500\">\n                            Оперативно ответим на все вопросы\n                        </span>\n                    </div>\n                    <img\n                        src=\"/icons/small_arrow.png\"\n                        alt=\"arrow\"\n                        className=\"w-5 h-5 ml-auto\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default HomePage;\n"
  },
  {
    "path": "frontend/src/pages/moderator/PushAdminPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {deletePush, fetchPushes} from '../../services/api';\nimport {useNavigate} from 'react-router-dom';\nimport {on} from '@telegram-apps/sdk';\n\ninterface Push {\n    id: string;\n    title: string;\n    text: string;\n    button_text?: string;\n    button_link?: string;\n}\n\nconst PushAdminPage: React.FC = () => {\n    const navigate = useNavigate();\n\n    const [pushes, setPushes] = useState<Push[]>([]);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string>('');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/moderator');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    // Load pushes on mount\n    useEffect(() => {\n        const loadPushes = async () => {\n            setIsLoading(true);\n            try {\n                const data = await fetchPushes();\n                setPushes(data);\n            } catch (err) {\n                setError('Ошибка загрузки рассылок');\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        loadPushes();\n    }, []);\n\n    const handleDeletePush = async (id: string, event: React.MouseEvent) => {\n        event.stopPropagation(); // Prevent row click\n        if (!window.confirm('Вы действительно хотите удалить эту рассылку?')) return;\n        try {\n            await deletePush(id);\n            const updatedPushes = await fetchPushes();\n            setPushes(updatedPushes);\n            alert('Рассылка удалена');\n        } catch (err) {\n            alert('Ошибка удаления рассылки');\n            console.error(err);\n        }\n    };\n\n    return (\n        <div className=\"p-4\">\n            <h1 className=\"text-2xl font-bold mb-4 text-brand\">Управление рассылками</h1>\n            {isLoading ? (\n                <div>Загрузка...</div>\n            ) : error ? (\n                <div className=\"text-red-500\">{error}</div>\n            ) : (\n                <>\n                    <table className=\"min-w-full table-fixed border border-darkGray\">\n                        <thead className=\"bg-brandlight\">\n                        <tr>\n                            <th className=\"border border-darkGray p-2 text-left text-base\">Название</th>\n                            <th className=\"border border-darkGray p-2 text-left text-base\">Текст рассылки</th>\n                            <th className=\"border border-darkGray p-2 text-left text-base\">Кнопка</th>\n                            <th className=\"border border-darkGray p-2 w-12\"></th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {pushes.map((push) => (\n                            <tr\n                                key={push.id}\n                                className=\"cursor-pointer hover:bg-gray-200-50\"\n                                onClick={() => navigate(`/moderator/pushes/${push.id}`)}\n                            >\n                                <td className=\"border border-darkGray p-2 text-base\">{push.title}</td>\n                                <td className=\"border border-darkGray p-2 text-base\">{push.text}</td>\n                                <td className=\"border border-darkGray p-2 text-base\">\n                                    {push.button_text ? (\n                                        <span>{push.button_text}</span>\n                                    ) : (\n                                        '—'\n                                    )}\n                                </td>\n                                <td className=\"border border-darkGray p-2 text-center w-12\">\n                                    <img\n                                        src=\"/icons/trash.png\"\n                                        alt=\"Удалить\"\n                                        className=\"w-4 h-4 cursor-pointer\"\n                                        onClick={(e) => handleDeletePush(push.id, e)}\n                                    />\n                                </td>\n                            </tr>\n                        ))}\n                        {pushes.length === 0 && (\n                            <tr>\n                                <td colSpan={4} className=\"border border-darkGray p-2 text-center\">\n                                    Нет созданных рассылок.\n                                </td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n\n                    <div className=\"fixed bottom-4 right-4\">\n                        <button\n                            onClick={() => navigate(`/moderator/pushes/new`)}\n                            className=\"flex items-center justify-center w-12 h-12 rounded-full bg-green-500 text-white shadow-xl hover:bg-green-600\"\n                            title=\"Добавить новую рассылку\"\n                        >\n                            +\n                        </button>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default PushAdminPage;\n"
  },
  {
    "path": "frontend/src/pages/moderator/PushDetailsPage.tsx",
    "content": "import React, {useEffect, useRef, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {on} from '@telegram-apps/sdk';\nimport {\n    activatePush,\n    deletePush,\n    getBannedUsers,\n    getClients,\n    getModerators,\n    getPush,\n    getSellers,\n    getUsers,\n} from '../../services/api';\nimport GetUploadLink from '../../components/GetUploadLink';\n\ninterface Push {\n    id: string;\n    title: string;\n    text: string;\n    image_path?: string;\n    button_text?: string;\n    button_link?: string;\n    creator: User;\n}\n\ninterface User {\n    id: string;\n    name: string;\n    nickname: string;\n}\n\nconst PushDetailsPage: React.FC = () => {\n    const {pushId} = useParams<{ pushId: string }>();\n    const navigate = useNavigate();\n\n    const [push, setPush] = useState<Push | null>(null);\n    const [filter, setFilter] = useState<string>('all');\n    const [users, setUsers] = useState<User[]>([]);\n    const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n    const [loadingUsers, setLoadingUsers] = useState<boolean>(false);\n    const [loadingPush, setLoadingPush] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n\n    const [actionsOpen, setActionsOpen] = useState<boolean>(false);\n    const menuRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n                setActionsOpen(false);\n            }\n        };\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/moderator/pushes');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchPushDetails = async () => {\n            if (!pushId) return;\n            setLoadingPush(true);\n            try {\n                const response = await getPush(pushId);\n                setPush(response.data);\n            } catch (err) {\n                console.error('Ошибка загрузки рассылки:', err);\n                setError('Ошибка загрузки рассылки');\n            } finally {\n                setLoadingPush(false);\n            }\n        };\n        fetchPushDetails();\n    }, [pushId]);\n\n    const fetchUsers = async () => {\n        setLoadingUsers(true);\n        try {\n            let response;\n            switch (filter) {\n                case 'moderators':\n                    response = await getModerators();\n                    break;\n                case 'sellers':\n                    response = await getSellers();\n                    break;\n                case 'banned':\n                    response = await getBannedUsers();\n                    break;\n                case 'clients':\n                    response = await getClients();\n                    break;\n                case 'all':\n                default:\n                    response = await getUsers();\n                    break;\n            }\n            setUsers(response.data);\n        } catch (err) {\n            console.error('Ошибка при получении пользователей:', err);\n            setError('Ошибка загрузки пользователей');\n        } finally {\n            setLoadingUsers(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchUsers();\n    }, [filter]);\n\n    const handleUserSelect = (userId: string) => {\n        setSelectedUserIds((prev) =>\n            prev.includes(userId) ? prev.filter((id) => id !== userId) : [...prev, userId]\n        );\n    };\n\n    const handleActivatePush = async () => {\n        if (!pushId) return;\n        try {\n            const data = {userIds: selectedUserIds};\n            await activatePush(pushId, data);\n            alert('Push успешно активирован!');\n        } catch (err) {\n            console.error('Ошибка активации push:', err);\n            alert('Ошибка активации push');\n        }\n    };\n\n    const handleDeletePush = async () => {\n        if (!pushId) return;\n        if (!window.confirm('Вы действительно хотите удалить рассылку?')) return;\n        try {\n            await deletePush(pushId);\n            alert('Рассылка удалена');\n            navigate('/moderator/pushes');\n        } catch (err) {\n            console.error('Ошибка удаления push:', err);\n            alert('Ошибка удаления push');\n        }\n    };\n\n    const handleUpdatePush = () => {\n        if (!pushId) return;\n        navigate(`/moderator/pushes/${pushId}/edit`);\n    };\n\n    return (\n        <div className=\"p-4\">\n            <h1 className=\"text-2xl font-bold mb-4 text-brand\">Детали рассылки Push</h1>\n            {error && <div className=\"text-red-500 mb-4\">{error}</div>}\n            {loadingPush ? (\n                <div>Загрузка рассылки...</div>\n            ) : push ? (\n                <div className=\"bg-brandlight border border-darkGray p-6 rounded mb-6 shadow relative\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                        <div>\n                            <h2 className=\"text-xl font-semibold\">{push.title}</h2>\n                            <p className=\"mt-2\">{push.text}</p>\n                            {push.image_path && (\n                                <img\n                                    src={GetUploadLink(push.image_path)}\n                                    alt=\"Изображение рассылки\"\n                                    className=\"mt-4 rounded\"\n                                />\n                            )}\n                            {push.button_text && (\n                                <div className=\"mt-4\">\n                                    <strong>Кнопка: </strong>\n                                    {push.button_link ? (\n                                        <a\n                                            href={push.button_link}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                            className=\"text-blue-600 hover:underline\"\n                                        >\n                                            {push.button_text}\n                                        </a>\n                                    ) : (\n                                        <span>{push.button_text}</span>\n                                    )}\n                                </div>\n                            )}\n                        </div>\n                        <div ref={menuRef} className=\"relative\">\n                            <img\n                                src=\"/icons/menu.png\"\n                                alt=\"Меню\"\n                                className=\"w-6 h-6 cursor-pointer\"\n                                onClick={() => setActionsOpen((prev) => !prev)}\n                            />\n                            {actionsOpen && (\n                                <div\n                                    className=\"absolute right-0 mt-2 w-32 bg-white border border-darkGray rounded shadow z-10\">\n                                    <button\n                                        onClick={() => {\n                                            setActionsOpen(false);\n                                            handleUpdatePush();\n                                        }}\n                                        className=\"w-full text-left px-2 py-1 text-sm hover:bg-brandlight\"\n                                    >\n                                        Редактировать\n                                    </button>\n                                    <button\n                                        onClick={() => {\n                                            setActionsOpen(false);\n                                            handleDeletePush();\n                                        }}\n                                        className=\"w-full text-left px-2 py-1 text-sm hover:bg-brandlight text-red-500\"\n                                    >\n                                        Удалить\n                                    </button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <div>Рассылка не найдена.</div>\n            )}\n\n            <div className=\"mb-4 flex items-center gap-4\">\n                <label className=\"font-semibold\">Фильтр пользователей:</label>\n                <select\n                    value={filter}\n                    onChange={(e) => setFilter(e.target.value)}\n                    className=\"border p-2 rounded\"\n                >\n                    <option value=\"all\">Все</option>\n                    <option value=\"moderators\">Модераторы</option>\n                    <option value=\"sellers\">Продавцы</option>\n                    <option value=\"banned\">Забаненные</option>\n                    <option value=\"clients\">Клиенты</option>\n                </select>\n            </div>\n\n            <div className=\"bg-white border border-darkGray rounded shadow overflow-auto\">\n                <table className=\"min-w-full\">\n                    <thead className=\"bg-gray-200-100\">\n                    <tr>\n                        <th className=\"p-2 text-left\">Выбрать</th>\n                        <th className=\"p-2 text-left\">Никнейм</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {loadingUsers ? (\n                        <tr>\n                            <td className=\"p-2\" colSpan={2}>\n                                Загрузка пользователей...\n                            </td>\n                        </tr>\n                    ) : users.length > 0 ? (\n                        users.map((user) => (\n                            <tr key={user.id} className=\"hover:bg-gray-200-50\">\n                                <td className=\"p-2\">\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={selectedUserIds.includes(user.id)}\n                                        onChange={() => handleUserSelect(user.id)}\n                                        className=\"cursor-pointer\"\n                                    />\n                                </td>\n                                <td className=\"p-2\">{user.nickname}</td>\n                            </tr>\n                        ))\n                    ) : (\n                        <tr>\n                            <td className=\"p-2\" colSpan={2}>\n                                Пользователи не найдены.\n                            </td>\n                        </tr>\n                    )}\n                    </tbody>\n                </table>\n            </div>\n\n            <div className=\"mt-6 flex justify-center\">\n                <button\n                    onClick={handleActivatePush}\n                    className=\"px-6 py-3 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n                    disabled={selectedUserIds.length === 0}\n                >\n                    Отправить push\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PushDetailsPage;\n"
  },
  {
    "path": "frontend/src/pages/moderator/ModeratorUserPage.tsx",
    "content": "import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n    getUsers,\n    getModerators,\n    getSellers,\n    getBannedUsers, getUser,\n    // banUser,\n    // unbanUser,\n    // promoteUser,\n    // demoteUser,\n    // increaseSellerBalance\n} from '../../services/api';\nimport { UserRole } from '../../enums';\nimport { on } from '@telegram-apps/sdk';\nimport { useAuth } from '../../contexts/auth';\nimport CopyableUuid from '../../components/CopyableUuid';\n\ninterface User {\n    id: string;\n    telegram_id: bigint;\n    nickname: string;\n    role: UserRole;\n    is_banned: boolean;\n    is_seller: boolean;\n    balance: number;\n    invited_by?: string;\n    inviter_tg?: string;\n}\n\ntype FilterType = 'all' | 'moderators' | 'sellers' | 'banned';\n\nfunction ModeratorUsersPage() {\n    const [users, setUsers] = useState<User[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [filter, setFilter] = useState<FilterType>('all');\n    const { isAdmin } = useAuth();\n    const navigate = useNavigate();\n\n    const [searchQuery, setSearchQuery] = useState('');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/moderator');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const fetchUsers = async () => {\n        setLoading(true);\n        try {\n            let response;\n            switch (filter) {\n                case 'moderators':\n                    response = await getModerators();\n                    break;\n                case 'sellers':\n                    response = await getSellers();\n                    break;\n                case 'banned':\n                    response = await getBannedUsers();\n                    break;\n                case 'all':\n                default:\n                    response = await getUsers();\n                    break;\n            }\n\n            // rawUsers — это список сразу после API\n            const rawUsers: User[] = response.data;\n\n            // теперь «обогащаем» каждого: если есть invited_by, достаём inviter_tg\n            const enriched: User[] = await Promise.all(\n                rawUsers.map(async u => {\n                    if (!u.invited_by) return u;\n                    try {\n                        const res = await getUser(u.invited_by);\n                        return {\n                            ...u,\n                            inviter_tg: res.data.nickname,\n                        };\n                    } catch {\n                        // если по какой-то причине не удалось — возвращаем без inviter_tg\n                        return u;\n                    }\n                })\n            );\n\n            setUsers(enriched);\n        } catch (error) {\n            console.error('Ошибка при получении пользователей:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n\n    useEffect(() => {\n        fetchUsers();\n    }, [filter]);\n\n\n    // Фильтруем пользователей по нику\n    const filteredUsers = users.filter(user =>\n        user.nickname.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <div className=\"bg-gray-200 h-screen p-2\">\n            <h1 className=\"text-xl font-bold mb-3 text-center\">\n                Управление пользователями\n            </h1>\n\n            {/* Блок с поиском и фильтром */}\n            <div className=\"mb-4 flex gap-2 bg-white p-4 rounded shadow\">\n                <div className=\"flex-1\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Поиск по нику\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"w-full border border-darkGray rounded p-2 text-sm\"\n                    />\n                </div>\n                <div className=\"flex-1 flex items-center\">\n                    <label\n                        htmlFor=\"userFilter\"\n                        className=\"mr-2 text-sm font-medium whitespace-nowrap\"\n                    >\n                        Фильтр:\n                    </label>\n                    <select\n                        id=\"userFilter\"\n                        value={filter}\n                        onChange={(e) => setFilter(e.target.value as FilterType)}\n                        className=\"w-full border p-2 rounded text-sm\"\n                    >\n                        <option value=\"all\">Все пользователи</option>\n                        <option value=\"moderators\">Модераторы</option>\n                        <option value=\"sellers\">Продавцы</option>\n                        <option value=\"banned\">Забаненные</option>\n                    </select>\n                </div>\n            </div>\n\n            {loading ? (\n                <p className=\"text-center text-xs\">Загрузка...</p>\n            ) : (\n                <div className=\"w-full overflow-x-auto\">\n                    <table className=\"w-full table-auto divide-y divide-gray-200 text-[8px]\">\n                        <thead className=\"bg-brand text-white text-center\">\n                        <tr>\n                            <th className=\"py-1 px-1\">ID</th>\n                            <th className=\"py-1 px-1\">Telegram ID</th>\n                            <th className=\"py-1 px-1\">Никнейм</th>\n                            <th className=\"py-1 px-1\">Роль</th>\n                            <th className=\"py-1 px-1\">Забанен</th>\n                            <th className=\"py-1 px-1\">Продавец</th>\n                            <th className=\"py-1 px-1\">Баланс</th>\n                            <th className=\"py-1 px-1\">Пригласивший</th>\n                        </tr>\n                        </thead>\n                        <tbody className=\"bg-white divide-y divide-gray-200 text-center\">\n                        {filteredUsers.map(user => (\n                            <tr\n                                key={user.id}\n                                className=\"hover:bg-gray-200-50 cursor-pointer\"\n                                onClick={() => navigate(`/moderator/users/${user.id}`)}\n                            >\n                                <td className=\"px-1 py-1 text-[5px]\">\n                                    <CopyableUuid uuid={user.id} />\n                                </td>\n                                <td className=\"px-1 py-1 text-[7px]\">\n                                    {user.telegram_id.toString()}\n                                </td>\n                                <td className=\"px-1 py-1\">\n                                    <a\n                                        href={`https://t.me/${user.nickname}`}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        className=\"text-blue-500 hover:underline\"\n                                        onClick={e => e.stopPropagation()}\n                                    >\n                                        {user.nickname}\n                                    </a>\n                                </td>\n                                <td className=\"px-1 py-1\">{user.role}</td>\n                                <td className=\"px-1 py-1\">{user.is_banned ? \"Да\" : \"Нет\"}</td>\n                                <td className=\"px-1 py-1\">{user.is_seller ? \"Да\" : \"Нет\"}</td>\n                                <td className=\"px-1 py-1\">{user.balance || 0}</td>\n                                <td className=\"px-1 py-1 text-[7px]\">\n                                    {user.invited_by && user.inviter_tg ? (\n                                        <a\n                                            href={`https://t.me/${user.inviter_tg}`}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                            className=\"text-blue-500 hover:underline\"\n                                            onClick={e => e.stopPropagation()}\n                                        >\n                                            @{user.inviter_tg}\n                                        </a>\n                                    ) : (\n                                        <span className=\"text-gray-400\">—</span>\n                                    )}\n                                </td>\n\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            )}\n\n        </div>\n    );\n}\n\nexport default ModeratorUsersPage;\n"
  },
  {
    "path": "frontend/src/pages/moderator/PushFormPage.tsx",
    "content": "import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { createPush, updatePush, getPush } from '../../services/api';\nimport { on } from \"@telegram-apps/sdk\";\n\ninterface Push {\n    id: string;\n    title: string;\n    text: string;\n}\n\nconst PushFormPage: React.FC = () => {\n    const { pushId } = useParams<{ pushId?: string }>();\n    const isEditMode = Boolean(pushId);\n    const navigate = useNavigate();\n\n    const [title, setTitle] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [imageFile, setImageFile] = useState<File | null>(null);\n    const [buttonText, setButtonText] = useState<string>('');\n    const [buttonLink, setButtonLink] = useState<string>('');\n\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            if (isEditMode && pushId) {\n                navigate(`/moderator/pushes/${pushId}`);\n            } else {\n                navigate(`/moderator/pushes`);\n            }\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate, isEditMode, pushId]);\n\n    useEffect(() => {\n        if (isEditMode && pushId) {\n            setLoading(true);\n            getPush(pushId)\n                .then((response) => {\n                    const pushData = response.data as Push;\n                    setTitle(pushData.title);\n                    setText(pushData.text);\n\n                    if ((response.data as any).button_text) {\n                        setButtonText((response.data as any).button_text);\n                    }\n                    if ((response.data as any).button_link) {\n                        setButtonLink((response.data as any).button_link);\n                    }\n                })\n                .catch((err) => {\n                    console.error('Ошибка получения рассылки:', err);\n                    setError('Не удалось загрузить данные рассылки');\n                })\n                .finally(() => setLoading(false));\n        }\n    }, [isEditMode, pushId]);\n\n    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            setImageFile(e.target.files[0]);\n        }\n    };\n\n    const handleFormSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!title.trim() || !text.trim()) {\n            alert('Пожалуйста, заполните все обязательные поля.');\n            return;\n        }\n        setLoading(true);\n        try {\n            const formData = new FormData();\n            formData.append('title', title);\n            formData.append('text', text);\n            if (imageFile) {\n                formData.append('image', imageFile);\n            }\n            formData.append('button_text', buttonText);\n            formData.append('button_link', buttonLink);\n\n            if (isEditMode && pushId) {\n                await updatePush(pushId, formData);\n                alert('Рассылка успешно обновлена!');\n                navigate(`/moderator/pushes/${pushId}`);\n            } else {\n                await createPush(formData);\n                alert('Рассылка успешно создана!');\n                navigate('/moderator/pushes');\n            }\n        } catch (err) {\n            console.error('Ошибка отправки формы:', err);\n            setError('Ошибка сохранения данных. Попробуйте еще раз.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"p-4 max-w-lg mx-auto bg-gray-200-100 rounded shadow\">\n            <h1 className=\"text-2xl font-bold mb-4\">\n                {isEditMode ? 'Редактировать рассылку' : 'Создать новую рассылку'}\n            </h1>\n            {error && <div className=\"text-red-500 mb-4\">{error}</div>}\n            {loading ? (\n                <div>Загрузка...</div>\n            ) : (\n                <form onSubmit={handleFormSubmit} className=\"space-y-4\">\n                    <div>\n                        <label htmlFor=\"title\" className=\"block text-sm font-medium mb-1\">\n                            Название\n                        </label>\n                        <input\n                            id=\"title\"\n                            type=\"text\"\n                            value={title}\n                            onChange={(e) => setTitle(e.target.value)}\n                            className=\"w-full p-2 border border-darkGray rounded\"\n                            required\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"text\" className=\"block text-sm font-medium mb-1\">\n                            Текст рассылки\n                        </label>\n                        <textarea\n                            id=\"text\"\n                            value={text}\n                            onChange={(e) => setText(e.target.value)}\n                            className=\"w-full p-2 border border-darkGray rounded\"\n                            rows={4}\n                            required\n                        ></textarea>\n                    </div>\n                    <div>\n                        <label htmlFor=\"image\" className=\"block text-sm font-medium mb-1\">\n                            Изображение (опционально)\n                        </label>\n                        <input\n                            id=\"image\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleImageChange}\n                            className=\"w-full\"\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"buttonText\" className=\"block text-sm font-medium mb-1\">\n                            Текст кнопки (опционально)\n                        </label>\n                        <input\n                            id=\"buttonText\"\n                            type=\"text\"\n                            value={buttonText}\n                            onChange={(e) => setButtonText(e.target.value)}\n                            placeholder=\"Введите текст кнопки\"\n                            className=\"w-full p-2 border border-darkGray rounded\"\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"buttonLink\" className=\"block text-sm font-medium mb-1\">\n                            Ссылка для кнопки (опционально)\n                        </label>\n                        <input\n                            id=\"buttonLink\"\n                            type=\"text\"\n                            value={buttonLink}\n                            onChange={(e) => setButtonLink(e.target.value)}\n                            placeholder=\"Введите URL для кнопки\"\n                            className=\"w-full p-2 border border-darkGray rounded\"\n                        />\n                    </div>\n                    <div className=\"flex justify-end space-x-2\">\n                        <button\n                            type=\"button\"\n                            onClick={() => navigate(isEditMode && pushId ? `/moderator/pushes/${pushId}` : '/moderator/pushes')}\n                            className=\"px-4 py-2 border border-darkGray rounded\"\n                        >\n                            Отмена\n                        </button>\n                        <button\n                            type=\"submit\"\n                            className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                        >\n                            {isEditMode ? 'Сохранить изменения' : 'Создать рассылку'}\n                        </button>\n                    </div>\n                </form>\n            )}\n        </div>\n    );\n};\n\nexport default PushFormPage;\n"
  },
  {
    "path": "frontend/src/pages/moderator/ModeratorDashboard.tsx",
    "content": "import React, {useEffect} from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {on} from \"@telegram-apps/sdk\";\n\nfunction ModeratorDashboard() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const handleUsersClick = () => navigate('/moderator/users');\n    const handleProductsClick = () => navigate('/moderator/products');\n    const handlePushClick = () => navigate('/moderator/pushes');\n    return (\n        <div className=\"min-h-screen bg-gray-200 p-6\">\n            <h1 className=\"text-xl font-bold mb-4\">Панель модератора</h1>\n            <div className=\"grid grid-cols-2 gap-4\">\n                <div\n                    onClick={handleUsersClick}\n                    className=\"bg-white border border-brand text-center rounded-md shadow-sm p-4 cursor-pointer\"\n                >\n                    <span>Управление пользователями</span>\n                </div>\n                <div\n                    onClick={handleProductsClick}\n                    className=\"bg-white border border-brand text-center rounded-md shadow-sm p-4 cursor-pointer\"\n                >\n                    <span>Проверка товаров</span>\n                </div>\n                <div\n                    onClick={handlePushClick}\n                    className=\"bg-white border border-brand text-center rounded-md shadow-sm p-4 cursor-pointer\"\n                >\n                    <span>Управление рассылками</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ModeratorDashboard;\n"
  },
  {
    "path": "frontend/src/pages/moderator/ModeratorProductReviewPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getModeratorProductById, reviewProduct} from '../../services/api';\nimport {ProductStatus} from '../../enums';\nimport {on} from \"@telegram-apps/sdk\";\nimport GetUploadLink from \"../../components/GetUploadLink\";\n\nfunction ModeratorProductReviewPage() {\n    const {productId} = useParams<{ productId: string }>();\n    const [product, setProduct] = useState<any>(null);\n    const [loading, setLoading] = useState(false);\n    const [status, setStatus] = useState('');\n    const [commentModerator, setCommentModerator] = useState('');\n    const [commentSeller, setCommentSeller] = useState('');\n    const navigate = useNavigate();\n\n    const fetchProduct = async () => {\n        setLoading(true);\n        try {\n            const response = await getModeratorProductById(productId!);\n            setProduct(response.data);\n            setStatus(response.data.status);\n        } catch (error) {\n            console.error('Ошибка при получении продукта:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/moderator/products');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    useEffect(() => {\n        fetchProduct();\n    }, [productId]);\n\n    const handleSubmit = async () => {\n        try {\n            const payload = {\n                    status,\n                    commentModerator,\n                    commentSeller\n            };\n            await reviewProduct(productId!, payload);\n            alert('Проверка продукта обновлена!');\n            navigate('/moderator/products');\n        } catch (error) {\n            console.error('Ошибка при обновлении проверки продукта:', error);\n        }\n    };\n\n    if (loading || !product) return <p>Загрузка...</p>;\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 p-6\">\n            <h1 className=\"text-2xl font-bold mb-6 text-center\">\n                Проверка продукта: {product.name}\n            </h1>\n\n            <div className=\"bg-white shadow rounded p-6 mb-6\">\n                <h2 className=\"text-lg font-semibold mb-4\">Информация о продукте</h2>\n                {product.image_path && (\n                    <img\n                        src={GetUploadLink(product.image_path)}\n                        alt={product.name}\n                        className=\"w-40 h-40 object-cover mb-6\"\n                    />\n                )}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <p><strong>ID:</strong> {product.id}</p>\n                    <p><strong>Название:</strong> {product.name}</p>\n                    <p><strong>Бренд:</strong> {product.brand}</p>\n                    <p><strong>Артикул:</strong> {product.article}</p>\n                    <p><strong>Категория:</strong> {product.category}</p>\n                    <p><strong>Ключевое слово:</strong> {product.key_word}</p>\n                    <p><strong>Общее количество выкупов:</strong> {product.general_repurchases}</p>\n                    <p><strong>Ежедневные выкупы:</strong> {product.daily_repurchases}</p>\n                    <p><strong>Цена:</strong> {product.price}</p>\n                    <p><strong>Цена WB:</strong> {product.wb_price}</p>\n                    <p><strong>Телеграм:</strong> {product.tg}</p>\n                    <p><strong>Время оплаты:</strong> {product.payment_time}</p>\n                    <p><strong>Требования к отзыву:</strong> {product.review_requirements}</p>\n                    <p><strong>ID продавца:</strong> {product.seller_id}</p>\n                    <p><strong>Статус:</strong> {product.status}</p>\n                    <p><strong>Создано:</strong> {new Date(product.created_at).toLocaleString()}</p>\n                    <p><strong>Обновлено:</strong> {new Date(product.updated_at).toLocaleString()}</p>\n                </div>\n            </div>\n\n            {product.moderator_reviews && product.moderator_reviews.length > 0 && (\n                <div className=\"bg-white shadow rounded p-6 mb-6\">\n                    <h3 className=\"text-xl font-bold mb-4\">Комментарии модераторов</h3>\n                    {product.moderator_reviews.map((review: any) => (\n                        <div key={review.id} className=\"border p-4 mb-4 rounded\">\n                            {review.comment_to_moderator && (\n                                <div className=\"bg-brandlight p-2 rounded mb-2\">\n                                    <p>\n                                        <strong>Комментарий для модераторов:</strong> {review.comment_to_moderator}\n                                    </p>\n                                </div>\n                            )}\n                            {review.comment_to_seller && (\n                                <div className=\"bg-brandlight p-2 rounded mb-2\">\n                                    <p>\n                                        <strong>Комментарий для продавца:</strong> {review.comment_to_seller}\n                                    </p>\n                                </div>\n                            )}\n                            <p className=\"text-xs text-gray-500\">\n                                Дата: {new Date(review.created_at).toLocaleString()}\n                            </p>\n                        </div>\n                    ))}\n                </div>\n            )}\n\n\n            <div className=\"border-l-4 border-blue-500 pl-4\">\n                <h3 className=\"text-lg font-semibold mb-4\">Детали проверки</h3>\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2\">Статус:</label>\n                    <select\n                        value={status}\n                        onChange={(e) => setStatus(e.target.value)}\n                        className=\"border p-2 rounded w-full\"\n                    >\n                        {Object.values(ProductStatus).map((value) => (\n                            <option key={value} value={value}>\n                                {value.charAt(0).toUpperCase() + value.slice(1)}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2\">Комментарий (между модераторами):</label>\n                    <textarea\n                        value={commentModerator}\n                        onChange={(e) => setCommentModerator(e.target.value)}\n                        className=\"border p-2 rounded w-full\"\n                        rows={3}\n                    ></textarea>\n                </div>\n\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2\">Комментарий для продавца:</label>\n                    <textarea\n                        value={commentSeller}\n                        onChange={(e) => setCommentSeller(e.target.value)}\n                        className=\"border p-2 rounded w-full\"\n                        rows={3}\n                    ></textarea>\n                </div>\n\n                <button\n                    onClick={handleSubmit}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded-lg\"\n                >\n                    Отправить\n                </button>\n            </div>¬\n        </div>\n    );\n}\n\nexport default ModeratorProductReviewPage;\n"
  },
  {
    "path": "frontend/src/pages/moderator/ModeratorProductsPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {getProductsToReview} from '../../services/api';\nimport {useNavigate} from 'react-router-dom';\nimport {on} from \"@telegram-apps/sdk\";\nimport {ProductStatus} from \"../../enums\";\n\ninterface ModeratorReview {\n    id: string;\n    moderator_id: string;\n    product_id: string;\n    comment_to_seller?: string;\n    comment_to_moderator?: string;\n    status_before: ProductStatus;\n    status_after: ProductStatus;\n    created_at: string;\n    updated_at: string;\n}\n\ninterface Product {\n    id: string;\n    name: string;\n    price: number;\n    status: ProductStatus;\n    moderator_reviews?: ModeratorReview[];\n}\n\nfunction ModeratorProductsPage() {\n    const [products, setProducts] = useState<Product[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'created' | 'rejected' | 'archived'>('all');\n    const [activeTab, setActiveTab] = useState<'pending' | 'reviewed'>('pending');\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/moderator');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    const fetchProducts = async () => {\n        setLoading(true);\n        try {\n            const response = await getProductsToReview();\n            setProducts(response.data);\n            console.log(response.data);\n        } catch (error) {\n            console.error('Ошибка при получении продуктов:', error);\n            setError('Не удалось загрузить продукты.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchProducts();\n    }, []);\n\n    const pendingProducts = products.filter(product =>\n        product.status.toLowerCase() === ProductStatus.CREATED.toLowerCase() ||\n        product.status.toLowerCase() === ProductStatus.DISABLED.toLowerCase()\n    );\n    const reviewedProducts = products.filter(product =>\n        product.status.toLowerCase() === ProductStatus.ACTIVE.toLowerCase() ||\n        product.status.toLowerCase() === ProductStatus.REJECTED.toLowerCase() ||\n        product.status.toLowerCase() === ProductStatus.ARCHIVED.toLowerCase()\n    );\n\n    const filterByStatus = (list: Product[]) => {\n        if (statusFilter === 'all') {\n            return list;\n        }\n        if (statusFilter === 'created') {\n            return list.filter(product =>\n                product.status.toLowerCase() === ProductStatus.CREATED.toLowerCase() ||\n                product.status.toLowerCase() === ProductStatus.DISABLED.toLowerCase()\n            );\n        }\n        return list.filter(product =>\n            product.status.toLowerCase() === statusFilter.toLowerCase()\n        );\n    };\n\n    const filteredPending = filterByStatus(pendingProducts);\n    const filteredReviewed = filterByStatus(reviewedProducts);\n\n    const handleReview = (productId: string) => {\n        navigate(`/moderator/products/${productId}`);\n    };\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 p-6\">\n            <h1 className=\"text-2xl font-bold mb-6 text-center\">Товары для проверки</h1>\n            <div className=\"mb-4 flex justify-end\">\n                <select\n                    value={statusFilter}\n                    onChange={(e) =>\n                        setStatusFilter(e.target.value as 'all' | 'active' | 'created' | 'rejected' | 'archived')\n                    }\n                    className=\"border border-darkGray rounded-md py-2 px-3 text-sm focus:outline-none\"\n                >\n                    <option value=\"all\">Все статусы</option>\n                    <option value=\"active\">Активный</option>\n                    <option value=\"created\">Создано / Отключено</option>\n                    <option value=\"rejected\">Отклонено</option>\n                    <option value=\"archived\">Архив</option>\n                </select>\n            </div>\n\n            <div className=\"flex border-b border-darkGray mb-6\">\n                <button\n                    className={`px-4 py-2 font-semibold ${activeTab === 'pending'\n                        ? 'border-b-2 border-blue-500 text-blue-500'\n                        : 'text-gray-500 hover:text-blue-500'\n                    }`}\n                    onClick={() => setActiveTab('pending')}\n                >\n                    Заявки для проверки\n                </button>\n                <button\n                    className={`px-4 py-2 font-semibold ${activeTab === 'reviewed'\n                        ? 'border-b-2 border-blue-500 text-blue-500'\n                        : 'text-gray-500 hover:text-blue-500'\n                    }`}\n                    onClick={() => setActiveTab('reviewed')}\n                >\n                    Проверенные заявки\n                </button>\n            </div>\n\n            {loading ? (\n                <p className=\"text-center\">Загрузка...</p>\n            ) : error ? (\n                <div className=\"p-4 bg-brandlight border border-darkGray rounded text-center\">\n                    <p className=\"text-sm text-gray-700\">{error}</p>\n                </div>\n            ) : (\n                <>\n                    {activeTab === 'pending' && (\n                        <div className=\"mb-8\">\n                            <h2 className=\"text-xl font-semibold mb-4\">Заявки для проверки</h2>\n                            {filteredPending.length === 0 ? (\n                                <p className=\"text-center text-sm text-gray-500\">Нет заявок для проверки</p>\n                            ) : (\n                                <div className=\"flex flex-col gap-2\">\n                                    {filteredPending.map(product => (\n                                        <div\n                                            key={product.id}\n                                            onClick={() => handleReview(product.id)}\n                                            className=\"relative border border-gray-200 rounded-md p-3 hover:shadow transition-shadow duration-300 cursor-pointer bg-white\"\n                                        >\n                                            {product.moderator_reviews?.some(review => review.comment_to_moderator) && (\n                                                <img\n                                                    src=\"/icons/flag.png\"\n                                                    alt=\"Комментарий\"\n                                                    className=\"absolute top-2 right-2 w-6 h-6\"\n                                                />\n                                            )}\n                                            <h3 className=\"text-md font-semibold\">{product.name}</h3>\n                                            <p className=\"text-sm text-gray-600\">\n                                                Цена: {product.price} ₽\n                                            </p>\n                                            <p className=\"text-xs text-gray-400\">\n                                                Статус:{' '}\n                                                {product.status === ProductStatus.ACTIVE\n                                                    ? 'Активный'\n                                                    : product.status === ProductStatus.REJECTED\n                                                        ? 'Отклонено'\n                                                        : product.status === ProductStatus.ARCHIVED\n                                                            ? 'Архив'\n                                                            : product.status === ProductStatus.CREATED ||\n                                                            product.status === ProductStatus.DISABLED\n                                                                ? 'Создано / Отключено'\n                                                                : product.status}\n                                            </p>\n                                        </div>\n                                    ))}\n                                </div>\n                            )}\n                        </div>\n                    )}\n                    {activeTab === 'reviewed' && (\n                        <div>\n                            <h2 className=\"text-xl font-semibold mb-4\">Проверенные заявки</h2>\n                            {filteredReviewed.length === 0 ? (\n                                <p className=\"text-center text-sm text-gray-500\">Нет проверенных заявок</p>\n                            ) : (\n                                <div className=\"flex flex-col gap-2\">\n                                    {filteredReviewed.map(product => (\n                                        <div\n                                            key={product.id}\n                                            onClick={() => handleReview(product.id)}\n                                            className={`relative border border-gray-200 rounded-md p-3 hover:shadow transition-shadow duration-300 cursor-pointer ${\n                                                product.status.toLowerCase() === 'archived'\n                                                    ? 'border-darkGray text-black border-dashed'\n                                                    : 'bg-white'\n                                            }`}\n                                        >\n                                            {product.moderator_reviews?.some(review => review.comment_to_moderator) && (\n                                                <img\n                                                    src=\"/icons/flag.png\"\n                                                    alt=\"Комментарий\"\n                                                    className=\"absolute top-2 right-2 w-6 h-6\"\n                                                />\n                                            )}\n                                            <h3 className=\"text-md font-semibold\">{product.name}</h3>\n                                            <p className=\"text-sm\">\n                                                Цена: {product.price} ₽\n                                            </p>\n                                            <p className=\"text-xs\">\n                                                Статус:{' '}\n                                                {product.status === ProductStatus.ACTIVE\n                                                    ? 'Активный'\n                                                    : product.status === ProductStatus.REJECTED\n                                                        ? 'Отклонено'\n                                                        : product.status === ProductStatus.ARCHIVED\n                                                            ? 'Архив'\n                                                            : product.status === ProductStatus.CREATED ||\n                                                            product.status === ProductStatus.DISABLED\n                                                                ? 'Создано / Отключено'\n                                                                : product.status}\n                                            </p>\n                                        </div>\n                                    ))}\n                                </div>\n                            )}\n                        </div>\n                    )}\n                </>\n            )}\n\n            <div\n                onClick={() => {\n                    if (window.Telegram?.WebApp?.close) {\n                        window.Telegram.WebApp.close();\n                    }\n                    window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n                }}\n                className=\"bg-white border border-brand rounded-xl shadow-sm p-4 mt-4 text-sm font-semibold cursor-pointer flex items-center gap-3\"\n            >\n                <img src=\"/icons/support.png\" alt=\"Support\" className=\"w-7 h-7\"/>\n                <div className=\"flex flex-col\">\n                    <span>Техподдержка</span>\n                    <span className=\"text-xs text-gray-500\">\n                        Оперативно ответим на все вопросы\n                    </span>\n                </div>\n                <img\n                    src=\"/icons/small_arrow.png\"\n                    alt=\"arrow\"\n                    className=\"w-5 h-5 ml-auto\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ModeratorProductsPage;\n"
  },
  {
    "path": "frontend/src/pages/moderator/ModeratorUserDetailPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {\n    banUser,\n    demoteUser,\n    getUser,\n    increaseReferralBonus,\n    increaseSellerBalance,\n    promoteUser,\n    unbanUser,\n    useDiscount\n} from '../../services/api';\nimport {UserRole} from '../../enums';\nimport {on} from '@telegram-apps/sdk';\n\ninterface User {\n    id: string;\n    telegram_id: number;\n    nickname: string;\n    role: UserRole;\n    is_banned: boolean;\n    is_seller: boolean;\n    balance: number;\n    invited_by: string | null;\n    has_discount: boolean;\n    referrer_bonus: number;\n    inviter: User;\n}\n\nfunction ModeratorUserDetailPage() {\n    const {userId} = useParams<{ userId: string }>();\n    const navigate = useNavigate();\n    const [user, setUser] = useState<User | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    // Состояния для пополнения/списания баланса продавца\n    const [balanceInput, setBalanceInput] = useState('');\n    // Состояния для реферального бонуса\n    const [bonusInput, setBonusInput] = useState('');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate('/moderator/users');\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n    useEffect(() => {\n        if (!userId) return;\n        getUser(userId)\n            .then((res) => setUser(res.data))\n            .finally(() => setLoading(false));\n    }, [userId]);\n\n    if (loading || !user) return <div className=\"p-4\">Загрузка...</div>;\n\n    const handleBanToggle = async () => {\n        try {\n            if (user.is_banned) {\n                await unbanUser(user.id);\n            } else {\n                await banUser(user.id);\n            }\n            setUser({...user, is_banned: !user.is_banned});\n        } catch (error) {\n            console.error('Ошибка при изменении статуса бана:', error);\n        }\n    };\n\n    const handleRoleToggle = async () => {\n        try {\n            if (user.role === UserRole.MODERATOR) {\n                await demoteUser(user.id);\n                setUser({...user, role: UserRole.USER});\n            } else {\n                await promoteUser(user.id);\n                setUser({...user, role: UserRole.MODERATOR});\n            }\n        } catch (error) {\n            console.error('Ошибка при изменении роли:', error);\n        }\n    };\n\n\n    // Функции для баланса продавца\n    const handleBalanceIncrease = async () => {\n        const amount = parseInt(balanceInput, 10);\n        if (!amount || amount <= 0) return;\n        const fd = new FormData();\n        fd.append(\"balance\", amount.toString());\n        try {\n            await increaseSellerBalance(user.id, fd);\n            setUser({...user, balance: user.balance + amount});\n            setBalanceInput('');\n            alert('Баланс пополнен!');\n        } catch (error) {\n            console.error(\"Ошибка при пополнении баланса:\", error);\n            alert(\"Не удалось пополнить баланс\");\n        }\n    };\n\n    const handleBalanceDecrease = async () => {\n        const amount = parseInt(balanceInput, 10);\n        if (!amount || amount <= 0) return;\n        const fd = new FormData();\n        // Передаем отрицательное число для списания\n        fd.append(\"balance\", (-amount).toString());\n        try {\n            await increaseSellerBalance(user.id, fd);\n            setUser({...user, balance: user.balance - amount});\n            setBalanceInput('');\n            alert('Баланс списан!');\n        } catch (error) {\n            console.error(\"Ошибка при списании баланса:\", error);\n            alert(\"Не удалось списать баланс\");\n        }\n    };\n\n    const handleBalanceClear = async () => {\n        if (user.balance <= 0) return;\n        const fd = new FormData();\n        fd.append(\"balance\", (-user.balance).toString());\n        try {\n            await increaseSellerBalance(user.id, fd);\n            setUser({...user, balance: 0});\n            alert('Баланс списан!');\n        } catch (error) {\n            console.error(\"Ошибка при полном списании баланса:\", error);\n            alert(\"Не удалось списать весь баланс\");\n        }\n    };\n\n    // Функции для реферального бонуса\n    const handleReferralBonusIncrease = async () => {\n        const amount = parseInt(bonusInput, 10);\n        if (!amount || amount <= 0) return;\n        try {\n            await increaseReferralBonus(user.id, {bonus: amount});\n            setUser({...user, referrer_bonus: user.referrer_bonus + amount});\n            setBonusInput('');\n            alert('Реферальный бонус начислен!');\n        } catch (error) {\n            console.error(\"Ошибка при начислении бонуса:\", error);\n            alert(\"Не удалось начислить бонус\");\n        }\n    };\n\n    const handleReferralBonusDecrease = async () => {\n        const amount = parseInt(bonusInput, 10);\n        if (!amount || amount <= 0) return;\n        try {\n            await increaseReferralBonus(user.id, {bonus: -amount});\n            setUser({...user, referrer_bonus: user.referrer_bonus - amount});\n            setBonusInput('');\n            alert('Реферальный бонус списан!');\n        } catch (error) {\n            console.error(\"Ошибка при списании бонуса:\", error);\n            alert(\"Не удалось списать бонус\");\n        }\n    };\n\n    const handleReferralBonusClear = async () => {\n        if (user.referrer_bonus <= 0) return;\n        const fd = new FormData();\n        fd.append(\"bonus\", (-user.referrer_bonus).toString());\n        try {\n            await increaseReferralBonus(user.id, {bonus: -user.referrer_bonus});\n            setUser({...user, referrer_bonus: 0});\n            alert('Реферальный бонус списан!');\n        } catch (error) {\n            console.error(\"Ошибка при полном списании бонуса:\", error);\n            alert(\"Не удалось списать весь бонус\");\n        }\n    };\n\n\n    const handleDiscountUsed = async () => {\n        try {\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            await useDiscount(user.id);\n            setUser({...user, has_discount: false});\n            alert('Использование скидки отмечено!');  // <-- вот здесь\n        } catch (error) {\n            console.error(\"Ошибка при использовании скидки:\", error);\n            alert(\"Не удалось отметить использование скидки\");\n        }\n    };\n\n\n    return (\n        <div className=\"p-4 bg-gray-200-100 min-h-screen\">\n            <h1 className=\"text-2xl font-bold text-center mb-4 text-brand\">Профиль пользователя</h1>\n\n            <div className=\"bg-white rounded shadow p-4 mb-4\">\n                <p><strong>ID:</strong> {user.id}</p>\n                <p><strong>Telegram ID:</strong> {user.telegram_id}</p>\n                <p><strong>Никнейм:</strong> {user.nickname}</p>\n                <p><strong>Роль:</strong> {user.role}</p>\n                <p><strong>Забанен:</strong> {user.is_banned ? 'Да' : 'Нет'}</p>\n                <p><strong>Продавец:</strong> {user.is_seller ? 'Да' : 'Нет'}</p>\n                <strong>Баланс:</strong> {user.balance != null ? user.balance + ' раздач' : '0 раздач'}\n                <p>\n                    <strong>Пригласивший:</strong>{' '}\n                    {user.inviter && user.inviter.nickname ? (\n                        <a\n                            href={`https://t.me/${user.inviter.nickname}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-blue-600 hover:underline\"\n                        >\n                            {user.inviter.nickname}\n                        </a>\n                    ) : (\n                        '—'\n                    )}\n                </p>\n                <strong>Реферальный\n                    бонус:</strong> {user.referrer_bonus != null ? user.referrer_bonus + ' руб' : '0 руб'}\n                {user.invited_by && user.has_discount ? (\n                    <p><strong>Есть скидка</strong></p>\n                ) : null}\n\n\n            </div>\n\n            {/* Действия над пользователем */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4\">\n                <button\n                    onClick={handleBanToggle}\n                    className=\"bg-red-500 text-white p-2 rounded\"\n                >\n                    {user.is_banned ? 'Разбанить' : 'Забанить'}\n                </button>\n                <button\n                    onClick={handleRoleToggle}\n                    className=\"bg-yellow-500 text-white p-2 rounded\"\n                >\n                    {user.role === 'moderator' ? 'Разжаловать' : 'Назначить модератором'}\n                </button>\n            </div>\n\n            {/* Блок для управления балансом продавца */}\n            {user.is_seller && (\n                <div className=\"mb-4 p-4 bg-white rounded shadow\">\n                    <h2 className=\"text-lg font-bold mb-2 text-brand\">Баланс продавца</h2>\n                    <div className=\"flex gap-2 mb-2\">\n                        <input\n                            type=\"number\"\n                            placeholder=\"Сумма\"\n                            value={balanceInput}\n                            onChange={(e) => setBalanceInput(e.target.value)}\n                            className=\"border p-2 rounded flex-1 text-sm min-w-0\"\n                        />\n                        <button\n                            onClick={handleBalanceIncrease}\n                            className=\"bg-brand text-white px-2 py-1 rounded text-sm\"\n                        >\n                            Пополнить\n                        </button>\n                        <button\n                            onClick={handleBalanceDecrease}\n                            className=\"bg-red-500 text-white px-2 py-1 rounded text-sm\"\n                        >\n                            Списать\n                        </button>\n                    </div>\n                    <button\n                        onClick={handleBalanceClear}\n                        className=\"bg-brandlight text-brand px-2 py-1 rounded text-sm w-full\"\n                    >\n                        Списать весь баланс\n                    </button>\n                </div>\n            )}\n\n            {/* Блок для управления реферальным бонусом */}\n            {user.invited_by && (\n                <div className=\"mb-4 p-4 bg-white rounded shadow\">\n                    <h2 className=\"text-lg font-bold mb-2 text-brand\">Реферальный бонус</h2>\n                    <div className=\"flex gap-2 mb-2\">\n                        <input\n                            type=\"number\"\n                            placeholder=\"Сумма бонуса\"\n                            value={bonusInput}\n                            onChange={(e) => setBonusInput(e.target.value)}\n                            className=\"border p-2 rounded flex-1 text-sm min-w-0\"\n                        />\n                        <button\n                            onClick={handleReferralBonusIncrease}\n                            className=\"bg-brand text-white px-2 py-1 rounded text-sm\"\n                        >\n                            Начислить\n                        </button>\n                        <button\n                            onClick={handleReferralBonusDecrease}\n                            className=\"bg-red-500 text-white px-2 py-1 rounded text-sm\"\n                        >\n                            Списать\n                        </button>\n                    </div>\n                    <button\n                        onClick={handleReferralBonusClear}\n                        className=\"bg-brandlight text-brand px-2 py-1 rounded text-sm w-full\"\n                    >\n                        Списать весь бонус\n                    </button>\n                    {user.invited_by && user.has_discount && (\n                        <button\n                            onClick={handleDiscountUsed}\n                            className=\"mt-2 bg-brandlight text-brand p-2 rounded text-sm w-full\"\n                        >\n                            Использовал скидку\n                        </button>\n                    )}\n\n                </div>\n            )}\n\n        </div>\n    );\n}\n\nexport default ModeratorUserDetailPage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/CartScreenshotPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {createOrder, getMe, getProductById} from '../../services/api';\nimport {AxiosResponse} from 'axios';\nimport {on} from \"@telegram-apps/sdk\";\nimport FileUploader from \"../../components/FileUploader\";\n\ninterface Product {\n    id: string;\n    article: string;\n    key_word: string;\n    seller_id: string;\n}\n\ntype ModalContent = { src: string};\n\n\nfunction CartScreenshotPage() {\n    const {productId} = useParams<{ productId: string }>();\n    const navigate = useNavigate();\n\n    const [product, setProduct] = useState<Product | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    const [file1, setFile1] = useState<File | null>(null);\n    const [preview1, setPreview1] = useState<string | null>(null);\n\n    // для второго скрина\n    const [file2, setFile2] = useState<File | null>(null);\n    const [preview2, setPreview2] = useState<string | null>(null);\n\n\n    useEffect(() => {\n        if (!file1) {\n            setPreview1(null);\n            return;\n        }\n        const url = URL.createObjectURL(file1);\n        setPreview1(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file1]);\n\n    // создаём preview URL для file2\n    useEffect(() => {\n        if (!file2) {\n            setPreview2(null);\n            return;\n        }\n        const url = URL.createObjectURL(file2);\n        setPreview2(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file2]);\n\n    const canContinue = Boolean(file1 && file2);\n\n    useEffect(() => {\n        if (file2) {\n            const url = URL.createObjectURL(file2);\n            setPreview2(url);\n            return () => URL.revokeObjectURL(url);\n        }\n        setPreview2(null);\n    }, [file2]);\n\n\n    useEffect(() => {\n        if (!productId) return;\n        getProductById(productId)\n            .then((response: AxiosResponse<Product>) => {\n                setProduct(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке товара:', err);\n                setError('Не удалось загрузить данные о товаре');\n            })\n            .finally(() => setLoading(false));\n    }, [productId]);\n\n    const handleContinue = async () => {\n        if (!canContinue) return;\n        try {\n            const me = await getMe();\n            const userId = me.id;\n            const formData = new FormData();\n            formData.append('user_id', userId);\n            formData.append('step', '1');\n            formData.append('seller_id', product!.seller_id);\n            formData.append('product_id', productId || '');\n            formData.append('search_query_screenshot', file1 as File);\n            formData.append('cart_screenshot', file2 as File);\n\n            const response = await createOrder(formData);\n            const createdOrderId = response.data; // Ожидается, что backend вернет объект заказа с полем id\n\n            navigate(`/order/${createdOrderId}/step-2`);\n        } catch (err) {\n            console.error('Ошибка при создании заказа', err);\n        }\n    };\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [productId, navigate]);\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n    if (error || !product) {\n        return <div className=\"p-4 text-red-600\">{error || 'Товар не найден'}</div>;\n    }\n\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\n    };\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto space-y-4 relative\">\n\n            <div className=\"bg-white border border-brand rounded-lg shadow p-4 text-sm text-gray-700 space-y-2\">\n                <h2 className=\"text-lg font-semibold top-10 text-brand\">Шаг 1. Загрузите скриншоты по поиску товара</h2>\n\n                <p>\n                    <strong>ВАЖНО!</strong> Оформление заказа происходит только на 5-м шаге.\n                </p>\n                <p>\n                    Сначала выполните поиск нашего товара по ключевому слову, затем добавьте несколько товаров в\n                    корзину.\n                </p>\n                <p>\n                    <strong>Сделайте два скриншота</strong>: первый – скриншот поискового запроса, второй – скриншот корзины.\n                </p>\n                <p>\n                    Ключевое слово: <strong>{product.key_word}</strong>\n                </p>\n\n                <p className=\"mb-2 text-xs text-gray-500\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \"МОИ ПОКУПКИ\"</p>\n            </div>\n\n\n            <FileUploader\n                label=\"1.Скриншот поискового запроса\"\n                file={file1}\n                preview={preview1}\n                onFileChange={setFile1}\n            />\n            <FileUploader\n                label=\"2.Скриншот корзины\"\n                file={file2}\n                preview={preview2}\n                onFileChange={setFile2}\n            />\n\n\n            <button\n                onClick={handleContinue}\n                disabled={!canContinue}\n                className={`w-full py-2 rounded-lg text-brand font-semibold ${\n                    canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\n                }`}\n            >\n                Продолжить\n            </button>\n\n            <div className=\"bg-white rounded-lg shadow p-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"flex flex-col gap-3 mt-4 text-center\">\n                <button\n                    onClick={handleChannelClick}\n                    className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\n                    justify-center gap-2\">\n                    <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-6 h-6\"/>\n                    <span>Подписаться на канал</span>\n                </button>\n                <button\n                    onClick={handleSupportClick}\n                    className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\"\n                >\n                    Нужна помощь\n                </button>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default CartScreenshotPage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/ProductFindPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {AxiosResponse} from 'axios';\nimport {getMe, getOrderById, getOrderReport, updateOrder} from \"../../services/api\";\nimport {on} from \"@telegram-apps/sdk\";\nimport GetUploadLink from \"../../components/GetUploadLink\";\n\ninterface Product {\n    id: string;\n    name: string;\n    description?: string;\n    price: number;\n    article: string;\n    image_path?: string;\n    key_word?: string;\n}\n\ninterface Order {\n    id: string;\n    product: Product;\n}\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n}\n\nfunction ProductFindPage() {\n    const {orderId} = useParams<{ orderId: string }>();\n    const navigate = useNavigate();\n\n    const [order, setOrder] = useState<Order | null>(null);\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [enteredArticle, setEnteredArticle] = useState('');\n    const [articleStatus, setArticleStatus] = useState('');\n    const [showReport, setShowReport] = useState(false);\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\n    const [flashInvalid, setFlashInvalid] = useState(false);\n\n    const isEmpty        = enteredArticle.trim() === \"\";\n    const isCorrect      = order && enteredArticle.trim() === order.product.article;\n    const minLengthReached = enteredArticle.trim().length >= 8;\n    const isIncorrect      = minLengthReached && !isCorrect;\n\n    const toggleStep = (step: number) => {\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\n    };\n\n    const onArticleBlur = () => {\n        if (!order) return;\n        if (enteredArticle.trim() !== order.product.article) {\n            setFlashInvalid(true);\n        }\n    };\n\n\n    useEffect(() => {\n        if (!order) return;\n        if (enteredArticle.trim() === order.product.article) {\n            setArticleStatus('Артикул правильный');\n        } else {\n            setArticleStatus('');\n        }\n    }, [enteredArticle, order]);\n\n\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderById(orderId)\n            .then((response: AxiosResponse<Order>) => {\n                setOrder(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке заказа:', err);\n                setError('Не удалось загрузить заказ');\n            })\n            .finally(() => setLoading(false));\n    }, [orderId]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReportData(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке отчета:', err);\n            });\n    }, [orderId]);\n\n    useEffect(() => {\n        if (!order) return;\n        if (enteredArticle.trim() === order.product.article) {\n            setArticleStatus('Артикул правильный');\n        } else {\n            setArticleStatus('');\n        }\n    }, [enteredArticle, order]);\n\n    const canContinue = articleStatus === 'Артикул правильный';\n\n    const handleContinue = async () => {\n        if (!canContinue || !orderId) return;\n        try {\n            await updateOrder(orderId, {step: 2});\n            navigate(`/order/${orderId}/step-3`);\n        } catch (err) {\n            console.error('Ошибка при обновлении заказа:', err);\n        }\n    };\n\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            if (!orderId) return;\n            getOrderById(orderId)\n                .then((response: AxiosResponse<Order>) => {\n                    const productId = response.data.product.id;\n                    navigate(-1);\n                })\n                .catch((err) => {\n                    console.error('Ошибка при загрузке заказа:', err);\n                    setError('Не удалось загрузить заказ');\n                });\n        });\n        // return () => removeBackListener();\n    }, [orderId, navigate]);\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n    if (error || !order) {\n        return <div className=\"p-4 text-red-600\">{error || 'Заказ не найден'}</div>;\n    }\n\n    const {product} = order;\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\n    };\n\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto\">\n            <div className=\"bg-white border border-brand p-4 rounded-lg shadow mb-4\">\n                <h2 className=\"text-lg font-bold mb-2 text-brand\">Шаг 2. Найдите наш товар</h2>\n                <ul className=\"list-disc list-inside text-sm text-gray-700 space-y-1\">\n                    <li>Найдите наш товар на сайте или в приложении WB</li>\n                    <li>\n                        Используйте ключевое слово{product.key_word ? `: «${product.key_word}»` : ''}\n                    </li>\n                    <li>Фото товара ниже</li>\n                    <li>\n                        <strong>Введите артикул товара для проверки</strong>\n                    </li>\n                    <p>\n                        Если артикул правильный, вы перейдёте на следующий шаг\n                    </p>\n                    <p className=\"mb-2 text-xs text-gray-500\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \"МОИ ПОКУПКИ\"</p>\n\n                </ul>\n            </div>\n\n            <div className=\"mb-4\">\n                <label htmlFor=\"articleInput\" className=\"block text-sm font-medium mb-1\">\n                    Артикул товара\n                </label>\n                <input\n                    id=\"articleInput\"\n                    type=\"text\"\n                    value={enteredArticle}\n                    onChange={e => setEnteredArticle(e.target.value)}\n                    onBlur={onArticleBlur}\n                    placeholder=\"Введите артикул...\"\n                    className={`\n      rounded-md p-2 w-full text-sm\n      border transition-colors duration-200\n      ${\n                        flashInvalid\n                            ? 'flash-border'\n                            : articleStatus === 'Артикул правильный'\n                                ? 'border-green-500'\n                                : 'border-gray-300'\n                    }\n    `}\n                    onAnimationEnd={() => setFlashInvalid(false)}\n                />\n                {articleStatus === 'Артикул правильный' && (\n                    <p className=\"mt-2 text-sm font-semibold text-green-600\">\n                        Артикул правильный\n                    </p>\n                )}\n            </div>\n\n\n\n            <button\n                onClick={handleContinue}\n                disabled={!canContinue}\n                className={`w-full py-2 mb-4 rounded-lg text-brand border border-brand font-semibold text-center ${\n                    canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\n                }`}\n            >\n                Продолжить\n            </button>\n\n\n            <div className=\"mb-4\">\n                <div className=\"w-full aspect-[3/4] bg-gray-200-100 rounded overflow-hidden relative\">\n                    {product.image_path ? (\n                        <img\n                            src={\n                                product.image_path.startsWith('http')\n                                    ? product.image_path\n                                    : GetUploadLink(product.image_path)\n                            }\n                            alt={product.name}\n                            className=\"absolute inset-0 w-full h-full object-cover\"\n                        />\n                    ) : (\n                        <div className=\"absolute inset-0 flex items-center justify-center text-gray-400\">\n                            Нет фото\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"flex flex-col gap-3 mt-4\">\n                <button\n                    onClick={() => setShowReport(prev => !prev)}\n                    className=\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\"\n                >\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\n                </button>\n\n                {showReport && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                        <h3 className=\"text-lg font-bold mb-2\">Отчет</h3>\n                        {reportData ? (\n                            <div className=\"space-y-2\">\n                                {/* Шаг 1 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(1)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 1. Скрины корзины</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[1] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[1] && (\n                                        <div className=\"border-t p-4 space-y-3\">\n                                            {reportData.search_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин поискового запроса</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\n                                                        alt=\"Скрин поискового запроса\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                            {reportData.cart_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\n                                                        alt=\"Скрин корзины\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n\n\n                                <div className=\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\">\n                                    <div className=\"font-semibold text-black\">Шаг 2. Найдите наш товар\n                                    </div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 3. Добавить товар в избранное\n                                    </div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 4. Реквизиты для перевода кэшбэка\n                                    </div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 5. Оформление заказа</div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 6. Получение товара</div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 7. Отзыв</div>\n                                </div>\n\n\n                            </div>\n                        ) : (\n                            <p className=\"text-sm text-gray-500\">Отчет пока пуст.</p>\n                        )}\n                    </div>\n                )}\n                <div className=\"flex flex-col gap-3 text-center\">\n\n                    <button\n                        onClick={handleChannelClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\n                         justify-center gap-2\">\n                        <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-6 h-6\"/>\n                        <span>Подписаться на канал</span>\n                    </button>\n                    <button\n                        onClick={handleSupportClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\">\n                        Нужна помощь\n                    </button>\n                    <button\n                        onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\n                        className=\"flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\"\n                    >\n                        Проверить продавца\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ProductFindPage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/StepOrderPlacement.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getOrderReport, updateOrder} from '../../services/api';\nimport {on} from \"@telegram-apps/sdk\";\nimport {AxiosResponse} from 'axios';\nimport GetUploadLink from \"../../components/GetUploadLink\";\nimport FileUploader from \"../../components/FileUploader\";\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    article?: string;\n}\n\ntype ModalContent = { src: string};\n\nfunction StepOrderPlacement() {\n    const navigate = useNavigate();\n    const {orderId} = useParams<{ orderId: string }>();\n\n    const [isOrderPlaced, setIsOrderPlaced] = useState(false);\n    // const [screenshotFile, setScreenshotFile] = useState<File | null>(null);\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\n    const [showReport, setShowReport] = useState(false);\n    const [file, setFile] = useState<File | null>(null);\n    const [preview, setPreview] = useState<string | null>(null);\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\n    const orderImgPath = '/images/order.jpg';\n\n\n    const openModal = (src: string) => {\n        setModalContent({ src });\n    };\n    const closeModal = () => setModalContent(null);\n\n    const toggleStep = (step: number) => {\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\n    };\n    useEffect(() => {\n        if (!file) {\n            setPreview(null);\n            return;\n        }\n        const url = URL.createObjectURL(file);\n        setPreview(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file]);\n\n    const canContinue = isOrderPlaced && file;\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [orderId, navigate]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReportData(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке отчета:', err);\n            });\n    }, [orderId]);\n\n    // const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    //     if (e.target.files && e.target.files.length > 0) {\n    //         setScreenshotFile(e.target.files[0]);\n    //     } else {\n    //         setScreenshotFile(null);\n    //     }\n    // };\n\n    const handleOrderPlacedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIsOrderPlaced(e.target.checked);\n        if (!e.target.checked) {\n            setFile(null);\n        }\n    };\n\n    const handleContinue = async () => {\n        if (!canContinue || !orderId) return;\n        try {\n            await updateOrder(orderId, {\n                step: 5,\n                final_cart_screenshot: file,\n            });\n            navigate(`/order/${orderId}/step-6`);\n        } catch (err) {\n            console.error('Ошибка при обновлении заказа:', err);\n        }\n    };\n\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\n    };\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto\">\n\n            <div className=\"bg-white border border-brand rounded-md p-4 text-sm text-gray-700 mb-4 space-y-2\">\n                <h1 className=\"text-lg font-bold mb-4 text-brand\">Шаг 5. Оформление заказа</h1>\n                <p>1. Оформите заказ на Wildberries</p>\n                <p>2. Сделайте скрин из раздела «Доставки» в личном кабинете</p>\n                <p>3. На скрине обязательно должна быть указана цена</p>\n                <p>4. Загрузите скрин заказа в отчет</p>\n                <div\n                    onClick={() => openModal(orderImgPath)}\n                    className=\"underline text-blue-600 cursor-pointer\"\n                >\n                    Пример скрина заказа\n                </div>\n                <p className=\"mb-2 text-xs text-gray-500\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \"МОИ ПОКУПКИ\"</p>\n\n            </div>\n\n            <div className=\"flex items-center mb-4\">\n                <input\n                    type=\"checkbox\"\n                    id=\"orderPlaced\"\n                    checked={isOrderPlaced}\n                    onChange={handleOrderPlacedChange}\n                    className=\"mr-2\"\n                />\n                <label htmlFor=\"orderPlaced\" className=\"text-sm text-gray-700\">\n                    Оформил(а) заказ\n                </label>\n            </div>\n\n            {isOrderPlaced && (\n                <FileUploader\n                    label=\"Фото товара\"\n                    file={file}\n                    preview={preview}\n                    onFileChange={setFile}\n                />\n            )}\n\n\n            <button\n                onClick={handleContinue}\n                disabled={!canContinue}\n                className={`w-full py-2 rounded text-brand mb-4 mt-4 ${\n                    canContinue\n                        ? 'bg-brand hover:bg-brand'\n                        : 'bg-gray-200-400 border border-brand cursor-not-allowed'\n                }`}\n            >\n                Продолжить\n            </button>\n\n\n            <div className=\"bg-white rounded-lg shadow p-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n\n            <div className=\"flex flex-col gap-3 mt-4\">\n                <button\n                    onClick={() => setShowReport(prev => !prev)}\n                    className=\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\"\n                >\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\n                </button>\n\n                {showReport && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                        <h3 className=\"text-lg font-bold mb-2\">Отчет</h3>\n                        {reportData ? (\n                                <div className=\"space-y-2\">\n                                    {/* Шаг 1 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(1)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 1. Скрины корзины</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[1] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[1] && (\n                                            <div className=\"border-t p-4 space-y-3\">\n                                                {reportData.search_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин поискового запроса</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.search_screenshot_path)}\n                                                            alt=\"Скрин поискового запроса\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                                {reportData.cart_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.cart_screenshot_path)}\n                                                            alt=\"Скрин корзины\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 2 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(2)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 2. Артикул товара</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[2] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[2] && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm\">{reportData.article}</p>\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 3 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(3)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 3. Товар и бренд в избранное</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[3] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[3] && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm\">Ваш товар и бренд успешно добавлены в избранное.</p>\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 4 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(4)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 4. Реквизиты</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[4] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[4] && (\n                                            <div className=\"border-t p-4 space-y-1\">\n                                                {reportData.card_number &&\n                                                    <p className=\"text-sm\">Номер карты: {reportData.card_number}</p>}\n                                                {reportData.phone_number &&\n                                                    <p className=\"text-sm\">Телефон: {reportData.phone_number}</p>}\n                                                {reportData.name && <p className=\"text-sm\">Имя: {reportData.name}</p>}\n                                                {reportData.bank && <p className=\"text-sm\">Банк: {reportData.bank}</p>}\n                                            </div>\n                                        )}\n                                    </div>\n\n\n\n\n                                    <div className=\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\">\n                                        <div className=\"font-semibold text-black\">Шаг 5. Оформление заказа</div>\n                                        <div className=\"font-semibold text-gray-400\">Шаг 6. Получение товара</div>\n                                        <div className=\"font-semibold text-gray-400\">Шаг 7. Отзыв</div>\n\n                                    </div>\n                                </div>\n\n                            ) :\n                            <p className=\"text-sm text-gray-500\">Отчет пока пуст.</p>\n                        }\n                    </div>\n                )}\n                <div className=\"flex flex-col gap-3 mt-2 text-center\">\n\n                    <button\n                        onClick={handleChannelClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\n                         justify-center gap-2\">\n                        <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-6 h-6\"/>\n                        <span>Подписаться на канал</span>\n                    </button>\n                    <button\n                        onClick={handleSupportClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\">\n                        Нужна помощь\n                    </button>\n                </div>\n            </div>\n            {modalContent && (\n                <div\n                    className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\"\n                    onClick={closeModal}\n                >\n                    <div\n                        className=\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\"\n                        onClick={e => e.stopPropagation()}\n                    >\n                        {/* Крестик в правом верхнем углу */}\n                        <button\n                            onClick={closeModal}\n                            className=\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\"\n                        >\n                            &times;\n                        </button>\n\n                        {/* Вот здесь вставляем картинку */}\n                        <img\n                            src={modalContent.src}\n                            alt=\"Пример\"\n                            className=\"w-full h-auto mt-4\"\n                        />\n                    </div>\n                </div>\n            )}\n            </div>\n\n    );\n}\n\nexport default StepOrderPlacement;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/ProductFavoritePage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getOrderById, getOrderReport, updateOrder} from \"../../services/api\";\nimport {on} from \"@telegram-apps/sdk\";\nimport {AxiosResponse} from 'axios';\nimport GetUploadLink from \"../../components/GetUploadLink\";\n\ninterface Product {\n    id: string;\n    name: string;\n    description?: string;\n    price: number;\n    article: string;\n    image_path?: string;\n    key_word?: string;\n}\n\ninterface Order {\n    id: string;\n    product: Product;\n    // Другие поля заказа, если необходимо\n}\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    article?: string;\n}\n\nfunction ProductFavoritePage() {\n    const navigate = useNavigate();\n    const {orderId} = useParams<{ orderId: string }>();\n\n    const [addedToFavorite, setAddedToFavorite] = useState(false);\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\n    const [showReport, setShowReport] = useState(false);\n    const canContinue = addedToFavorite;\n    const [order, setOrder] = useState<Order | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\n\n    const toggleStep = (step: number) => {\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\n    };\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [orderId, navigate]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderById(orderId)\n            .then((response: AxiosResponse<Order>) => {\n                setOrder(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке заказа:', err);\n                setError('Не удалось загрузить заказ');\n            })\n            .finally(() => setLoading(false));\n    }, [orderId]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReportData(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке отчета:', err);\n            });\n    }, [orderId]);\n\n    const handleContinue = async () => {\n        if (!canContinue || !orderId) return;\n        try {\n            await updateOrder(orderId, {step: 3});\n            navigate(`/order/${orderId}/step-4`);\n        } catch (err) {\n            console.error('Ошибка при обновлении заказа:', err);\n        }\n    };\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n    if (error || !order) {\n        return <div className=\"p-4 text-red-600\">{error || 'Заказ не найден'}</div>;\n    }\n\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\n    };\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto\">\n\n            <div className=\"bg-white border border-brand p-4 rounded-lg shadow mb-4 text-sm text-gray-700\">\n                <h1 className=\"text-lg font-bold mb-4 text-brand\">Шаг 3. Добавить товар в избранное</h1>\n                <p className=\"mb-2\">• Добавьте товар в избранное</p>\n                <p className=\"mb-2\">• Добавьте бренд в избранное</p>\n                <p className=\"mb-2 text-xs text-gray-500\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \"МОИ ПОКУПКИ\"</p>\n            </div>\n\n            <div className=\"flex items-center mb-4\">\n                <input\n                    type=\"checkbox\"\n                    id=\"favoriteCheckbox\"\n                    checked={addedToFavorite}\n                    onChange={(e) => setAddedToFavorite(e.target.checked)}\n                    className=\"mr-2\"\n                />\n                <label htmlFor=\"favoriteCheckbox\" className=\"text-sm text-gray-700\">\n                    Добавил товар в избранное\n                </label>\n            </div>\n\n            <button\n                onClick={handleContinue}\n                disabled={!canContinue}\n                className={`block w-full py-2 mb-4 rounded-lg text-brand font-semibold text-center ${\n                    canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\n                }`}\n            >\n                Продолжить\n            </button>\n\n\n            <div className=\"mb-4\">\n                <div className=\"w-full aspect-[3/4] bg-gray-200-100 rounded overflow-hidden relative\">\n                    {order!.product.image_path ? (\n                        <img\n                            src={\n                                order!.product.image_path.startsWith('http')\n                                    ? order!.product.image_path\n                                    : GetUploadLink(order!.product.image_path)\n                            }\n                            alt={order!.product.name}\n                            className=\"absolute inset-0 w-full h-full object-cover\"\n                        />\n                    ) : (\n                        <div className=\"absolute inset-0 flex items-center justify-center text-gray-400\">\n                            Нет фото\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"flex flex-col gap-3 mt-4\">\n                <button\n                    onClick={() => setShowReport(prev => !prev)}\n                    className=\"w-full py-2 mb-4 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\"\n                >\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\n                </button>\n\n                {showReport && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                        <h3 className=\"text-lg font-bold mb-2\">Отчет</h3>\n                        {reportData ? (\n                            <div className=\"space-y-2\">\n                                {/* Шаг 1 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(1)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 1. Скрины корзины</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[1] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[1] && (\n                                        <div className=\"border-t p-4 space-y-3\">\n                                            {reportData.search_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин поискового запроса</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\n                                                        alt=\"Скрин поискового запроса\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                            {reportData.cart_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\n                                                        alt=\"Скрин корзины\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 2 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(2)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 2. Артикул товара</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[2] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[2] && (\n                                        <div className=\"border-t p-4\">\n                                            <p className=\"text-sm\">{reportData.article}</p>\n                                        </div>\n                                    )}\n                                </div>\n\n                                <div className=\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\">\n                                    <div className=\"font-semibold text-black\">Шаг 3. Добавить товар в избранное\n                                    </div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 4. Реквизиты для перевода кэшбэка\n                                    </div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 5. Оформление заказа</div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 6. Получение товара</div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 7. Отзыв</div>\n                                </div>\n\n\n                            </div>\n                        ) : (\n                            <p className=\"text-sm text-gray-500\">Отчет пока пуст.</p>\n                        )}\n                    </div>\n                )}\n            </div>\n                <div className=\"flex flex-col gap-3 mt-2 text-center\">\n\n                    <button\n                        onClick={handleChannelClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\n                         justify-center gap-2\">\n                        <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-6 h-6\"/>\n                        <span>Подписаться на канал</span>\n                    </button>\n                    <button\n                        onClick={handleSupportClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\">\n                        Нужна помощь\n                    </button>\n                </div>\n            </div>\n    );\n}\n\nexport default ProductFavoritePage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/StepReviewReportPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getOrderById, getOrderReport, updateOrder} from '../../services/api';\nimport {AxiosResponse} from 'axios';\nimport {on} from \"@telegram-apps/sdk\";\nimport GetUploadLink from \"../../components/GetUploadLink\";\nimport FileUploader from \"../../components/FileUploader\";\n\ninterface Product {\n    id: string;\n    name: string;\n    brand: string;\n    article: string;\n    price: number;\n    wb_price: number;\n    requirements_agree: boolean;\n    tg: string;\n}\n\ninterface Order {\n    id: string;\n    product: Product;\n    seller: User\n}\n\ninterface User {\n    nickname: string\n}\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    article?: string;\n}\n\ntype ModalContent = { src: string};\n\nfunction StepReviewReportPage() {\n    const {orderId} = useParams<{ orderId: string }>();\n    const navigate = useNavigate();\n\n    const [order, setOrder] = useState<Order | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\n\n    const [leftReview, setLeftReview] = useState(false);\n    // const [reviewScreenshot, setReviewScreenshot] = useState<File | null>(null);\n    // const [checkScreenshot, setCheckScreenshot] = useState<File | null>(null);\n    const [checkNumber, setCheckNumber] = useState('');\n    const [showReport, setShowReport] = useState(false);\n    const [file1, setFile1] = useState<File | null>(null);\n    const [preview1, setPreview1] = useState<string | null>(null);\n\n    const [file2, setFile2] = useState<File | null>(null);\n    const [preview2, setPreview2] = useState<string | null>(null);\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\n\n    const openModal = (src: string) => {\n        setModalContent({ src });\n    };\n    const closeModal = () => setModalContent(null);\n\n    const feedbackImgPath = '/images/feedback.jpg';\n\n    const toggleStep = (step: number) => {\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\n    };\n\n    useEffect(() => {\n        if (!file1) {\n            setPreview1(null);\n            return;\n        }\n        const url = URL.createObjectURL(file1);\n        setPreview1(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file1]);\n\n    useEffect(() => {\n        if (!file2) {\n            setPreview2(null);\n            return;\n        }\n        const url = URL.createObjectURL(file2);\n        setPreview2(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file2]);\n\n    const canContinue =\n        leftReview &&\n        file1 !== null &&\n        file2 !== null &&\n        checkNumber.trim() !== '';\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            if (!orderId) return;\n            navigate(-1);\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate, orderId]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReportData(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке отчета:', err);\n            });\n    }, [orderId]);\n\n    useEffect(() => {\n        if (!orderId) {\n            setError('Не указан orderId');\n            setLoading(false);\n            return;\n        }\n        getOrderById(orderId)\n            .then((res: AxiosResponse<Order>) => {\n                setOrder(res.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке заказа:', err);\n                setError('Не удалось загрузить данные о заказе');\n            })\n            .finally(() => setLoading(false));\n    }, [orderId]);\n\n    // const handleReviewScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    //     if (e.target.files && e.target.files.length > 0) {\n    //         setReviewScreenshot(e.target.files[0]);\n    //     } else {\n    //         setReviewScreenshot(null);\n    //     }\n    // };\n    //\n    // const handleCheckScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    //     if (e.target.files && e.target.files.length > 0) {\n    //         setCheckScreenshot(e.target.files[0]);\n    //     } else {\n    //         setCheckScreenshot(null);\n    //     }\n    // };\n\n    const handleLeftReviewChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const checked = e.target.checked;\n        setLeftReview(checked);\n        if (!checked) {\n            setFile1(null);\n            setFile2(null);\n            setCheckNumber('');\n        }\n    };\n\n    const handleCheckSeller = () => {\n        if (order && order.seller && order.seller.nickname) {\n            window.open(`https://t.me/${order.seller.nickname}`, '_blank');\n        } else {\n            alert(\"Информация о продавце недоступна\");\n        }\n    };\n\n\n    const handleContinue = async () => {\n        if (!canContinue || !orderId) return;\n        try {\n            await updateOrder(orderId, {\n                step: 7,\n                review_screenshot: file1,\n                receipt_screenshot: file2,\n                receipt_number: checkNumber,\n            });\n            navigate(`/order/${orderId}/order-info`);\n        } catch (err) {\n            console.error('Ошибка при обновлении заказа:', err);\n        }\n    };\n\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\n    };\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    if (loading) return <div className=\"p-4\">Загрузка...</div>;\n    if (error || !order) return <div className=\"p-4 text-red-600\">{error || 'Заказ не найден'}</div>;\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto\">\n            <div className=\"flex items-center justify-between mb-4\">\n\n                <button\n                    onClick={handleCheckSeller}\n                    className=\"flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 240 240\"\n                        className=\"w-5 h-5\"\n                        fill=\"currentColor\"\n                    >\n                        <path\n                            d=\"M120 0C53.73 0 0 53.73 0 120s53.73 120 120 120 120-53.73 120-120S186.27 0 120 0zm57.07 84.27l-18.96 89.38c-1.44 6.48-5.27 8.08-10.7 5.03l-29.51-21.76-14.23 13.7c-1.57 1.57-2.87 2.87-5.83 2.87l2.09-29.63 53.95-48.66c2.35-2.09-.51-3.25-3.64-1.16l-66.55 41.91-28.68-9.0c-6.25-2.0-6.38-6.25 1.31-9.25l112.3-43.38c5.25-2.0 9.87 1.31 8.91 9.06z\"\n                        />\n                    </svg>\n                    <span>Написать продавцу</span>\n                </button>\n\n            </div>\n\n            <div className=\"bg-white border border-brand p-3 rounded-md text-sm text-gray-700 space-y-2 mb-4\">\n                <h1 className=\"text-lg font-bold\">Шаг 7. Отзыв</h1>\n                <p className=\"mb-2\">1. Согласуйте отзыв с продавцом.</p>\n                {order.product.requirements_agree ? (\n                    <>\n                        <p className=\"mb-2 text-brand\">\n                            Обратите внимание, что это обязательное условие для получения кешбека!\n                            <p className=\"mb-2 text-black\">2. Фото, видео, текст, оценка 5.</p>\n                        </p>\n                    </>\n                ) : (\n                    <p className=\"mb-2\">\n                        1. Напишите отзыв. Фото, видео, текст, оценка 5.\n                    </p>\n                )}\n                <div\n                    onClick={() => openModal(feedbackImgPath)}\n                    className=\"underline text-blue-600 cursor-pointer\"\n                >\n                  Пример отзыва\n                </div>\n                <p className=\"mb-2 text-xs text-gray-500\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \"МОИ ПОКУПКИ\"</p>\n\n            </div>\n\n            <div className=\"flex items-center mb-4\">\n                <input\n                    type=\"checkbox\"\n                    id=\"leftReview\"\n                    className=\"mr-2\"\n                    checked={leftReview}\n                    onChange={handleLeftReviewChange}\n                />\n                <label htmlFor=\"leftReview\" className=\"text-sm text-gray-700\">\n                    Оставил(а) отзыв\n                </label>\n            </div>\n\n            {leftReview && (\n                <>\n                    <FileUploader\n                        label=\"Скрин статуса «Доставка» (из личного кабинета)\"\n                        file={file1}\n                        preview={preview1}\n                        onFileChange={setFile1}\n                    />\n                    <FileUploader\n                        label=\"Фото разрезанных штрихкодов на фоне товара\"\n                        file={file2}\n                        preview={preview2}\n                        onFileChange={setFile2}\n                    />\n                </>\n            )}\n\n\n            <div>\n                <label className=\"block text-sm font-medium mb-1 mt-2\">\n                    Номер чека\n                </label>\n                <input\n                    type=\"text\"\n                    value={checkNumber}\n                    onChange={(e) => setCheckNumber(e.target.value)}\n                    placeholder=\"Введите номер чека\"\n                    className=\"w-full border border-darkGray rounded-md p-2 text-sm\"\n                />\n            </div>\n            <div className=\"flex gap-2 mb-4 mt-4\">\n                <button\n                    onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\n                    className=\"flex-1 bg-white text-gray-700 text-sm py-2 rounded-lg border border-brand text-center\"\n                >\n                    Проверить продавца\n                </button>\n                <button\n                    onClick={handleContinue}\n                    disabled={!canContinue}\n                    className={`flex-1 py-2 rounded text-brand text-sm ${\n                        canContinue ? 'bg-brand hover:bg-brand-dark' : 'bg-gray-200-400 border border-brand cursor-not-allowed'\n                    }`}\n                >\n                    Продолжить\n                </button>\n            </div>\n\n            {/* Инструкции */}\n            <div className=\"bg-white rounded-lg shadow p-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция на отзыв</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция на отзыв\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-4 mt-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция на чек</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция на чек\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-4 mt-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция на номер чека</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция на номер чека\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"flex flex-col gap-3 mt-4\">\n                <button\n                    onClick={() => setShowReport(prev => !prev)}\n                    className=\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\"\n                >\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\n                </button>\n                {showReport && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                        <h3 className=\"text-lg font-bold mb-2\">Отчет</h3>\n                        {reportData ? (\n                                <div className=\"space-y-2\">\n                                    {/* Шаг 1 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(1)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 1. Скрины корзины</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[1] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[1] && (\n                                            <div className=\"border-t p-4 space-y-3\">\n                                                {reportData.search_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин поискового запроса</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.search_screenshot_path)}\n                                                            alt=\"Скрин поискового запроса\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                                {reportData.cart_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.cart_screenshot_path)}\n                                                            alt=\"Скрин корзины\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 2 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(2)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 2. Артикул товара</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[2] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[2] && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm\">{reportData.article}</p>\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 3 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(3)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 3. Товар и бренд в избранное</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[3] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[3] && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm\">Ваш товар и бренд успешно добавлены в избранное.</p>\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 4 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(4)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 4. Реквизиты</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[4] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[4] && (\n                                            <div className=\"border-t p-4 space-y-1\">\n                                                {reportData.card_number &&\n                                                    <p className=\"text-sm\">Номер карты: {reportData.card_number}</p>}\n                                                {reportData.phone_number &&\n                                                    <p className=\"text-sm\">Телефон: {reportData.phone_number}</p>}\n                                                {reportData.name && <p className=\"text-sm\">Имя: {reportData.name}</p>}\n                                                {reportData.bank && <p className=\"text-sm\">Банк: {reportData.bank}</p>}\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 5 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(5)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 5. Финальный скрин корзины</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[5] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[5] && reportData.final_cart_screenshot_path && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                <img\n                                                    src={GetUploadLink(reportData.final_cart_screenshot_path)}\n                                                    alt=\"Финальный скрин корзины\"\n                                                    className=\"w-full rounded\"\n                                                />\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 6 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(6)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 6. Скрины доставки и штрихкодов</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[6] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[6] && (\n                                            <div className=\"border-t p-4 space-y-3\">\n                                                {reportData.delivery_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин доставки</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.delivery_screenshot_path)}\n                                                            alt=\"Скрин доставки\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                                {reportData.barcodes_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин штрихкодов</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.barcodes_screenshot_path)}\n                                                            alt=\"Скрин штрихкодов\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    <div className=\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\">\n                                        <div className=\"font-semibold text-black\">Шаг 7. Отзыв</div>\n                                    </div>\n                                </div>\n\n                            ) :\n                            <p className=\"text-sm text-gray-500\">Отчет пока пуст.</p>\n                        }\n                    </div>\n                )}\n\n            </div>\n\n\n\n            <div className=\"flex flex-col gap-3 mt-4 text-center\">\n                <button\n                    onClick={handleChannelClick}\n                    className=\"w-full bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex\n                    items-center justify-center gap-2\"\n                >\n                    <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-6 h-6\"/>\n                    Подписаться на канал\n                </button>\n                <button\n                    onClick={handleSupportClick}\n                    className=\"w-full bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\"\n                >\n                    Нужна помощь\n                </button>\n            </div>\n            {modalContent && (\n                <div\n                    className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\"\n                    onClick={closeModal}\n                >\n                    <div\n                        className=\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\"\n                        onClick={e => e.stopPropagation()}\n                    >\n                        {/* Крестик в правом верхнем углу */}\n                        <button\n                            onClick={closeModal}\n                            className=\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\"\n                        >\n                            &times;\n                        </button>\n\n                        {/* Вот здесь вставляем картинку */}\n                        <img\n                            src={modalContent.src}\n                            alt=\"Пример\"\n                            className=\"w-full h-auto mt-4\"\n                        />\n                    </div>\n                </div>\n            )}\n        </div>\n\n\n    )\n        ;\n}\n\nexport default StepReviewReportPage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/ProductPickupPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getOrderById, getOrderReport, updateOrder} from '../../services/api';\nimport {on} from \"@telegram-apps/sdk\";\nimport {AxiosResponse} from 'axios';\nimport GetUploadLink from \"../../components/GetUploadLink\";\nimport FileUploader from \"../../components/FileUploader\";\n\ninterface Product {\n    id: string;\n    name: string;\n    brand: string;\n    article: string;\n    price: number;\n    wb_price: number;\n    tg: string;\n}\n\ninterface Order {\n    id: string;\n    product: Product;\n}\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    article?: string;\n}\n\ntype ModalContent = { src: string; isVideo: boolean };\n\nfunction ProductPickupPage() {\n    const {orderId} = useParams<{ orderId: string }>();\n    const navigate = useNavigate();\n\n    const [order, setOrder] = useState<Order | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\n\n    const [pickedUp, setPickedUp] = useState(false);\n    // const [deliveryScreenshot, setDeliveryScreenshot] = useState<File | null>(null);\n    // const [barcodeScreenshot, setBarcodeScreenshot] = useState<File | null>(null);\n    const [showReport, setShowReport] = useState(false);\n    const [file1, setFile1] = useState<File | null>(null);\n    const [preview1, setPreview1] = useState<string | null>(null);\n\n    const [file2, setFile2] = useState<File | null>(null);\n    const [preview2, setPreview2] = useState<string | null>(null);\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\n    const receiptVideoPath = '/images/electronic_receipt.mp4';\n    const receivingImgPath = '/images/receiving.jpg';\n    const barcodeImgPath = '/images/barcode.jpg';\n\n    // единственное состояние для модалки\n    const [modalContent, setModalContent] = useState<ModalContent | null>(null);\n\n    const openModal = (src: string) => {\n        setModalContent({ src, isVideo: src.endsWith('.mp4') });\n    };\n    const closeModal = () => setModalContent(null);\n\n    const toggleStep = (step: number) => {\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\n    };\n\n    useEffect(() => {\n        if (!file1) return setPreview1(null);\n        const url = URL.createObjectURL(file1);\n        setPreview1(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file1]);\n\n    useEffect(() => {\n        if (!file2) return setPreview2(null);\n        const url = URL.createObjectURL(file2);\n        setPreview2(url);\n        return () => URL.revokeObjectURL(url);\n    }, [file2]);\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate, orderId]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReportData(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке отчета:', err);\n            });\n    }, [orderId]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderById(orderId)\n            .then((res: AxiosResponse<Order>) => {\n                setOrder(res.data);\n            })\n            .catch(err => {\n                console.error('Ошибка при загрузке заказа:', err);\n                setError('Не удалось загрузить данные о заказе');\n            })\n            .finally(() => setLoading(false));\n    }, [orderId]);\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n    if (error || !order) {\n        return <div className=\"p-4 text-red-600\">{error || 'Заказ не найден'}</div>;\n    }\n\n    const cashback = order.product.wb_price - order.product.price;\n    const canContinue = pickedUp && file1 && file2;\n\n    // const handleDeliveryScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    //     if (e.target.files && e.target.files.length > 0) {\n    //         setDeliveryScreenshot(e.target.files[0]);\n    //     } else {\n    //         setDeliveryScreenshot(null);\n    //     }\n    // };\n    //\n    // const handleBarcodeScreenshotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    //     if (e.target.files && e.target.files.length > 0) {\n    //         setBarcodeScreenshot(e.target.files[0]);\n    //     } else {\n    //         setBarcodeScreenshot(null);\n    //     }\n    // };\n\n    const handlePickedUpChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPickedUp(e.target.checked);\n        if (!e.target.checked) {\n            setFile1(null);\n            setFile2(null);\n        }\n    };\n\n\n    const handleContinue = async () => {\n        if (!canContinue || !orderId) return;\n        try {\n            await updateOrder(orderId, {\n                step: 6,\n                delivery_screenshot: file1,\n                barcodes_screenshot: file2,\n            });\n            navigate(`/order/${orderId}/step-7`);\n        } catch (err) {\n            console.error('Ошибка при обновлении заказа:', err);\n        }\n    };\n\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank');\n    };\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto\">\n\n\n            <div className=\"bg-white border border-brand p-3 rounded-md text-sm text-gray-700 space-y-2 mb-4\">\n                <h1 className=\"text-lg font-bold text-brand\">Шаг 6. Получение товара</h1>\n                <p>\n                    Заберите товар как обычно, сделайте скрин раздела «доставки» из личного кабинета, где указана дата\n                    получения и статус \"Доставлено\". После этого разрежьте штрихкод и сделайте фото разрезанного\n                    штрихкода на фоне товара без упаковки.\n                    <div\n                        onClick={() => openModal(receivingImgPath)}\n                        className=\"underline text-blue-600 cursor-pointer\"\n                    >\n                  Пример скрина получения товара\n                </div>\n                    <div\n                        onClick={() => openModal(barcodeImgPath)}\n                        className=\"underline text-blue-600 cursor-pointer\"\n                    >\n                  Пример разрезанного штрихкода\n                </div>\n                    <div\n                        onClick={() => openModal(receiptVideoPath)}\n                        className=\"underline text-blue-600 cursor-pointer\"\n                    >\n                  Пример получения электронного чека\n                </div>\n                </p>\n                <p>\n                    Ваш кэшбэк: <strong>{cashback} руб.</strong>\n                </p>\n                <p className=\"mb-2 text-xs text-gray-500\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \"МОИ ПОКУПКИ\"</p>\n            </div>\n\n            <div className=\"flex items-center mb-4\">\n                <input\n                    type=\"checkbox\"\n                    id=\"pickedUp\"\n                    className=\"mr-2\"\n                    checked={pickedUp}\n                    onChange={handlePickedUpChange}\n                />\n                <label htmlFor=\"pickedUp\" className=\"text-sm text-gray-700\">\n                    Забрал(а) товар\n                </label>\n            </div>\n\n            {pickedUp && (\n                <>\n                    <FileUploader\n                        label=\"Скрин статуса «Доставка» (из личного кабинета)\"\n                        file={file1}\n                        preview={preview1}\n                        onFileChange={setFile1}\n                    />\n                    <FileUploader\n                        label=\"Фото разрезанных штрихкодов на фоне товара\"\n                        file={file2}\n                        preview={preview2}\n                        onFileChange={setFile2}\n                    />\n                </>\n            )}\n\n\n            <div className=\"flex flex-col gap-2 mb-4 mt-4\">\n                {/*<button*/}\n                {/*    onClick={() => window.open('https://t.me/bigblacklist_bot', '_blank')}*/}\n                {/*    className=\"flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\"*/}\n                {/*>*/}\n                {/*    Проверить продавца*/}\n                {/*</button>*/}\n                <button\n                    onClick={handleContinue}\n                    disabled={!canContinue}\n                    className={`w-full py-2 rounded text-brand mb-4 ${canContinue ? 'bg-brand hover:bg-brand' : 'bg-gray-200-400 border border-brand cursor-not-allowed'}`}\n                >\n                    Продолжить\n                </button>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n\n            <div className=\"bg-white rounded-lg shadow p-4 mt-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"flex flex-col gap-3 mt-4\">\n                <button\n                    onClick={() => setShowReport(prev => !prev)}\n                    className=\"w-full py-2 mb-2 rounded-lg bg-white border border-brand text-gray-600 font-semibold text-center\"\n                >\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\n                </button>\n\n                {showReport && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                        <h3 className=\"text-lg font-bold mb-2\">Отчет</h3>\n                        {reportData ? (\n                                <div className=\"space-y-2\">\n                                    {/* Шаг 1 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(1)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 1. Скрины корзины</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[1] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[1] && (\n                                            <div className=\"border-t p-4 space-y-3\">\n                                                {reportData.search_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин поискового запроса</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.search_screenshot_path)}\n                                                            alt=\"Скрин поискового запроса\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                                {reportData.cart_screenshot_path && (\n                                                    <div>\n                                                        <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                        <img\n                                                            src={GetUploadLink(reportData.cart_screenshot_path)}\n                                                            alt=\"Скрин корзины\"\n                                                            className=\"mt-1 w-full rounded\"\n                                                        />\n                                                    </div>\n                                                )}\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 2 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(2)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 2. Артикул товара</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[2] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[2] && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm\">{reportData.article}</p>\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 3 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(3)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 3. Товар и бренд в избранное</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[3] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[3] && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm\">Ваш товар и бренд успешно добавлены в избранное.</p>\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 4 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(4)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 4. Реквизиты</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[4] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[4] && (\n                                            <div className=\"border-t p-4 space-y-1\">\n                                                {reportData.card_number &&\n                                                    <p className=\"text-sm\">Номер карты: {reportData.card_number}</p>}\n                                                {reportData.phone_number &&\n                                                    <p className=\"text-sm\">Телефон: {reportData.phone_number}</p>}\n                                                {reportData.name && <p className=\"text-sm\">Имя: {reportData.name}</p>}\n                                                {reportData.bank && <p className=\"text-sm\">Банк: {reportData.bank}</p>}\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {/* Шаг 5 */}\n                                    <div className=\"bg-white rounded-lg shadow\">\n                                        <button\n                                            onClick={() => toggleStep(5)}\n                                            className=\"w-full flex justify-between items-center p-4 text-left\"\n                                        >\n                                            <span className=\"font-semibold\">Шаг 5. Финальный скрин корзины</span>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                className={`w-5 h-5 transform transition-transform ${\n                                                    expandedSteps[5] ? 'rotate-180' : ''\n                                                }`}\n                                                fill=\"none\"\n                                                viewBox=\"0 0 24 24\"\n                                                stroke=\"currentColor\"\n                                            >\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                      d=\"M19 9l-7 7-7-7\"/>\n                                            </svg>\n                                        </button>\n                                        {expandedSteps[5] && reportData.final_cart_screenshot_path && (\n                                            <div className=\"border-t p-4\">\n                                                <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                <img\n                                                    src={GetUploadLink(reportData.final_cart_screenshot_path)}\n                                                    alt=\"Финальный скрин корзины\"\n                                                    className=\"w-full rounded\"\n                                                />\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    <div className=\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\">\n                                        <div className=\"font-semibold text-black\">Шаг 6. Получение товара</div>\n                                        <div className=\"font-semibold text-gray-400\">Шаг 7. Отзыв</div>\n                                    </div>\n                                </div>\n\n                            ) :\n                            <p className=\"text-sm text-gray-500\">Отчет пока пуст.</p>\n                        }\n                    </div>\n                )}\n                <div className=\"flex flex-col gap-3 text-center\">\n\n                    <button\n                        onClick={handleChannelClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\n                         justify-center gap-2\">\n                        <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-6 h-6\"/>\n                        <span>Подписаться на канал</span>\n                    </button>\n                    <button\n                        onClick={handleSupportClick}\n                        className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\">\n                        Нужна помощь\n                    </button>\n                </div>\n                {modalContent && (\n                    <div\n                        className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\"\n                        onClick={closeModal}\n                    >\n                        <div\n                            className=\"relative bg-white p-4 rounded max-w-lg max-h-[80vh] overflow-auto\"\n                            onClick={e => e.stopPropagation()}\n                        >\n                            {/* Крестик в правом верхнем углу */}\n                            <button\n                                onClick={closeModal}\n                                className=\"absolute top-2 right-2 bg-white rounded-full p-1 text-2xl text-gray-700 hover:text-gray-900\"\n                            >\n                                &times;\n                            </button>\n\n                            {modalContent.isVideo ? (\n                                <video width=\"100%\" height=\"auto\" controls>\n                                    <source src={modalContent.src} type=\"video/mp4\" />\n                                    Ваш браузер не поддерживает видео.\n                                </video>\n                            ) : (\n                                <img src={modalContent.src} alt=\"Пример\" className=\"w-full h-auto\" />\n                            )}\n                        </div>\n                    </div>\n                )}\n\n            </div>\n        </div>\n    )\n        ;\n}\n\nexport default ProductPickupPage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/FinalDealPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getOrderById, getOrderReport} from '../../services/api';\nimport {AxiosResponse} from 'axios';\nimport {on} from \"@telegram-apps/sdk\";\nimport GetUploadLink from \"../../components/GetUploadLink\";\nimport {OrderStatus, PayoutTime} from \"../../enums\";\n\ninterface Product {\n    id: string;\n    name: string;\n    price?: number;\n    wb_price?: number;\n    seller_id: string;\n    payment_time: string;\n    tg: string;\n    image_path: string;\n}\n\ninterface UserInOrder {\n    nickname: string;\n}\n\ninterface Order {\n    id: string;\n    product: Product;\n    user: UserInOrder;\n    sellerNickname?: string;\n    card_number?: string;\n    phone_number?: string;\n    bank?: string;\n    name?: string;\n    status?: OrderStatus;\n}\n\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    article?: string;\n}\n\n// function getDeadline(): string {\n//     const now = new Date();\n//     const plusTwoWeeks = new Date(now.getTime() + 14 * 24 * 60 * 60 * 1000);\n//     const day = String(plusTwoWeeks.getDate()).padStart(2, '0');\n//     const month = String(plusTwoWeeks.getMonth() + 1).padStart(2, '0');\n//     const year = plusTwoWeeks.getFullYear();\n//     return `${day}.${month}.${year}`;\n// }\n\nfunction FinalDealPage() {\n    const {orderId} = useParams<{ orderId: string }>();\n    const [order, setOrder] = useState<Order | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const navigate = useNavigate();\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\n    const [showReport, setShowReport] = useState(false);\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\n\n    const toggleStep = (step: number) => {\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\n    };\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate]);\n\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReportData(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке отчета:', err);\n            });\n    }, [orderId]);\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderById(orderId)\n            .then((response: AxiosResponse<Order>) => {\n                setOrder(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке заказа:', err);\n                setError('Не удалось загрузить заказ');\n            })\n            .finally(() => setLoading(false));\n    }, [orderId]);\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n    if (error || !order) {\n        return <div className=\"p-4 text-red-600\">{error || 'Заказ не найден'}</div>;\n    }\n\n    const {product, status} = order;\n    const productName = product.name || 'Без названия';\n    const productPrice = product.price ?? 0;\n    const productWbPrice = product.wb_price ?? 0;\n    const cashback = productWbPrice - productPrice;\n    // const deadline = getDeadline();\n    const handleHomeClick = () => navigate('/');\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto space-y-4\">\n\n            <div className=\"flex items-center space-x-3\">\n                <img\n                    src={GetUploadLink(product.image_path)}\n                    alt=\"Фото товара\"\n                    className=\"w-12 h-12 rounded-full object-cover\"\n                />\n                <div>\n                    <div className=\"font-semibold text-sm\">{productName}</div>\n                    <div className=\"text-xs text-gray-600\">\n                        {productPrice ? `${productPrice} руб.` : 'NaN руб'}\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"bg-white border border-brand p-3 rounded-md text-sm text-gray-700 space-y-2\">\n                <p>Ваш отчет передан продавцу.</p>\n                <p>\n                    В случае задержек оплаты и любые другие вопросы по кэшбэку решайте напрямую\n                    с продавцом.\n                </p>\n                <p>\n                    Если продавец окажется мошенником, будет создана отдельная группа, куда будут\n                    добавлены все обманутые покупатели и продавец.\n                </p>\n                <p>\n                    Ваш кэшбэк: <strong>{cashback} руб.</strong>\n                </p>\n                {/*<p>*/}\n                {/*    Крайний срок выплаты кешбека: <strong>{deadline}</strong>*/}\n                {/*</p>*/}\n                {/*<p>*/}\n                {/*    Статус: <strong>{status || 'Неизвестен'}</strong>*/}\n                {/*</p>*/}\n            </div>\n\n\n            <div className=\"flex justify-between items-center text-sm\">\n                <div>Покупатель: {order.user.nickname}</div>\n\n                <div>Продавец: {order.product.tg}</div>\n            </div>\n\n            <div className=\"bg-white border border-brand p-3 rounded-md space-y-1 text-sm\">\n                <div className=\"font-semibold\">Сделка</div>\n                <div>Условия оплаты: {product.payment_time}</div>\n                <div>Сумма покупки: {productWbPrice} руб.</div>\n                <div>Цена для вас: {productPrice} руб.</div>\n                <div>Кэшбэк: {cashback} руб.</div>\n                {/*<div>Крайний срок: {deadline}</div>*/}\n                <div>Статус оплаты: {status || 'Неизвестен'}</div>\n            </div>\n\n            <div className=\"bg-white border border-brand p-3 rounded-md space-y-1 text-sm\">\n                <div className=\"font-semibold\">Реквизиты</div>\n                <div>Номер карты: {order.card_number || '—'}</div>\n                <div>Номер телефона: {order.phone_number || '—'}</div>\n                <div>Банк: {order.bank || '—'}</div>\n                <div>Получатель: {order.name || '—'}</div>\n            </div>\n\n            <div className=\"flex flex-col space-y-2\">\n                <button\n                    onClick={() => setShowReport(prev => !prev)}\n                    className=\"w-full py-2 mb-4 bg-white rounded-lg border border-brand text-gray-600 font-semibold text-center\"\n                >\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\n                </button>\n\n\n                {showReport && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                        <h3 className=\"text-lg font-bold mb-2\">Отчет</h3>\n                        {reportData ? (\n                            <div className=\"space-y-2\">\n                                {/* Шаг 1 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(1)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 1. Скрины корзины</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[1] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[1] && (\n                                        <div className=\"border-t p-4 space-y-3\">\n                                            {reportData.search_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин поискового запроса</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\n                                                        alt=\"Скрин поискового запроса\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                            {reportData.cart_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\n                                                        alt=\"Скрин корзины\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 2 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(2)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 2. Артикул товара</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[2] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[2] && (\n                                        <div className=\"border-t p-4\">\n                                            <p className=\"text-sm\">{reportData.article}</p>\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 3 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(3)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 3. Товар и бренд в избранное</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[3] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[3] && (\n                                        <div className=\"border-t p-4\">\n                                            <p className=\"text-sm\">Ваш товар и бренд успешно добавлены в избранное.</p>\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 4 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(4)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 4. Реквизиты</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[4] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[4] && (\n                                        <div className=\"border-t p-4 space-y-1\">\n                                            {reportData.card_number &&\n                                                <p className=\"text-sm\">Номер карты: {reportData.card_number}</p>}\n                                            {reportData.phone_number &&\n                                                <p className=\"text-sm\">Телефон: {reportData.phone_number}</p>}\n                                            {reportData.name && <p className=\"text-sm\">Имя: {reportData.name}</p>}\n                                            {reportData.bank && <p className=\"text-sm\">Банк: {reportData.bank}</p>}\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 5 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(5)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 5. Финальный скрин корзины</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[5] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[5] && reportData.final_cart_screenshot_path && (\n                                        <div className=\"border-t p-4\">\n                                            <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                            <img\n                                                src={GetUploadLink(reportData.final_cart_screenshot_path)}\n                                                alt=\"Финальный скрин корзины\"\n                                                className=\"w-full rounded\"\n                                            />\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 6 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(6)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 6. Скрины доставки и штрихкодов</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[6] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[6] && (\n                                        <div className=\"border-t p-4 space-y-3\">\n                                            {reportData.delivery_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин доставки</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.delivery_screenshot_path)}\n                                                        alt=\"Скрин доставки\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                            {reportData.barcodes_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин штрихкодов</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.barcodes_screenshot_path)}\n                                                        alt=\"Скрин штрихкодов\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 7 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(7)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 7. Отзыв и чек</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[7] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[7] && (\n                                        <div className=\"border-t p-4 space-y-3\">\n                                            {reportData.review_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин отзыва</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.review_screenshot_path)}\n                                                        alt=\"Скрин отзыва\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                            {reportData.receipt_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин электронного чека</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.receipt_screenshot_path)}\n                                                        alt=\"Скрин электронного чека\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                            {reportData.receipt_number && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Номер чека</p>\n                                                    <p className=\"text-sm\">{reportData.receipt_number}</p>\n                                                </div>\n                                            )}\n\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        ) :\n                            <p className=\"text-sm text-gray-500\">Отчет пока пуст.</p>\n                        }\n                    </div>\n\n                )}\n                <button\n                    onClick={handleHomeClick}\n                    className=\"py-2 px-4 rounded-lg text-sm font-semibold border border-brand text-brand bg-transparent w-auto\"\n                >\n                    На главную\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default FinalDealPage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/InstructionPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useLocation, useNavigate, useParams} from 'react-router-dom';\nimport {getProductById} from '../../services/api';\nimport {AxiosResponse} from 'axios';\nimport {on} from \"@telegram-apps/sdk\";\n\nfunction translatePaymentTime(value: string): string {\n    switch (value) {\n        case 'AFTER_REVIEW':\n            return 'После отзыва';\n        case 'AFTER_DELIVERY':\n            return 'После получения товара';\n        case 'ON_15TH_DAY':\n            return 'На 15-й день';\n        default:\n            return value;\n    }\n}\n\ninterface Product {\n    id: string;\n    name: string;\n    brand: string;\n    article: string;\n    price: number;\n    wb_price: number;\n    tg: string;\n    payment_time: string;\n    review_requirements: string;\n}\n\nfunction InstructionPage() {\n    const {productId} = useParams<{ productId: string }>();\n    const navigate = useNavigate();\n\n    const [product, setProduct] = useState<Product | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const { search } = useLocation();\n    const preview = new URLSearchParams(search).get('preview') === '1';\n\n    const [agreeRules, setAgreeRules] = useState(false);\n    const [agreePersonalData, setAgreePersonalData] = useState(false);\n\n    useEffect(() => {\n        if (!productId) return;\n        getProductById(productId)\n            .then((response: AxiosResponse<Product>) => {\n                setProduct(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке товара:', err);\n                setError('Не удалось загрузить данные о товаре');\n            })\n            .finally(() => setLoading(false));\n    }, [productId]);\n\n    const canContinue = agreeRules && agreePersonalData;\n\n    const getTelegramLink = (tg: string) => {\n        const username = tg.startsWith('@') ? tg.slice(1) : tg;\n        return `https://t.me/${username}`;\n    };\n\n    const handleContinue = () => {\n        if (!canContinue) return;\n        navigate(`/product/${productId}/step-1`);\n    };\n    const handleHomeClick = () => {\n        navigate(`/`);\n    };\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n\n        return () => {\n            removeBackListener();\n        };\n    }, [productId, navigate]);\n\n    if (loading) {\n        return <div className=\"p-4\">Загрузка...</div>;\n    }\n    if (error || !product) {\n        return <div className=\"p-4 text-red-600\">{error || 'Товар не найден'}</div>;\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-200 flex items-center justify-center p-4\">\n            <div className=\"fixed top-6 left-6 z-50 bg-brandlight rounded-lg p-2 flex items-center justify-center\">\n                <button onClick={handleHomeClick} aria-label=\"На главную\">\n                    <img src=\"/icons/home.png\" alt=\"Домой\" className=\"w-6 h-6\" />\n                </button>\n            </div>\n            <div className=\"max-w-screen-md w-full bg-white rounded-lg shadow-lg p-6\">\n                <h1 className=\"text-2xl font-bold mb-6 text-center\">Правила и условия</h1>\n                <p className=\"text-base text-gray-800 mb-4\">\n                    Перед тем как начнем, пожалуйста, внимательно прочитайте все условия:\n                </p>\n\n                {/* Блок с правилами */}\n                <div className=\"mb-6\">\n                    <h2 className=\"text-xl font-semibold text-blue-600 mb-3\">Правила:</h2>\n                    <div className=\"bg-white rounded-lg p-4 border border-darkGray\">\n                        <ol className=\"list-decimal list-inside text-base text-gray-800 space-y-2\">\n                            <li>\n                                Вы заключаете сделку с продавцом{' '}\n                                <strong>\n                                    <a\n                                        href={getTelegramLink(product.tg)}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        className=\"text-blue-600 hover:underline\"\n                                    >\n                                        {product.tg}\n                                    </a>\n                                </strong>. Бот не несет ответственности за выплату.\n                            </li>\n                            <li>\n                                При задержках оплаты и любые другие вопросы по кэшбэку решайте напрямую с продавцом.\n                            </li>\n                            <li>\n                                Если продавец окажется мошенником, будет создана отдельная группа для обманутых\n                                покупателей.\n                            </li>\n                            <li>\n                                Бот — это пошаговая инструкция, и мы не несем ответственность за выплату.\n                            </li>\n                            <li>\n                                Продолжая, вы соглашаетесь с указанными условиями сделки.\n                            </li>\n                        </ol>\n                    </div>\n                </div>\n\n                <div className=\"mb-6\">\n                    <h2 className=\"text-xl font-bold mb-3 text-blue-600\">Условия сделки:</h2>\n                    <div className=\"bg-white rounded-lg p-4 border border-darkGray\">\n                        <ol className=\"list-decimal list-inside text-base text-gray-800 space-y-2\">\n                            <li>\n                                Цена на сайте: <strong>{product.wb_price} руб.</strong>\n                            </li>\n                            <li>\n                                <span className=\"font-semibold text-brand\">Цена для вас:</span>\n                                <strong> {product.price} руб.</strong>\n                            </li>\n                            <li>\n                                Кэшбэк: <strong>{translatePaymentTime(product.payment_time)}</strong>\n                            </li>\n                            <li>\n                                Если возникнут вопросы — напишите продавцу в Telegram:{' '}\n                                <strong>\n                                    <a\n                                        href={getTelegramLink(product.tg)}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        className=\"text-blue-600 hover:underline\"\n                                    >\n                                        {product.tg}\n                                    </a>\n                                </strong>\n                            </li>\n                        </ol>\n                    </div>\n                </div>\n                {!preview && (\n                <div className=\"mb-6\">\n                    <div className=\"flex items-center mb-3\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"agreeRules\"\n                            className=\"mr-3\"\n                            checked={agreeRules}\n                            onChange={(e) => setAgreeRules(e.target.checked)}\n                        />\n                        <label htmlFor=\"agreeRules\" className=\"text-base text-gray-800\">\n                            Я соглашаюсь с условиями сделки\n                        </label>\n                    </div>\n                    <div className=\"flex items-center\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"agreeData\"\n                            className=\"mr-3\"\n                            checked={agreePersonalData}\n                            onChange={(e) => setAgreePersonalData(e.target.checked)}\n                        />\n                        <label htmlFor=\"agreeData\" className=\"text-base text-gray-800\">\n                            Даю согласие на обработку персональных данных\n                        </label>\n                    </div>\n\n                <button\n                    onClick={handleContinue}\n                    disabled={!canContinue}\n                    className={`w-full py-2 rounded-lg text-base font-semibold mt-2 ${\n                        canContinue\n                            ? 'bg-brand text-brand hover:bg-blue-700'\n                            : 'bg-gray-200-400 border border-brand text-gray-700 cursor-not-allowed'\n                    } mb-2`}\n                >\n                    Продолжить\n                </button>\n                </div>\n                )}\n\n            </div>\n        </div>\n    );\n}\n\nexport default InstructionPage;\n"
  },
  {
    "path": "frontend/src/pages/order_flow/PaymentDetailsPage.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {getOrderReport, updateOrder} from '../../services/api';\nimport {on} from \"@telegram-apps/sdk\";\nimport {AxiosResponse} from \"axios\";\nimport GetUploadLink from \"../../components/GetUploadLink\";\n\n\ninterface OrderReport {\n    step: number;\n    search_screenshot_path?: string;\n    cart_screenshot_path?: string;\n    card_number?: string;\n    phone_number?: string;\n    name?: string;\n    bank?: string;\n    final_cart_screenshot_path?: string;\n    delivery_screenshot_path?: string;\n    barcodes_screenshot_path?: string;\n    review_screenshot_path?: string;\n    receipt_screenshot_path?: string;\n    receipt_number?: string;\n    article: string;\n}\n\nfunction PaymentDetailsPage() {\n    const navigate = useNavigate();\n    const {orderId} = useParams<{ orderId: string }>();\n\n    const [cardNumber, setCardNumber] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [fullName, setFullName] = useState('');\n    const [selectedBank, setSelectedBank] = useState('');\n    const [reportData, setReportData] = useState<OrderReport | null>(null);\n    const [showReport, setShowReport] = useState(false);\n    const [agreed, setAgreed] = useState(false);\n    const [otherBank, setOtherBank] = useState('');\n    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});\n\n    const toggleStep = (step: number) => {\n        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));\n    };\n    const handleChange = (e: any) => {\n        setSelectedBank(e.target.value);\n        if (e.target.value !== 'Другое') {\n            setOtherBank('');\n        }\n    };\n    const canContinue =\n        cardNumber.trim() !== '' &&\n        phoneNumber.trim() !== '' &&\n        fullName.trim() !== '' &&\n        selectedBank !== '' &&\n        agreed;\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => {\n            navigate(-1);\n        });\n        return () => {\n            removeBackListener();\n        };\n    }, [navigate, orderId]);\n\n\n    useEffect(() => {\n        if (!orderId) return;\n        getOrderReport(orderId)\n            .then((response: AxiosResponse<OrderReport>) => {\n                setReportData(response.data);\n            })\n            .catch((err) => {\n                console.error('Ошибка при загрузке отчета:', err);\n            });\n    }, [orderId]);\n\n    const handleContinueClick = async () => {\n        if (!canContinue || !orderId) return;\n        try {\n            await updateOrder(orderId, {\n                step: 4,\n                card_number: cardNumber,\n                phone_number: phoneNumber,\n                name: fullName,\n                bank: selectedBank,\n            });\n            navigate(`/order/${orderId}/step-5`);\n        } catch (err) {\n            console.error('Ошибка при обновлении заказа:', err);\n        }\n    };\n\n    const handleChannelClick = () => {\n        window.open('https://t.me/Premiumcash1', '_blank'); //todo\n    };\n    const handleSupportClick = () => {\n        if (window.Telegram?.WebApp?.close) {\n            window.Telegram.WebApp.close();\n        }\n        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');\n    };\n\n\n    return (\n        <div className=\"p-4 max-w-screen-md bg-gray-200 mx-auto\">\n\n            <div className=\"bg-white border border-brand rounded-lg shadow p-4 space-y-4 mb-4\">\n\n                <h1 className=\"text-lg font-bold text-brand\">Шаг 4. Реквизиты для перевода кэшбэка</h1>\n                <p className=\"mb-2 text-xs text-gray-500\">ВЫ ВСЕГДА МОЖЕТЕ ВЕРНУТЬСЯ К ЭТОМУ ШАГУ В РАЗДЕЛЕ \"МОИ ПОКУПКИ\"</p>\n\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Номер карты\n                    </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Введите номер карты\"\n                        value={cardNumber}\n                        onChange={(e) => setCardNumber(e.target.value)}\n                        className=\"w-full border border-darkGray rounded p-2 text-sm\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Номер телефона\n                    </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Введите номер телефона\"\n                        value={phoneNumber}\n                        onChange={(e) => setPhoneNumber(e.target.value)}\n                        className=\"w-full border border-darkGray rounded p-2 text-sm\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Фамилия и имя\n                    </label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Введите фамилию и имя\"\n                        value={fullName}\n                        onChange={(e) => setFullName(e.target.value)}\n                        className=\"w-full border border-darkGray rounded p-2 text-sm\"\n                    />\n                </div>\n\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Выберите банк\n                    </label>\n                    <select\n                        value={selectedBank}\n                        onChange={handleChange}\n                        className=\"w-full border border-darkGray rounded p-2 text-sm\"\n                    >\n                        <option value=\"\">Выберите...</option>\n                        <option value=\"Сбербанк\">Сбербанк</option>\n                        <option value=\"Тинькофф\">Тинькофф</option>\n                        <option value=\"Альфа-банк\">Альфа-банк</option>\n                        <option value=\"ВТБ\">ВТБ</option>\n                        <option value=\"Рнкб\">Рнкб</option>\n                        <option value=\"Газпромбанк\">Газпромбанк</option>\n                        <option value=\"Открытие\">Открытие</option>\n                        <option value=\"Райффайзен банк\">Райффайзен банк</option>\n                        <option value=\"Озон банк\">Озон банк</option>\n                        <option value=\"УБРиР\">УБРиР</option>\n                        <option value=\"Хоум кредит\">Хоум кредит</option>\n                        <option value=\"Яндекс\">Яндекс</option>\n                        <option value=\"Другое\">Другое</option>\n                    </select>\n                    {selectedBank === 'Другое' && (\n                        <div className=\"mt-2\">\n                            <label className=\"block text-sm font-medium text-gray-700\">Введите банк</label>\n                            <input\n                                type=\"text\"\n                                value={otherBank}\n                                onChange={(e) => setOtherBank(e.target.value)}\n                                className=\"w-full border border-darkGray rounded p-2 text-sm\"\n                                placeholder=\"Введите название банка\"\n                            />\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"agreeCorrectness\"\n                        checked={agreed}\n                        onChange={(e) => setAgreed(e.target.checked)}\n                        className=\"w-4 h-4\"\n                    />\n                    <label htmlFor=\"agreeCorrectness\" className=\"text-sm text-gray-700\">\n                        Подтверждаю правильность\n                    </label>\n                </div>\n            </div>\n\n            <button\n                onClick={handleContinueClick}\n                disabled={!canContinue}\n                className={`w-full py-2 rounded text-brand mb-4 ${\n                    canContinue\n                        ? 'bg-brand hover:bg-brand'\n                        : 'bg-gray-200-400 border border-brand cursor-not-allowed'\n                }`}\n            >\n                Продолжить\n            </button>\n\n            <button\n                onClick={() => window.open('https://t.me/Premiumcashb/1153', '_blank')}\n                className=\"w-full flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center\"\n            >\n                Проверить продавца\n            </button>\n\n            <div className=\"bg-white rounded-lg shadow p-4 mt-4\">\n                <p className=\"text-base font-medium mb-2\">Инструкция</p>\n                <div className=\"aspect-w-16 aspect-h-9 bg-black\">\n                    <iframe\n                        title=\"Инструкция\"\n                        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n                        allowFullScreen\n                        className=\"w-full h-full\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"flex flex-col space-y-2 mt-4\">\n                <button\n                    onClick={() => setShowReport(prev => !prev)}\n                    className=\"w-full py-2 mb-4 bg-white rounded-lg border border-brand text-gray-600 font-semibold text-center\"\n                >\n                    {showReport ? 'Скрыть отчет' : 'Открыть отчет'}\n                </button>\n\n\n                {showReport && (\n                    <div className=\"bg-white rounded-lg shadow p-4 mb-4\">\n                        <h3 className=\"text-lg font-bold mb-2\">Отчет</h3>\n                        {reportData ? (\n                            <div className=\"space-y-2\">\n                                {/* Шаг 1 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(1)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 1. Скрины корзины</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[1] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[1] && (\n                                        <div className=\"border-t p-4 space-y-3\">\n                                            {reportData.search_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин поискового запроса</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.search_screenshot_path)}\n                                                        alt=\"Скрин поискового запроса\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                            {reportData.cart_screenshot_path && (\n                                                <div>\n                                                    <p className=\"text-sm font-semibold\">Скрин корзины</p>\n                                                    <img\n                                                        src={GetUploadLink(reportData.cart_screenshot_path)}\n                                                        alt=\"Скрин корзины\"\n                                                        className=\"mt-1 w-full rounded\"\n                                                    />\n                                                </div>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 2 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(2)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 2. Артикул товара</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[2] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[2] && (\n                                        <div className=\"border-t p-4\">\n                                            <p className=\"text-sm\">{reportData.article}</p>\n                                        </div>\n                                    )}\n                                </div>\n\n                                {/* Шаг 3 */}\n                                <div className=\"bg-white rounded-lg shadow\">\n                                    <button\n                                        onClick={() => toggleStep(3)}\n                                        className=\"w-full flex justify-between items-center p-4 text-left\"\n                                    >\n                                        <span className=\"font-semibold\">Шаг 3. Товар и бренд в избранное</span>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            className={`w-5 h-5 transform transition-transform ${\n                                                expandedSteps[3] ? 'rotate-180' : ''\n                                            }`}\n                                            fill=\"none\"\n                                            viewBox=\"0 0 24 24\"\n                                            stroke=\"currentColor\"\n                                        >\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\n                                                  d=\"M19 9l-7 7-7-7\"/>\n                                        </svg>\n                                    </button>\n                                    {expandedSteps[3] && (\n                                        <div className=\"border-t p-4\">\n                                            <p className=\"text-sm\">Ваш товар и бренд успешно добавлены в избранное.</p>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm\">\n                                    <div className=\"font-semibold text-black\">Шаг 4. Реквизиты для перевода кэшбэка\n                                    </div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 5. Оформление заказа</div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 6. Получение товара</div>\n                                    <div className=\"font-semibold text-gray-400\">Шаг 7. Отзыв</div>\n                                </div>\n\n\n                            </div>\n                        ) : (\n                            <p className=\"text-sm text-gray-500\">Отчет пока пуст.</p>\n                        )}\n                    </div>\n                )}\n            </div>\n\n            <div className=\"flex flex-col gap-3 mt-2 text-center\">\n\n                <button\n                    onClick={handleChannelClick}\n                    className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center\n                         justify-center gap-2\">\n                    <img src=\"/icons/telegram.png\" alt=\"Telegram\" className=\"w-6 h-6\"/>\n                    <span>Подписаться на канал</span>\n                </button>\n                <button\n                    onClick={handleSupportClick}\n                    className=\"bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold\">\n                    Нужна помощь\n                </button>\n            </div>\n        </div>\n)}\n\nexport default PaymentDetailsPage;\n"
  },
  {
    "path": "frontend/src/services/api.ts",
    "content": "import {apiClient} from \"./apiClient\";\nimport {MeResponse} from \"../types/MeResponse\";\nimport {AxiosResponse} from \"axios\";\n\n\nexport interface GetProductsParams {\n    search?: string;\n    limit?: number;\n    offset?: number;\n}\n\ninterface Product {\n    id: string;\n    name: string;\n    description?: string;\n    price: number;\n    article: string;\n    category: string;\n    seller_id: string;\n    image_path?: string;\n}\n\n\nexport async function getProducts(\n    params?: GetProductsParams): Promise<AxiosResponse<Product[]>> {\n    return apiClient.get<Product[]>('/products', {params})\n}\n\nexport async function getProductById(productId: string) {\n    return apiClient.get(`/products/${productId}`);\n}\n\nexport async function getUserOrders() {\n    return apiClient.get(`/users/orders`);\n}\n\nexport async function getOrderById(orderId: string) {\n    return apiClient.get(`/orders/${orderId}`);\n}\n\n// export async function getProductByArticle(article: string) {\n//     return apiClient.get(`/products/article?acticle=${article}`);\n// }\n\nexport async function getProductsBySellerId() {\n    return apiClient.get(`/products/seller`);\n}\n\n\nexport async function createProduct(formData: FormData): Promise<string> {\n    const response = await apiClient.post('/products', formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n    return response.data;\n}\n\nexport async function updateProduct(productId: string, formData: FormData): Promise<string> {\n    const response = await apiClient.patch(`/products/${productId}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n    console.log(response.request.formData);\n    return response.data;\n}\n\nexport async function updateProductStatus(productId: string, formData: FormData): Promise<string> {\n    const response = await apiClient.patch(`/products/status/${productId}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n    console.log(response.request.formData);\n    return response.data;\n}\n\nexport async function getMe(): Promise<MeResponse> {\n    return (await apiClient.get<MeResponse>(`users/me`)).data;\n}\n\nexport async function createOrder(formData: FormData) {\n    return apiClient.post('/orders', formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n}\n\nexport async function getOrderReport(orderId: string) {\n    return apiClient.get(`/users/orders/report/${orderId}`);\n}\n\nexport async function getOrderBySellerId(sellerId: string) {\n    return apiClient.get(`/users/orders/reports/${sellerId}`);\n}\n\n\nexport async function increaseSellerBalance(sellerId: string, balance: FormData) {\n    return apiClient.patch(`/users/balance/${sellerId}`, balance, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n}\n\nexport async function getSellerBalance(sellerId: string) {\n    return apiClient.get(`/users/balance/${sellerId}`);\n}\n\nexport async function updateOrderStatus(orderId: string, formData: FormData) {\n    return apiClient.patch(`/orders/status/${orderId}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n}\n\nexport async function updateOrder(\n    orderId: string,\n    data: {\n        step?: number;\n        search_screenshot_path?: File;\n        cart_screenshot_path?: File;\n        card_number?: string;\n        phone_number?: string;\n        name?: string;\n        bank?: string;\n        final_cart_screenshot?: File;\n        delivery_screenshot?: File;\n        barcodes_screenshot?: File;\n        review_screenshot?: File;\n        receipt_screenshot?: File;\n        receipt_number?: string;\n        status?: string;\n    }\n) {\n    const formData = new FormData();\n\n    if (data.step !== undefined) {\n        formData.append('step', data.step.toString());\n    }\n    if (data.card_number) {\n        formData.append('card_number', data.card_number);\n    }\n    if (data.phone_number) {\n        formData.append('phone_number', data.phone_number);\n    }\n    if (data.name) {\n        formData.append('name', data.name);\n    }\n    if (data.bank) {\n        formData.append('bank', data.bank);\n    }\n    if (data.receipt_number) {\n        formData.append('receipt_number', data.receipt_number);\n    }\n    if (data.status) {\n        formData.append('status', data.status);\n    }\n\n    if (data.search_screenshot_path) {\n        formData.append('search_screenshot_path', data.search_screenshot_path);\n    }\n    if (data.cart_screenshot_path) {\n        formData.append('cart_screenshot_path', data.cart_screenshot_path);\n    }\n    if (data.final_cart_screenshot) {\n        formData.append('final_cart_screenshot', data.final_cart_screenshot);\n    }\n    if (data.delivery_screenshot) {\n        formData.append('delivery_screenshot', data.delivery_screenshot);\n    }\n    if (data.barcodes_screenshot) {\n        formData.append('barcodes_screenshot', data.barcodes_screenshot);\n    }\n    if (data.review_screenshot) {\n        formData.append('review_screenshot', data.review_screenshot);\n    }\n    if (data.receipt_screenshot) {\n        formData.append('receipt_screenshot', data.receipt_screenshot);\n    }\n\n    const response = await apiClient.patch(`/orders/${orderId}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n\n    return response.data;\n}\n\n\nexport async function getUsers() {\n    return apiClient.get('/moderator/users');\n}\n\nexport async function getModerators() {\n    return apiClient.get('/moderator/users/moderators');\n}\n\nexport async function getSellers() {\n    return apiClient.get('/moderator/users/sellers');\n}\n\nexport async function getClients() {\n    return apiClient.get('/moderator/users/clients');\n}\n\nexport async function getBannedUsers() {\n    return apiClient.get('/moderator/users/banned');\n}\n\nexport async function getUser(userId: string) {\n    return apiClient.get(`/moderator/users/${userId}`);\n}\n\nexport async function banUser(userId: string) {\n    return apiClient.post(`/moderator/users/${userId}/ban`);\n}\n\nexport async function unbanUser(userId: string) {\n    return apiClient.post(`/moderator/users/${userId}/unban`);\n}\n\nexport async function promoteUser(userId: string) {\n    return apiClient.post(`/moderator/users/${userId}/promote`);\n}\n\nexport async function demoteUser(userId: string) {\n    return apiClient.post(`/moderator/users/${userId}/demote`);\n}\n\nexport async function getModeratorProducts() {\n    return apiClient.get('/moderator/products');\n}\n\nexport async function getProductsToReview() {\n    return apiClient.get('/moderator/products/to-review');\n}\n\nexport async function getModeratorProductById(productId: string) {\n    return apiClient.get(`/moderator/products/${productId}`);\n}\n\nexport async function reviewProduct(\n    productId: string,\n    data: { status: string; commentModerator: string; commentSeller: string }) {\n    return apiClient.patch(`/moderator/products/${productId}`, data, {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n\n}\n\nexport const fetchPushes = async () => {\n    try {\n        const response = await apiClient.get(`/moderator/pushes`);\n        return response.data;\n    } catch (error) {\n        console.error('Ошибка получения push рассылок:', error);\n        throw error;\n    }\n};\n\nexport const createPush = async (formData: FormData) => {\n    try {\n        await apiClient.post(`/moderator/pushes`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n    } catch (error) {\n        console.error('Ошибка создания push рассылки:', error);\n        throw error;\n    }\n};\n\nexport const getPush = async (pushId: string) => {\n    return apiClient.get(`/moderator/pushes/${pushId}`);\n}\n\nexport const activatePush = async (pushId: string, data: { userIds: string[] }) => {\n    return apiClient.post(`/moderator/pushes/${pushId}/activate`, data.userIds, {\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    });\n}\n\nexport const deletePush = async (pushId: string) => {\n    return apiClient.delete(`/moderator/pushes/${pushId}`);\n}\n\nexport const updatePush = async (pushId: string, formData: FormData) => {\n    return apiClient.patch(`/moderator/pushes/${pushId}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        }\n    });\n}\n\nexport async function increaseReferralBonus(userId: string, data: { bonus: number }) {\n    return apiClient.post(`/moderator/users/${userId}/use-discount`, data, {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n}\n\nexport async function markDiscountUsed(userId: string) {\n    return apiClient.get(`/moderator/users/${userId}/referral-purchase`);\n}\n\nexport async function useDiscount(userId: string) {\n    return apiClient.post(`/moderator/users/${userId}/use-discount`);\n}\n\n\nexport async function getInviteLink() {\n    return apiClient.get(`/users/invite`);\n}\n\n"
  },
  {
    "path": "frontend/src/services/apiClient.ts",
    "content": "import axios, { AxiosError, AxiosInstance } from \"axios\";\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\n\nconst BASE_URL = process.env.REACT_APP_API_BASE;\n\nexport const apiClient: AxiosInstance = axios.create({\n    baseURL: BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"ngrok-skip-browser-warning\": true\n    },\n});\n\ninterface RefreshedTokens {\n    access_token: string;\n    refresh_token: string;\n}\n\nfunction getAccessToken(): string | null {\n    return localStorage.getItem(\"authToken\");\n}\n\nfunction getRefreshToken(): string | null {\n    return localStorage.getItem(\"refreshToken\");\n}\n\nconst refreshAuthLogic = async (failedRequest: AxiosError) => {\n    try {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) throw new Error(\"No refresh token found\");\n\n        const response = await apiClient.post<RefreshedTokens>(\"/auth/refresh\", {}, {\n            headers: {\n                \"X-Refresh-Token\": refreshToken,\n            },\n        });\n\n        localStorage.setItem(\"authToken\", response.data.access_token);\n        localStorage.setItem(\"refreshToken\", response.data.refresh_token);\n\n        failedRequest.response!.config.headers[\"Authorization\"] = `Bearer ${response.data.access_token}`;\n        return Promise.resolve();\n    } catch (error) {\n        console.error(\"Failed to refresh token\", error);\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n        return Promise.reject(error);\n    }\n};\n\ncreateAuthRefreshInterceptor(apiClient, refreshAuthLogic, {\n    pauseInstanceWhileRefreshing: true,\n});\n\napiClient.interceptors.request.use(\n    (config) => {\n        const token = getAccessToken();\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n"
  },
  {
    "path": "backend/locustfile.py",
    "content": "# locustfile.py\n\nfrom locust import HttpUser, task, between, SequentialTaskSet\n\n# Общие задачи покупателя\nclass BuyerBehavior(SequentialTaskSet):\n    wait_time = between(1, 3)\n\n    @task\n    def view_catalog(self):\n        self.client.get(\"/products\", name=\"GET /products\")\n\n    @task\n    def view_product(self):\n        self.client.get(\n            \"/products/fb4b1641-8cc9-44fa-a604-3f5cedd4b720\",\n            name=\"GET /products/[product_id]\"\n        )\n\n    @task\n    def view_order_history(self):\n        self.client.get(\"/users/orders\", name=\"GET /orders\")\n\n\n# Общие задачи продавца и модератора\nclass SellerBehavior(SequentialTaskSet):\n    wait_time = between(2, 5)\n\n    @task\n    def list_my_products(self):\n        self.client.get(\"/products/seller\", name=\"GET /users/products\")\n\n    @task\n    def update_price(self):\n        self.client.patch(\n            \"/products/fb4b1641-8cc9-44fa-a604-3f5cedd4b720\",\n            json={\"price\": 100},\n            name=\"PATCH /products/[product_id]\"\n        )\n\n    # Общие задачи продавца и модератора\nclass ModeratorBehavior(SequentialTaskSet):\n    wait_time = between(2, 5)\n\n    @task\n    def list_reviews(self):\n        self.client.get(\"/reviews\", name=\"GET /reviews\")\n\n    @task\n    def view_review(self):\n        self.client.get(\n            \"/reviews/15f86426-98c7-41d1-a663-7ea890e2b0cb\",\n            name=\"GET /reviews/[review_id]\"\n        )\n\n    @task\n    def submit_review(self):\n        self.client.post(\n            \"/reviews\",\n            json={\n                \"user_id\": \"57026a31-ae59-4263-a620-57193f2a0bd5\",\n                \"product_id\": \"fb4b1641-8cc9-44fa-a604-3f5cedd4b720\",\n                \"rating\": 5,\n                \"comment\": \"Отличный товар!\"\n            },\n            name=\"POST /reviews\"\n        )\n\n\n# Базовый класс, который ставит заголовки в on_start\nclass BaseUser(HttpUser):\n    # Тут перечисляем все кастомные заголовки\n    custom_headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNWQ5NGY3ZS1hMDQ3LTQwM2QtYWY5Yi03ZWM5MTI4NTRhYmQiLCJleHAiOjE3NDU5NDA2NTQsImlzcyI6IndiLWJhY2siLCJhdWQiOiJ3Yi1mcm9udCJ9.k7rQVWg8_lCwIwh41TeNKZAAzL2i63nEmfubCF4efuU\",\n    }\n\n    def on_start(self):\n        # авто-добавляем их ко всем будущим запросам\n        self.client.headers.update(self.custom_headers)\n        self.client.verify = False\n\n\nclass BuyerUser(BaseUser):\n    tasks = [BuyerBehavior]\n    weight = 8\n    wait_time = between(1, 2)\n\n\nclass SellerUser(BaseUser):\n    tasks = [SellerBehavior]\n    weight = 2\n    wait_time = between(5, 10)\n\n\nclass ModeratorUser(BaseUser):\n    tasks = [ModeratorBehavior]\n    weight = 2\n    wait_time = between(5, 10)\n\n\n# locust --users 300 --spawn-rate 30 --host=https://cashbackwb.ru/api\n"
  },
  {
    "path": "backend/settings.json",
    "content": "{\n  \"db\": {\n    \"host\": \"db\",\n    \"port\": 5432,\n    \"user\": \"wbuser\",\n    \"password\": \"wbpassword\",\n    \"name\": \"postgres\"\n  },\n    \"jwt\": {\n    \"secret_key\": \"very-secret-wb-key-innit\",\n    \"issuer\": \"wb-back\",\n    \"audience\": \"wb-front\",\n    \"access_expire\": 18000,\n    \"refresh_expire\": 6000\n  },\n  \"bot\": {\n    \"local\": {\n      \"token\": \"7782070677:AAHtu78aPEQSf15dYsXJbBhcbfMoz7bDXQg\",\n      \"username\": \"WBJarvisBot\",\n      \"channel_id\": \"-1001713824160\"\n    },\n    \"dev\": {\n      \"token\": \"7923150921:AAGAUkeu-dfp_fXkwTwb3HQZZlYEf66MzYg\",\n      \"username\": \"cashbackwb_ru_bot\"\n    }\n  }\n}\n"
  },
  {
    "path": "backend/requirements.txt",
    "content": "aiofiles==24.1.0\nalembic==1.15.1\nalembic-postgresql-enum==1.7.0\nannotated-types==0.7.0\nanyio==4.8.0\nasyncpg==0.30.0\ncertifi==2025.1.31\ncffi==1.17.1\nclick==8.1.8\ncryptography==44.0.2\ndnspython==2.7.0\nemail_validator==2.2.0\nfastapi==0.115.11\ngreenlet==3.1.1\nh11==0.14.0\nhttpcore==1.0.7\nhttpx==0.28.1\nidna==3.10\nMako==1.3.9\nMarkupSafe==3.0.2\npycparser==2.22\npycryptodome==3.21.0\npydantic==2.10.6\npydantic-settings==2.8.1\npydantic_core==2.27.2\nPyJWT==2.10.1\npython-dotenv==1.0.1\npython-multipart==0.0.20\nsniffio==1.3.1\nSQLAlchemy==2.0.39\nstarlette==0.46.1\ntyping_extensions==4.12.2\nuvicorn==0.34.0\n"
  },
  {
    "path": "backend/alembic.ini",
    "content": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\n# Use forward slashes (/) also on windows to provide an os agnostic path\nscript_location = migrations\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python>=3.9 or backports.zoneinfo library.\n# Any required deps can installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to ZoneInfo()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to migrations/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\n# version_path_separator = newline\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n\n# set to 'true' to search source files recursively\n# in each \"version_locations\" directory\n# new in Alembic version 1.10\n# recursive_version_locations = false\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\nsqlalchemy.url = driver://user:pass@localhost/dbname\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# lint with attempts to fix using \"ruff\" - use the exec runner, execute a binary\n# hooks = ruff\n# ruff.type = exec\n# ruff.executable = %(here)s/.venv/bin/ruff\n# ruff.options = --fix REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARNING\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARNING\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n"
  },
  {
    "path": "backend/Dockerfile",
    "content": "# ------------------------------------------\n# Stage 1: Build dependencies and install Python packages\n# ------------------------------------------\nARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1\n\n# Install build dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y gcc libpq-dev wget && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# Install Python dependencies\nCOPY ./requirements.txt .\nRUN pip install --upgrade pip && \\\n    pip install --prefix=/install -r requirements.txt\n\n# ------------------------------------------\n# Stage 2: Final runtime image\n# ------------------------------------------\nFROM python:${PYTHON_VERSION}-slim AS runtime\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    ENVIRONMENT=dev\n\nWORKDIR /app\n\n# Copy installed Python packages from builder stage\nCOPY --from=builder /install /usr/local\n\n# Copy application code\nCOPY . .\n\n#ENTRYPOINT [\"sh\", \"-c\", \"uvicorn main:app --host 0.0.0.0 --port 8080\"]\n"
  },
  {
    "path": "backend/__init__.py",
    "content": ""
  },
  {
    "path": "backend/.gitignore",
    "content": "upload/"
  },
  {
    "path": "backend/settings.py",
    "content": "import os\nfrom pathlib import Path\nfrom typing import Type, Tuple\n\nfrom pydantic import SecretStr\nfrom pydantic_settings import (\n    BaseSettings,\n    SettingsConfigDict,\n    PydanticBaseSettingsSource,\n    JsonConfigSettingsSource,\n)\n\nENV = os.getenv(\"ENVIRONMENT\", \"local\")\n\n\nclass DBSettings(BaseSettings):\n    host: str\n    port: int\n    name: str\n    user: str\n    password: SecretStr\n\n    @property\n    def url(self):\n        return (\n            f\"postgresql+asyncpg://{self.user}:{self.password.get_secret_value()}@\"\n            f\"{self.host}:{self.port}/{self.name}\"\n        )\n\n\nclass JwtSettings(BaseSettings):\n    secret_key: SecretStr\n    issuer: str\n    audience: str\n    access_expire: int\n    refresh_expire: int\n\n\nclass BotTokenSettings(BaseSettings):\n    token: str\n    username: str\n\n\nclass BotSettings(BaseSettings):\n    local: BotTokenSettings\n    dev: BotTokenSettings\n    channel_id: str\n\n    @property\n    def token(self) -> str:\n        match ENV:\n            case \"dev\":\n                return self.dev.token\n            case \"local\":\n                return self.local.token\n\n    @property\n    def username(self) -> str:\n        match ENV:\n            case \"dev\":\n                return self.dev.username\n            case \"local\":\n                return self.local.username\n\n\nclass Settings(BaseSettings):\n    db: DBSettings\n    jwt: JwtSettings\n\n    bot: BotSettings\n\n    debug: bool = True\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n    @classmethod\n    def settings_customise_sources(\n            cls,\n            settings_cls: Type[BaseSettings],\n            init_settings: PydanticBaseSettingsSource,\n            env_settings: PydanticBaseSettingsSource,\n            dotenv_settings: PydanticBaseSettingsSource,\n            file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            JsonConfigSettingsSource(settings_cls),  # Fallback to JSON\n        )\n\n\nsettings = Settings()\n"
  },
  {
    "path": "backend/main.py",
    "content": "import logging\nimport subprocess\nfrom contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\n\nfrom fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\nfrom starlette.middleware.cors import CORSMiddleware\nfrom starlette.staticfiles import StaticFiles\n\nfrom dependencies.services.upload import get_upload_service\nfrom middlewares.auth_middleware import check_for_auth\nfrom routes import (\n    router as api_router,\n    user_router,\n    moderator_router,\n    orders_router,\n    product_router,\n    review_router,\n    auth_router,\n\n)\nfrom settings import settings\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\n\nasync def apply_migrations():\n    migrations_is_ok = subprocess.call([\"alembic\", \"upgrade\", \"head\"]) == 0\n    if not migrations_is_ok:\n        logger.error(\"There is an error while upgrading database\")\n        exit(1)\n\n\n@asynccontextmanager\nasync def lifespan(_) -> AsyncGenerator[None, None]:\n    await apply_migrations()\n\n    upload_service = get_upload_service()\n    await upload_service.initialize()\n\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\napp.mount(\"/static/images\", StaticFiles(directory=\"upload\"), name=\"upload\")\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\n        \"http://localhost:3000\",\n        \"https://f938-45-150-33-208.ngrok-free.app\",\n        \"https://7f02-45-150-33-208.ngrok-free.app\"\n        # \"*\"\n    ],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"OPTIONS\", \"PATCH\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\napp.middleware('http')(check_for_auth)\n\napp.include_router(api_router)\n# app.include_router(product_router)\n# app.include_router(user_router)\n# app.include_router(orders_router)\n# app.include_router(review_router)\n# app.include_router(auth_router)\n# app.include_router(moderator_router)\n\n# if __name__ == \"__main__\":\n#     uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"WB BOT API\",\n        version=\"0.1.0\",\n        description=\"meow\",\n        routes=app.routes,\n    )\n    openapi_schema[\"components\"][\"securitySchemes\"] = {\n        \"bearerAuth\": {\n            \"type\": \"http\",\n            \"scheme\": \"bearer\",\n            \"bearerFormat\": \"JWT\",\n        }\n    }\n    openapi_schema[\"security\"] = [{\"bearerAuth\": []}]\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n"
  },
  {
    "path": "backend/migrations/script.py.mako",
    "content": "\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\n# revision identifiers, used by Alembic.\nrevision: str = ${repr(up_revision)}\ndown_revision: Union[str, None] = ${repr(down_revision)}\nbranch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}\ndepends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}\n\n\ndef upgrade() -> None:\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade() -> None:\n    ${downgrades if downgrades else \"pass\"}\n"
  },
  {
    "path": "backend/migrations/env.py",
    "content": "import asyncio\nfrom logging.config import fileConfig\n\nimport alembic_postgresql_enum  # noqa\nfrom alembic import context\nfrom sqlalchemy import pool\nfrom sqlalchemy.engine import Connection\nfrom sqlalchemy.ext.asyncio import async_engine_from_config\n\nfrom infrastructure.entities import Base\nfrom settings import settings\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\nconfig.set_main_option(\"sqlalchemy.url\", settings.db.url)\n\n\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef do_run_migrations(connection: Connection) -> None:\n    context.configure(connection=connection, target_metadata=target_metadata)\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n\n    connectable = async_engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    async with connectable.connect() as connection:\n        await connection.run_sync(do_run_migrations)\n\n    await connectable.dispose()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n\n    asyncio.run(run_async_migrations())\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"
  },
  {
    "path": "backend/migrations/README",
    "content": "Generic single-database configuration."
  },
  {
    "path": "backend/migrations/versions/31c2d93d3741_seller_and_moderator_comments.py",
    "content": "\"\"\"seller and moderator comments\n\nRevision ID: 31c2d93d3741\nRevises: 0529594d5b4c\nCreate Date: 2025-04-14 14:08:29.689262\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '31c2d93d3741'\ndown_revision: Union[str, None] = '0529594d5b4c'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('moderator_reviews', sa.Column('comment_to_seller', sa.String(), nullable=True))\n    op.add_column('moderator_reviews', sa.Column('comment_to_moderator', sa.String(), nullable=True))\n    op.drop_column('moderator_reviews', 'comment')\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('moderator_reviews', sa.Column('comment', sa.VARCHAR(), autoincrement=False, nullable=False))\n    op.drop_column('moderator_reviews', 'comment_to_moderator')\n    op.drop_column('moderator_reviews', 'comment_to_seller')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/02558ec308b0_add_requirements_agree_to_product.py",
    "content": "\"\"\"add requirements_agree to product\n\nRevision ID: 02558ec308b0\nRevises: 3efa6bd17ed2\nCreate Date: 2025-04-19 18:25:41.550741\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '02558ec308b0'\ndown_revision: Union[str, None] = '3efa6bd17ed2'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('products', sa.Column('requirements_agree', sa.Boolean(), nullable=False))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('products', 'requirements_agree')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/67826c72ae26_admin_role.py",
    "content": "\"\"\"admin role\n\nRevision ID: 67826c72ae26\nRevises: dcd8d88a3066\nCreate Date: 2025-03-29 20:18:49.996263\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom alembic_postgresql_enum import TableReference\n\n# revision identifiers, used by Alembic.\nrevision: str = '67826c72ae26'\ndown_revision: Union[str, None] = 'dcd8d88a3066'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='userrole',\n        new_values=['USER', 'MODERATOR', 'ADMIN'],\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='userrole',\n        new_values=['USER', 'MODERATOR'],\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/593273b8aae3_add_order_status.py",
    "content": "\"\"\"add order status\n\nRevision ID: 593273b8aae3\nRevises: 822f4dc31b66\nCreate Date: 2025-03-30 20:21:37.221964\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '593273b8aae3'\ndown_revision: Union[str, None] = '822f4dc31b66'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus').create(op.get_bind())\n    op.alter_column('orders', 'status',\n               existing_type=sa.VARCHAR(),\n               type_=sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus'),\n               existing_nullable=False,\n               postgresql_using='status::orderstatus')\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('orders', 'status',\n               existing_type=sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus'),\n               type_=sa.VARCHAR(),\n               existing_nullable=False)\n    sa.Enum('CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', name='orderstatus').drop(op.get_bind())\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/a1b9fc55f20d_full_text_index_to_products.py",
    "content": "\"\"\"full-text index to products\n\nRevision ID: a1b9fc55f20d\nRevises: 159aef5c2313\nCreate Date: 2025-04-28 16:56:27.934381\n\n\"\"\"\nfrom typing import Sequence, Union\n\nimport sqlalchemy as sa\nfrom alembic import op\nfrom sqlalchemy.dialects.postgresql import TSVECTOR\n\n# revision identifiers, used by Alembic.\nrevision: str = 'a1b9fc55f20d'\ndown_revision: Union[str, None] = '159aef5c2313'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\ndef upgrade() -> None:\n    # 1) заполняем колонку существующими данными\n    op.execute(\"\"\"\n      UPDATE products\n      SET search_vector = to_tsvector(\n        'russian',\n        coalesce(name,'') || ' ' || coalesce(key_word,'')\n      );\n    \"\"\")\n\n    # 2) создаём GIN-индекс на search_vector\n    op.create_index(\n        'ix_products_search_vector',\n        'products',\n        ['search_vector'],\n        postgresql_using='gin'\n    )\n\n    # 3) регистрируем (или обновляем) функцию-триггер\n    op.execute(\"\"\"\n    CREATE OR REPLACE FUNCTION products_search_vector_update()\n    RETURNS trigger AS $$\n    BEGIN\n      NEW.search_vector := to_tsvector(\n        'russian',\n        coalesce(NEW.name,'') || ' ' || coalesce(NEW.key_word,'')\n      );\n      RETURN NEW;\n    END\n    $$ LANGUAGE plpgsql;\n    \"\"\")\n\n    # 4) удаляем старый триггер, если он есть\n    op.execute(\"DROP TRIGGER IF EXISTS trg_products_search_vector ON products;\")\n\n    # 5) создаём триггер заново\n    op.execute(\"\"\"\n    CREATE TRIGGER trg_products_search_vector\n    BEFORE INSERT OR UPDATE ON products\n    FOR EACH ROW EXECUTE FUNCTION products_search_vector_update();\n    \"\"\")\n\n\ndef downgrade() -> None:\n    # откат: сначала индекс, потом триггер, функцию и колонку\n    op.drop_index('ix_products_search_vector', table_name='products')\n    op.execute(\"DROP TRIGGER IF EXISTS trg_products_search_vector ON products;\")\n    op.execute(\"DROP FUNCTION IF EXISTS products_search_vector_update();\")\n"
  },
  {
    "path": "backend/migrations/versions/159aef5c2313_add_search_vector_to_product.py",
    "content": "\"\"\"add search_vector to product\n\nRevision ID: 159aef5c2313\nRevises: 02558ec308b0\nCreate Date: 2025-04-28 16:55:09.294128\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import postgresql\n\n# revision identifiers, used by Alembic.\nrevision: str = '159aef5c2313'\ndown_revision: Union[str, None] = '02558ec308b0'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('products', sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('products', 'search_vector')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/0529594d5b4c_button_in_push.py",
    "content": "\"\"\"button in push\n\nRevision ID: 0529594d5b4c\nRevises: d92bc63fb3a6\nCreate Date: 2025-04-09 18:46:02.052762\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '0529594d5b4c'\ndown_revision: Union[str, None] = 'd92bc63fb3a6'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('pushes', sa.Column('button_text', sa.String(), nullable=True))\n    op.add_column('pushes', sa.Column('button_link', sa.String(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('pushes', 'button_link')\n    op.drop_column('pushes', 'button_text')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/909dc0adb8a2_pushes.py",
    "content": "\"\"\"pushes\n\nRevision ID: 909dc0adb8a2\nRevises: 593273b8aae3\nCreate Date: 2025-04-08 22:30:09.123840\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import postgresql\n\n# revision identifiers, used by Alembic.\nrevision: str = '909dc0adb8a2'\ndown_revision: Union[str, None] = '593273b8aae3'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    sa.Enum('PLANNED', 'IN_PROGRESS', 'DELIVERED', 'FAILED', name='pushstatus').create(op.get_bind())\n    op.create_table('pushes',\n    sa.Column('title', sa.String(), nullable=False),\n    sa.Column('text', sa.String(), nullable=False),\n    sa.Column('creator_id', sa.UUID(), nullable=False),\n    sa.Column('image_path', sa.String(), nullable=True),\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('title')\n    )\n    op.create_table('user_pushes',\n    sa.Column('push_id', sa.UUID(), nullable=False),\n    sa.Column('user_id', sa.UUID(), nullable=False),\n    sa.Column('sent_at', sa.DateTime(), nullable=True),\n    sa.Column('status', postgresql.ENUM('PLANNED', 'IN_PROGRESS', 'DELIVERED', 'FAILED', name='pushstatus', create_type=False), nullable=False),\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['push_id'], ['pushes.id'], ),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('user_pushes')\n    op.drop_table('pushes')\n    sa.Enum('PLANNED', 'IN_PROGRESS', 'DELIVERED', 'FAILED', name='pushstatus').drop(op.get_bind())\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/d92bc63fb3a6_push_soft_deletion.py",
    "content": "\"\"\"push soft deletion\n\nRevision ID: d92bc63fb3a6\nRevises: 909dc0adb8a2\nCreate Date: 2025-04-09 18:29:57.869011\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom alembic_postgresql_enum import TableReference\n\n# revision identifiers, used by Alembic.\nrevision: str = 'd92bc63fb3a6'\ndown_revision: Union[str, None] = '909dc0adb8a2'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('pushes', sa.Column('deleted_at', sa.DateTime(), nullable=True))\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='userrole',\n        new_values=['USER', 'CLIENT', 'SELLER', 'MODERATOR', 'ADMIN'],\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='userrole',\n        new_values=['USER', 'MODERATOR', 'ADMIN'],\n        affected_columns=[TableReference(table_schema='public', table_name='users', column_name='role')],\n        enum_values_to_rename=[],\n    )\n    op.drop_column('pushes', 'deleted_at')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/822f4dc31b66_add_balance_to_user.py",
    "content": "\"\"\"add balance to user\n\nRevision ID: 822f4dc31b66\nRevises: 67826c72ae26\nCreate Date: 2025-03-30 00:46:00.876231\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '822f4dc31b66'\ndown_revision: Union[str, None] = '67826c72ae26'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('balance', sa.Integer(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'balance')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/dcd8d88a3066_fix_product_status_enum.py",
    "content": "\"\"\"fix product status enum\n\nRevision ID: dcd8d88a3066\nRevises: 77f5ca11e091\nCreate Date: 2025-03-29 19:20:44.915139\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom alembic_postgresql_enum import TableReference\n\n# revision identifiers, used by Alembic.\nrevision: str = 'dcd8d88a3066'\ndown_revision: Union[str, None] = '77f5ca11e091'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='productstatus',\n        new_values=['CREATED', 'ACTIVE', 'DISABLED', 'REJECTED', 'ARCHIVED'],\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='productstatus',\n        new_values=['CREATED', 'ACTIVE', 'DISABLED'],\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/5ed63303b433_add_remaining_products_to_product.py",
    "content": "\"\"\"add remaining_products to product\n\nRevision ID: 5ed63303b433\nRevises: 9a0fc27b72fb\nCreate Date: 2025-04-19 12:17:00.606425\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '5ed63303b433'\ndown_revision: Union[str, None] = '9a0fc27b72fb'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('products', sa.Column('remaining_products', sa.Integer(), nullable=False))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('products', 'remaining_products')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/2dff807c6776_add_payment_confirmed_status_to_order.py",
    "content": "\"\"\"add payment_confirmed status to order\n\nRevision ID: 2dff807c6776\nRevises: a1b9fc55f20d\nCreate Date: 2025-04-30 21:51:10.528330\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom alembic_postgresql_enum import TableReference\n\n# revision identifiers, used by Alembic.\nrevision: str = '2dff807c6776'\ndown_revision: Union[str, None] = 'a1b9fc55f20d'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index('ix_products_search_vector', table_name='products', postgresql_using='gin')\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='orderstatus',\n        new_values=['CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED', 'PAYMENT_CONFIRMED'],\n        affected_columns=[TableReference(table_schema='public', table_name='orders', column_name='status')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='orderstatus',\n        new_values=['CASHBACK_PAID', 'CASHBACK_NOT_PAID', 'CANCELLED'],\n        affected_columns=[TableReference(table_schema='public', table_name='orders', column_name='status')],\n        enum_values_to_rename=[],\n    )\n    op.create_index('ix_products_search_vector', 'products', ['search_vector'], unique=False, postgresql_using='gin')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/3efa6bd17ed2_add_not_paid_status_to_product.py",
    "content": "\"\"\"add NOT_PAID status to product\n\nRevision ID: 3efa6bd17ed2\nRevises: 5ed63303b433\nCreate Date: 2025-04-19 14:30:56.914236\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom alembic_postgresql_enum import TableReference\n\n# revision identifiers, used by Alembic.\nrevision: str = '3efa6bd17ed2'\ndown_revision: Union[str, None] = '5ed63303b433'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='productstatus',\n        new_values=['CREATED', 'ACTIVE', 'NOT_PAID', 'DISABLED', 'REJECTED', 'ARCHIVED'],\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.sync_enum_values(\n        enum_schema='public',\n        enum_name='productstatus',\n        new_values=['CREATED', 'ACTIVE', 'DISABLED', 'REJECTED', 'ARCHIVED'],\n        affected_columns=[TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_after'), TableReference(table_schema='public', table_name='moderator_reviews', column_name='status_before'), TableReference(table_schema='public', table_name='products', column_name='status')],\n        enum_values_to_rename=[],\n    )\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/9a0fc27b72fb_add_user_has_discount_and_referrer_bonus.py",
    "content": "\"\"\"add user has_discount and referrer_bonus\n\nRevision ID: 9a0fc27b72fb\nRevises: 31c2d93d3741\nCreate Date: 2025-04-16 14:25:34.869373\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '9a0fc27b72fb'\ndown_revision: Union[str, None] = '31c2d93d3741'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('invited_by', sa.UUID(), nullable=True))\n    op.add_column('users', sa.Column('has_discount', sa.Boolean(), nullable=True))\n    op.add_column('users', sa.Column('referrer_bonus', sa.Integer(), nullable=True))\n    op.create_foreign_key(None, 'users', 'users', ['invited_by'], ['id'])\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'users', type_='foreignkey')\n    op.drop_column('users', 'referrer_bonus')\n    op.drop_column('users', 'has_discount')\n    op.drop_column('users', 'invited_by')\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/migrations/versions/77f5ca11e091_init.py",
    "content": "\"\"\"init\n\nRevision ID: 77f5ca11e091\nRevises: \nCreate Date: 2025-03-26 16:21:44.980861\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import postgresql\n\n# revision identifiers, used by Alembic.\nrevision: str = '77f5ca11e091'\ndown_revision: Union[str, None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    sa.Enum('USER', 'MODERATOR', name='userrole').create(op.get_bind())\n    sa.Enum('CREATED', 'ACTIVE', 'DISABLED', name='productstatus').create(op.get_bind())\n    sa.Enum('AFTER_REVIEW', 'AFTER_DELIVERY', 'ON_15TH_DAY', name='payouttime').create(op.get_bind())\n    sa.Enum('WOMEN', 'MEN', 'SHOES', 'KIDS', 'HOME', 'NEW_YEAR', 'BEAUTY', 'ACCESSORIES', 'ELECTRONICS', 'TOYS', 'FURNITURE', 'ADULT', 'APPLIANCES', 'PETS', 'SPORTS', 'AUTO', 'JEWELRY', 'REPAIR', 'GARDEN', 'HEALTH', 'STATIONERY', name='category').create(op.get_bind())\n    op.create_table('users',\n    sa.Column('telegram_id', sa.BigInteger(), nullable=True),\n    sa.Column('nickname', sa.String(), nullable=True),\n    sa.Column('role', postgresql.ENUM('USER', 'MODERATOR', name='userrole', create_type=False), nullable=False),\n    sa.Column('is_banned', sa.Boolean(), nullable=False),\n    sa.Column('is_seller', sa.Boolean(), nullable=False),\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('telegram_id')\n    )\n    op.create_table('products',\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('brand', sa.String(), nullable=False),\n    sa.Column('article', sa.String(), nullable=False),\n    sa.Column('category', postgresql.ENUM('WOMEN', 'MEN', 'SHOES', 'KIDS', 'HOME', 'NEW_YEAR', 'BEAUTY', 'ACCESSORIES', 'ELECTRONICS', 'TOYS', 'FURNITURE', 'ADULT', 'APPLIANCES', 'PETS', 'SPORTS', 'AUTO', 'JEWELRY', 'REPAIR', 'GARDEN', 'HEALTH', 'STATIONERY', name='category', create_type=False), nullable=False),\n    sa.Column('key_word', sa.String(), nullable=False),\n    sa.Column('general_repurchases', sa.Integer(), nullable=False),\n    sa.Column('daily_repurchases', sa.Integer(), nullable=False),\n    sa.Column('price', sa.Float(), nullable=False),\n    sa.Column('wb_price', sa.Float(), nullable=False),\n    sa.Column('tg', sa.String(), nullable=False),\n    sa.Column('payment_time', postgresql.ENUM('AFTER_REVIEW', 'AFTER_DELIVERY', 'ON_15TH_DAY', name='payouttime', create_type=False), nullable=False),\n    sa.Column('review_requirements', sa.String(), nullable=False),\n    sa.Column('image_path', sa.String(), nullable=True),\n    sa.Column('seller_id', sa.UUID(), nullable=False),\n    sa.Column('status', postgresql.ENUM('CREATED', 'ACTIVE', 'DISABLED', name='productstatus', create_type=False), nullable=False),\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['seller_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('article')\n    )\n    op.create_table('moderator_reviews',\n    sa.Column('moderator_id', sa.UUID(), nullable=False),\n    sa.Column('product_id', sa.UUID(), nullable=False),\n    sa.Column('comment', sa.String(), nullable=False),\n    sa.Column('status_before', postgresql.ENUM('CREATED', 'ACTIVE', 'DISABLED', name='productstatus', create_type=False), nullable=False),\n    sa.Column('status_after', postgresql.ENUM('CREATED', 'ACTIVE', 'DISABLED', name='productstatus', create_type=False), nullable=False),\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['moderator_id'], ['users.id'], ),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('orders',\n    sa.Column('user_id', sa.UUID(), nullable=False),\n    sa.Column('product_id', sa.UUID(), nullable=False),\n    sa.Column('seller_id', sa.UUID(), nullable=False),\n    sa.Column('step', sa.Integer(), nullable=False),\n    sa.Column('search_screenshot_path', sa.String(), nullable=True),\n    sa.Column('cart_screenshot_path', sa.String(), nullable=True),\n    sa.Column('card_number', sa.String(), nullable=True),\n    sa.Column('phone_number', sa.String(), nullable=True),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('bank', sa.String(), nullable=True),\n    sa.Column('final_cart_screenshot_path', sa.String(), nullable=True),\n    sa.Column('delivery_screenshot_path', sa.String(), nullable=True),\n    sa.Column('barcodes_screenshot_path', sa.String(), nullable=True),\n    sa.Column('review_screenshot_path', sa.String(), nullable=True),\n    sa.Column('receipt_screenshot_path', sa.String(), nullable=True),\n    sa.Column('receipt_number', sa.String(), nullable=True),\n    sa.Column('status', sa.String(), nullable=False),\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.ForeignKeyConstraint(['seller_id'], ['users.id'], ),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('reviews',\n    sa.Column('user_id', sa.UUID(), nullable=False),\n    sa.Column('product_id', sa.UUID(), nullable=False),\n    sa.Column('rating', sa.Integer(), nullable=False),\n    sa.Column('comment', sa.String(), nullable=False),\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=False),\n    sa.Column('updated_at', sa.DateTime(), nullable=False),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('reviews')\n    op.drop_table('orders')\n    op.drop_table('moderator_reviews')\n    op.drop_table('products')\n    op.drop_table('users')\n    sa.Enum('WOMEN', 'MEN', 'SHOES', 'KIDS', 'HOME', 'NEW_YEAR', 'BEAUTY', 'ACCESSORIES', 'ELECTRONICS', 'TOYS', 'FURNITURE', 'ADULT', 'APPLIANCES', 'PETS', 'SPORTS', 'AUTO', 'JEWELRY', 'REPAIR', 'GARDEN', 'HEALTH', 'STATIONERY', name='category').drop(op.get_bind())\n    sa.Enum('AFTER_REVIEW', 'AFTER_DELIVERY', 'ON_15TH_DAY', name='payouttime').drop(op.get_bind())\n    sa.Enum('CREATED', 'ACTIVE', 'DISABLED', name='productstatus').drop(op.get_bind())\n    sa.Enum('USER', 'MODERATOR', name='userrole').drop(op.get_bind())\n    # ### end Alembic commands ###\n"
  },
  {
    "path": "backend/middlewares/__init__.py",
    "content": ""
  },
  {
    "path": "backend/middlewares/auth_middleware.py",
    "content": "import logging\n\nfrom fastapi import Request\nfrom fastapi.responses import JSONResponse\n\nfrom dependencies.services.auth import get_auth_service\nfrom infrastructure.repositories.exceptions import NotFoundException\nfrom services.auth.exceptions import InvalidTokenException, ExpiredTokenException\nfrom services.exceptions import PermissionException, BannedUserException\n\n\nasync def check_for_auth(\n        request: Request,\n        call_next,\n):\n    url_path = request.url.path.replace(\"/api\", \"\")\n    if (\n            url_path.startswith(\"/auth\") or\n            url_path.startswith(\"/docs\") or\n            url_path.startswith(\"/openapi\") or\n            url_path.startswith(\"/upload\") or\n            request.method == 'OPTIONS'\n    ):\n        response = await call_next(request)\n        return response\n\n    if 'Authorization' not in request.headers:\n        return JSONResponse(\n            status_code=401,\n            content={\n                'detail': 'Token is empty',\n            }\n        )\n\n    access_token = request.headers['Authorization'].replace('Bearer ', '')\n\n    auth_service = get_auth_service()\n    try:\n        # user_id = UUID('')\n        user_id = await auth_service.get_user_id_from_jwt(access_token)\n    except Exception as e:\n        logging.getLogger(__name__).error(f\"fuuuck {access_token}\", exc_info=True)\n        code, detail = 401, 'Unknown authorization exception'\n        match e:\n            case InvalidTokenException():\n                detail = 'Token is invalid'\n            case ExpiredTokenException():\n                detail = 'Token is expired'\n            case NotFoundException():\n                detail = 'User ID found in token does not exist'\n            case BannedUserException():\n                detail = \"You're banned\"\n                code = 403\n\n        return JSONResponse(\n            status_code=code,\n            content={\n                'detail': detail,\n            }\n        )\n\n    request.scope['x_user_id'] = user_id\n    try:\n        response = await call_next(request)\n        return response\n    except PermissionException as e:\n        return JSONResponse(\n            status_code=403,\n            content={\n                'detail': \"You're lacking permissions to do this.\",\n            }\n        )\n"
  },
  {
    "path": "backend/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "backend/dependencies/repositories/user.py",
    "content": "from abstractions.repositories.user import UserRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.user import UserRepository\n\n\ndef get_user_repository() -> UserRepositoryInterface:\n    return UserRepository(\n        session_maker=get_session_maker()\n    )\n"
  },
  {
    "path": "backend/dependencies/repositories/order.py",
    "content": "from abstractions.repositories import OrderRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.order import OrderRepository\n\n\ndef get_order_repository() -> OrderRepositoryInterface:\n    return OrderRepository(\n        session_maker=get_session_maker()\n    )"
  },
  {
    "path": "backend/dependencies/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "backend/dependencies/repositories/review.py",
    "content": "from abstractions.repositories import ReviewRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.review import ReviewRepository\n\n\ndef get_review_repository() -> ReviewRepositoryInterface:\n    return ReviewRepository(\n        session_maker=get_session_maker()\n    )"
  },
  {
    "path": "backend/dependencies/repositories/session_maker.py",
    "content": "from sqlalchemy.ext.asyncio import async_sessionmaker\n\nfrom infrastructure import session_maker\n\n\ndef get_session_maker() -> async_sessionmaker:\n    return session_maker"
  },
  {
    "path": "backend/dependencies/repositories/user_push.py",
    "content": "from abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.user_push import UserPushRepository\n\n\ndef get_user_push_repository() -> UserPushRepositoryInterface:\n    return UserPushRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "backend/dependencies/repositories/moderator_review.py",
    "content": "from abstractions.repositories.moderator_review import ModeratorReviewRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.moderator_review import ModeratorReviewRepository\n\n\ndef get_moderator_review_repository() -> ModeratorReviewRepositoryInterface:\n    return ModeratorReviewRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "backend/dependencies/repositories/product.py",
    "content": "from abstractions.repositories import ProductRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.product import ProductRepository\n\n\ndef get_product_repository() -> ProductRepositoryInterface:\n    return ProductRepository(\n        session_maker=get_session_maker()\n    )"
  },
  {
    "path": "backend/dependencies/repositories/push.py",
    "content": "from abstractions.repositories.push import PushRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.push import PushRepository\n\n\ndef get_push_repository() -> PushRepositoryInterface:\n    return PushRepository(\n        session_maker=get_session_maker(),\n    )"
  },
  {
    "path": "backend/dependencies/services/user.py",
    "content": "from abstractions.repositories import ProductRepositoryInterface\nfrom abstractions.services import UserServiceInterface\nfrom dependencies.repositories.product import get_product_repository\nfrom dependencies.repositories.user import get_user_repository\nfrom dependencies.services.notification import get_notification_service\nfrom services.user import UserService\nfrom settings import settings\n\n\ndef get_user_service() -> UserServiceInterface:\n    return UserService(\n        user_repository=get_user_repository(),\n        notification_service=get_notification_service(),\n        bot_username=settings.bot.username,\n        product_repository=get_product_repository(),\n    )\n"
  },
  {
    "path": "backend/dependencies/services/upload.py",
    "content": "from abstractions.services.upload import UploadServiceInterface\nfrom services.upload import UploadService\n\n\ndef get_upload_service() -> UploadServiceInterface:\n    return UploadService(\n\n    )\n"
  },
  {
    "path": "backend/dependencies/services/notification.py",
    "content": "from abstractions.services.notification import NotificationServiceInterface\nfrom dependencies.repositories.order import get_order_repository\nfrom dependencies.repositories.push import get_push_repository\nfrom dependencies.repositories.user import get_user_repository\nfrom dependencies.repositories.user_push import get_user_push_repository\nfrom services.notifications import NotificationService\nfrom settings import settings\n\n\ndef get_notification_service() -> NotificationServiceInterface:\n    return NotificationService(\n        token=settings.bot.token,\n        users_repository=get_user_repository(),\n        orders_repository=get_order_repository(),\n        push_repository=get_push_repository(),\n        user_push_repository=get_user_push_repository(),\n    )\n"
  },
  {
    "path": "backend/dependencies/services/order.py",
    "content": "from abstractions.services import OrderServiceInterface\nfrom dependencies.repositories.order import get_order_repository\nfrom dependencies.repositories.product import get_product_repository\nfrom dependencies.services.notification import get_notification_service\nfrom dependencies.repositories.user import get_user_repository\nfrom services.order import OrderService\n\n\ndef get_order_service() -> OrderServiceInterface:\n    return OrderService(\n        order_repository=get_order_repository(),\n        product_repository=get_product_repository(),\n        notification_service=get_notification_service(),\n        user_repository=get_user_repository()\n    )\n"
  },
  {
    "path": "backend/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "backend/dependencies/services/review.py",
    "content": "from abstractions.services import ReviewServiceInterface\nfrom dependencies.repositories.review import get_review_repository\nfrom services.review import ReviewService\n\n\ndef get_review_service() -> ReviewServiceInterface:\n    return ReviewService(\n        review_repository=get_review_repository()\n    )\n"
  },
  {
    "path": "backend/dependencies/services/moderator.py",
    "content": "from abstractions.services.moderator import ModeratorServiceInterface\nfrom dependencies.repositories.moderator_review import get_moderator_review_repository\nfrom dependencies.repositories.product import get_product_repository\nfrom dependencies.services.notification import get_notification_service\nfrom dependencies.services.user import get_user_service\nfrom services.moderator import ModeratorService\n\n\ndef get_moderator_service() -> ModeratorServiceInterface:\n    return ModeratorService(\n        products_repository=get_product_repository(),\n        user_service=get_user_service(),\n        moderator_review_repository=get_moderator_review_repository(),\n        notification_service=get_notification_service(),\n    )\n"
  },
  {
    "path": "backend/dependencies/services/permissions.py",
    "content": "from abstractions.services.permissions import PermissionServiceInterface\nfrom dependencies.services.user import get_user_service\nfrom services.permission import PermissionService\n\n\ndef get_permission_service() -> PermissionServiceInterface:\n    return PermissionService(\n        user_service=get_user_service(),\n    )\n"
  },
  {
    "path": "backend/dependencies/services/product.py",
    "content": "from abstractions.services import ProductServiceInterface\nfrom dependencies.repositories.product import get_product_repository\nfrom dependencies.repositories.push import get_push_repository\nfrom dependencies.repositories.user import get_user_repository\nfrom dependencies.repositories.user_push import get_user_push_repository\nfrom services.product import ProductService\n\n\ndef get_product_service() -> ProductServiceInterface:\n    return ProductService(\n        product_repository=get_product_repository(),\n        user_repository=get_user_repository(),\n        push_repository=get_push_repository(),\n        user_push_repository=get_user_push_repository(),\n    )\n"
  },
  {
    "path": "backend/dependencies/services/auth/service.py",
    "content": "from abstractions.services.auth.service import AuthServiceInterface\nfrom dependencies.services.auth.token import get_token_service\nfrom dependencies.services.user import get_user_service\nfrom services.auth.service import AuthService\nfrom settings import settings\n\n\ndef get_auth_service() -> AuthServiceInterface:\n    return AuthService(\n        bot_token=settings.bot.token,\n        token_service=get_token_service(),\n        user_service=get_user_service()\n    )\n"
  },
  {
    "path": "backend/dependencies/services/auth/token.py",
    "content": "from abstractions.services.auth.tokens import TokenServiceInterface\nfrom services.auth.tokens import TokenService\nfrom settings import settings\n\n\ndef get_token_service() -> TokenServiceInterface:\n    return TokenService(\n        jwt_settings=settings.jwt\n    )\n"
  },
  {
    "path": "backend/dependencies/services/auth/__init__.py",
    "content": "from .service import get_auth_service\n"
  },
  {
    "path": "backend/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "backend/abstractions/repositories/user.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto import CreateUserDTO, UpdateUserDTO\nfrom domain.models import User\n\n\nclass UserRepositoryInterface(\n    CRUDRepositoryInterface[User, CreateUserDTO, UpdateUserDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_by_telegram_id(self, telegram_id: str) -> Optional[User]:\n        ...\n\n    @abstractmethod\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\n        ...\n\n    @abstractmethod\n    async def get_moderators(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_sellers(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_clients(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_banned(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def become_seller(self, user_id: UUID):\n        ...\n\n    @abstractmethod\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\n        ...\n"
  },
  {
    "path": "backend/abstractions/repositories/order.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto import CreateOrderDTO, UpdateOrderDTO\nfrom domain.models.order import Order\n\n\nclass OrderRepositoryInterface(\n    CRUDRepositoryInterface[Order, CreateOrderDTO, UpdateOrderDTO],\n    ABC):\n\n    @abstractmethod\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\n        ...\n\n    @abstractmethod\n    async def get_user_report(self, order_id: UUID):\n        ...\n\n    @abstractmethod\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\n        ...\n\n\n\n\n"
  },
  {
    "path": "backend/abstractions/repositories/__init__.py",
    "content": "from .crud import CRUDRepositoryInterface\nfrom .user import UserRepositoryInterface\nfrom .order import OrderRepositoryInterface\nfrom .review import ReviewRepositoryInterface\nfrom .product import ProductRepositoryInterface"
  },
  {
    "path": "backend/abstractions/repositories/review.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\nfrom domain.models.review import Review\n\n\nclass ReviewRepositoryInterface(\n    CRUDRepositoryInterface[Review, CreateReviewDTO, UpdateReviewDTO],\n    ABC):\n\n    @abstractmethod\n    async def get_reviews_by_product(self, product_id: UUID) -> List[Review]:\n        ...\n"
  },
  {
    "path": "backend/abstractions/repositories/user_push.py",
    "content": "from abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\nfrom domain.models.user_push import UserPush\nfrom infrastructure.enums.push_status import PushStatus\n\n\nclass UserPushRepositoryInterface(\n    CRUDRepositoryInterface[UserPush, CreateUserPushDTO, UpdateUserPushDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\n        ...\n\n    @abstractmethod\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\n        ...\n"
  },
  {
    "path": "backend/abstractions/repositories/moderator_review.py",
    "content": "from abc import ABC\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto.moderator_review import CreateModeratorReviewDTO, UpdateModeratorReviewDTO\nfrom domain.models.moderator_review import ModeratorReview\n\n\nclass ModeratorReviewRepositoryInterface(\n    CRUDRepositoryInterface[ModeratorReview, CreateModeratorReviewDTO, UpdateModeratorReviewDTO],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "backend/abstractions/repositories/product.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto import CreateProductDTO, UpdateProductDTO\nfrom domain.models import Product\n\n\nclass ProductRepositoryInterface(\n    CRUDRepositoryInterface[Product, CreateProductDTO, UpdateProductDTO],\n    ABC,\n):\n    # @abstractmethod\n    # async def create(self, obj: CreateProductDTO) -> UUID:\n    #     ...\n\n    @abstractmethod\n    async def get_by_article(self, article: str) -> Optional[Product]:\n        ...\n\n    @abstractmethod\n    async def get_by_seller(self, seller_id: UUID) -> Optional[list[Product]]:\n        ...\n\n    @abstractmethod\n    async def get_products_to_review(self) -> list[Product]:\n        ...\n\n    @abstractmethod\n    async def get_active_products(self, limit: int = 100, offset: int = 9, search: Optional[str] = None) -> list[Product]:\n        ...\n"
  },
  {
    "path": "backend/abstractions/repositories/crud.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\n\nclass CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO](ABC):\n    @abstractmethod\n    async def create(self, obj: CreateDTO) -> None:\n        ...\n    \n    @abstractmethod\n    async def create_many(self, objs: list[CreateDTO]) -> None:\n        ...\n\n    @abstractmethod\n    async def get(self, obj_id: UUID) -> Model:\n        ...\n\n    @abstractmethod\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def delete(self, obj_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def get_all(self, limit: int = 100, offset: int = 0) -> list[Model]:\n        ...\n"
  },
  {
    "path": "backend/abstractions/repositories/push.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\nfrom domain.models import Push\n\n\nclass PushRepositoryInterface(\n    CRUDRepositoryInterface[Push, CreatePushDTO, UpdatePushDTO],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "backend/abstractions/services/user.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\nfrom domain.models.user import User\n\n\nclass UserServiceInterface(ABC):\n    @abstractmethod\n    async def create_user(self, dto: CreateUserDTO) -> User:\n        \"\"\"Зарегистрировать нового пользователя и вернуть его модель.\"\"\"\n        ...\n\n    @abstractmethod\n    async def get_user(self, user_id: UUID) -> User:\n        \"\"\"Получить данные пользователя по его идентификатору.\"\"\"\n        ...\n\n    @abstractmethod\n    async def update_user(self, user_id: UUID, dto: UpdateUserDTO) -> None:\n        \"\"\"Обновить данные пользователя.\"\"\"\n        ...\n\n    @abstractmethod\n    async def delete_user(self, user_id: UUID) -> None:\n        \"\"\"Удалить пользователя.\"\"\"\n        ...\n\n    @abstractmethod\n    async def get_users(self, limit: int = 100, offset: int = 0) -> List[User]:\n        \"\"\"Вернуть список пользователей с пагинацией.\"\"\"\n        ...\n\n    @abstractmethod\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\n        ...\n\n    @abstractmethod\n    async def get_user_products(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def ban(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def unban(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def promote_user(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def demote_user(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def get_banned(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_sellers(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_clients(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_moderators(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def increase_balance(self, user_id: UUID, balance_sum: int):\n        ...\n\n    @abstractmethod\n    async def use_discount(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\n        ...\n\n    @abstractmethod\n    async def get_invite_link(self, user_id: UUID) -> str:\n        ...\n"
  },
  {
    "path": "backend/abstractions/services/upload.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom fastapi import UploadFile\n\n\nclass UploadServiceInterface(ABC):\n    @abstractmethod\n    async def upload(self, image: UploadFile) -> str:\n        ...\n\n    @abstractmethod\n    def get_file_path(self, filename: str) -> str:\n        ...\n\n    @abstractmethod\n    async def initialize(self) -> None:\n        ...\n"
  },
  {
    "path": "backend/abstractions/services/notification.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\nfrom domain.models import Push\n\n\nclass NotificationServiceInterface(ABC):\n    @abstractmethod\n    async def send_cashback_paid(self, order_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def send_balance_increased(self, user_id: UUID, amount: int) -> None:\n        ...\n\n    @abstractmethod\n    async def create_push(self, push: CreatePushDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\n        ...\n\n    @abstractmethod\n    async def get_pushes(self) -> list[Push]:\n        ...\n\n    @abstractmethod\n    async def get_push(self, push_id: UUID) -> Push:\n        ...\n\n    @abstractmethod\n    async def update_push(self, push_id: UUID, push: UpdatePushDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def delete_push(self, push_id: UUID) -> None:\n        ...\n"
  },
  {
    "path": "backend/abstractions/services/order.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom domain.dto.order import CreateOrderDTO, UpdateOrderDTO\nfrom domain.models.order import Order\nfrom domain.responses.order_report import OrderReport\n\n\nclass OrderServiceInterface(ABC):\n    @abstractmethod\n    async def create_order(self, order_dto: CreateOrderDTO) -> UUID:\n        \"\"\"\n        Создаёт новый заказ и возвращает его доменную модель.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def get_order(self, order_id: UUID) -> Order:\n        \"\"\"\n        Возвращает заказ по его ID.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def update_order(self, order_id: UUID, update_dto: UpdateOrderDTO) -> None:\n        \"\"\"\n        Обновляет данные заказа с указанным ID.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def delete_order(self, order_id: UUID) -> None:\n        \"\"\"\n        Удаляет заказ с указанным ID.\n        \"\"\"\n\n    @abstractmethod\n    async def get_orders(self, limit: int = 100, offset: int = 0) -> None:\n        \"\"\"\n        Удаляет заказ с указанным ID.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\n        \"\"\"\n        Возвращает список заказов для указанного пользователя.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def get_user_report(self, order_id: UUID) -> OrderReport:\n        ...\n\n    @abstractmethod\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\n        ...\n\n"
  },
  {
    "path": "backend/abstractions/services/__init__.py",
    "content": "from .user import UserServiceInterface\nfrom .product import ProductServiceInterface\nfrom .review import ReviewServiceInterface\nfrom .order import OrderServiceInterface"
  },
  {
    "path": "backend/abstractions/services/review.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom domain.dto.review import CreateReviewDTO, UpdateReviewDTO\nfrom domain.models.review import Review\n\n\nclass ReviewServiceInterface(ABC):\n    @abstractmethod\n    async def create_review(self, review_dto: CreateReviewDTO) -> Review:\n        \"\"\"\n        Добавляет новый отзыв и возвращает его доменную модель.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def get_review(self, review_id: UUID) -> Review:\n        \"\"\"\n        Добавляет новый отзыв и возвращает его доменную модель.\n        \"\"\"\n        ...\n    @abstractmethod\n    async def get_reviews(self) -> list[Review]:\n        \"\"\"\n        Добавляет новый отзыв и возвращает его доменную модель.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def update_review(self, review_id: UUID, update_dto: UpdateReviewDTO) -> None:\n        \"\"\"\n        Обновляет отзыв с заданным ID.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def delete_review(self, review_id: UUID) -> None:\n        \"\"\"\n        Удаляет отзыв с заданным ID.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    async def list_reviews_by_product(self, product_id: UUID) -> List[Review]:\n        \"\"\"\n        Возвращает список отзывов для указанного продукта.\n        \"\"\"\n        ...\n"
  },
  {
    "path": "backend/abstractions/services/moderator.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\nfrom domain.models import Product, User, Push\nfrom routes.requests.moderator import UpdateProductStatusRequest\n\n\nclass ModeratorServiceInterface(ABC):\n    @abstractmethod\n    async def get_products(self) -> list[Product]:\n        ...\n\n    @abstractmethod\n    async def get_product(self, product_id: UUID) -> Product:\n        ...\n\n    @abstractmethod\n    async def get_products_to_review(self) -> list[Product]:\n        ...\n\n    @abstractmethod\n    async def review_product(\n            self,\n            product_id: UUID,\n            moderator_id: UUID,\n            request: UpdateProductStatusRequest,\n    ) -> None:\n        ...\n\n    @abstractmethod\n    async def get_users(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_user(self, user_id: UUID) -> User:\n        ...\n\n    @abstractmethod\n    async def get_moderators(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_sellers(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_clients(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_banned(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def ban_user(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def unban_user(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def promote_user(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def demote_user(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def create_push(self, push: CreatePushDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\n        ...\n\n    @abstractmethod\n    async def get_pushes(self) -> list[Push]:\n        ...\n\n    @abstractmethod\n    async def get_push(self, push_id: UUID) -> Push:\n        ...\n\n    @abstractmethod\n    async def update_push(self, push_id: UUID, update_dto: UpdatePushDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def delete_push(self, push_id: UUID) -> None:\n        ...\n\n    async def use_discount(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\n        ...\n\n"
  },
  {
    "path": "backend/abstractions/services/permissions.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\n\nclass PermissionServiceInterface(ABC):\n    @abstractmethod\n    async def is_moderator(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def is_admin(self, user_id: UUID) -> None:\n        ...\n"
  },
  {
    "path": "backend/abstractions/services/product.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom domain.dto.product import CreateProductDTO, UpdateProductDTO\nfrom domain.models.product import Product\n\n\nclass ProductServiceInterface(ABC):\n    @abstractmethod\n    async def create_product(self, dto: CreateProductDTO) -> UUID:\n        \"\"\"Создать новый товар и вернуть его модель.\"\"\"\n        ...\n\n    @abstractmethod\n    async def get_product(self, product_id: UUID) -> Product:\n        \"\"\"Получить данные товара по его идентификатору.\"\"\"\n        ...\n\n    @abstractmethod\n    async def update_product(self, product_id: UUID, dto: UpdateProductDTO) -> None:\n        \"\"\"Обновить данные товара.\"\"\"\n        ...\n\n    @abstractmethod\n    async def delete_product(self, product_id: UUID) -> None:\n        \"\"\"Удалить товар.\"\"\"\n        ...\n\n    @abstractmethod\n    async def get_products(self, limit: int = 100, offset: int = 0) -> List[Product]:\n        \"\"\"Вернуть список товаров с пагинацией.\"\"\"\n        ...\n\n    @abstractmethod\n    async def get_by_article(self, article: str) -> Product:\n        ...\n\n    @abstractmethod\n    async def get_by_seller(self, seller_id: UUID) -> Optional[list[Product]]:\n        ...\n\n    @abstractmethod\n    async def get_active_products(self, limit: int = 100, offset: int = 0, search: Optional[str] = None) -> list[Product]:\n        ...\n"
  },
  {
    "path": "backend/abstractions/services/auth/service.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom domain.responses.auth import AuthTokens\n\n\nclass AuthServiceInterface(ABC):\n    @abstractmethod\n    async def get_user_id_from_jwt(self, token: str) -> UUID:\n        ...\n\n    @abstractmethod\n    async def create_token(self, init_data: str, ref_user_id: Optional[UUID] = None) -> AuthTokens:\n        ...\n\n    @abstractmethod\n    async def refresh_token(self, refresh_token: str) -> AuthTokens:\n        ...\n"
  },
  {
    "path": "backend/abstractions/services/auth/__init__.py",
    "content": ""
  },
  {
    "path": "backend/abstractions/services/auth/tokens.py",
    "content": "import logging\nfrom abc import ABC, abstractmethod\n\nfrom domain.responses.auth import AuthTokens\n\nlogger = logging.getLogger(__name__)\n\n\nclass TokenServiceInterface(ABC):\n    @abstractmethod\n    def get_token_payload(self, token: str) -> dict:\n        ...\n\n    @abstractmethod\n    def create_auth_token(self, user_id: str) -> AuthTokens:\n        ...\n"
  },
  {
    "path": "backend/infrastructure/__init__.py",
    "content": "\nfrom sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker\n\nfrom settings import settings\n\n__all__ = [\n    \"session_maker\",\n]\n\n\nengine = create_async_engine(settings.db.url, echo=False, pool_recycle=1800, pool_timeout=30)\nsession_maker = async_sessionmaker(engine, expire_on_commit=False)\n"
  },
  {
    "path": "backend/infrastructure/entities.py",
    "content": "from datetime import datetime\nfrom typing import Optional, List\nfrom uuid import UUID as pyUUID\n\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.order_status import OrderStatus\nfrom infrastructure.enums.payout_time import PayoutTime\nfrom infrastructure.enums.product_status import ProductStatus\nfrom infrastructure.enums.push_status import PushStatus\nfrom infrastructure.enums.user_role import UserRole\nfrom sqlalchemy import DateTime, ForeignKey, UUID, BigInteger, Enum\nfrom sqlalchemy.orm import declarative_base, Mapped, mapped_column, relationship\nfrom sqlalchemy.dialects.postgresql import TSVECTOR\n\nBase = declarative_base()\n\n\nclass AbstractBase(Base):\n    __abstract__ = True\n\n    id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)\n    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, onupdate=datetime.now)\n\n\nclass Product(AbstractBase):\n    __tablename__ = 'products'\n\n    name: Mapped[str]\n    brand: Mapped[str]\n    article: Mapped[str] = mapped_column(unique=True)\n    category: Mapped[Category] = mapped_column(Enum(Category))\n    key_word: Mapped[str]\n    general_repurchases: Mapped[int]\n    remaining_products: Mapped[int]\n    daily_repurchases: Mapped[int]\n    price: Mapped[float]\n    wb_price: Mapped[float]\n    tg: Mapped[str]\n    payment_time: Mapped[PayoutTime] = mapped_column(Enum(PayoutTime))\n    review_requirements: Mapped[str]\n    requirements_agree: Mapped[bool]\n    image_path: Mapped[Optional[str]]\n    seller_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\n    status: Mapped[ProductStatus] = mapped_column(Enum(ProductStatus), default=ProductStatus.CREATED)\n\n    reviews: Mapped[List['Review']] = relationship('Review', back_populates='product')\n    orders: Mapped[List['Order']] = relationship('Order', back_populates='product')\n    moderator_reviews: Mapped[list['ModeratorReview']] = relationship(\n        'ModeratorReview',\n        order_by=\"ModeratorReview.created_at\",\n        back_populates='product',\n    )\n    search_vector: Mapped[str] = mapped_column(\n        TSVECTOR(),\n        nullable=True,\n    )\n\n\nclass User(AbstractBase):\n    __tablename__ = 'users'\n\n    telegram_id: Mapped[Optional[int]] = mapped_column(BigInteger, unique=True)\n    nickname: Mapped[Optional[str]]\n    role: Mapped[UserRole] = mapped_column(Enum(UserRole))\n    is_banned: Mapped[bool]\n    is_seller: Mapped[bool]\n    balance: Mapped[Optional[int]]\n    invited_by: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('users.id'))\n    has_discount: Mapped[Optional[bool]]\n    referrer_bonus: Mapped[Optional[int]]\n\n    inviter: Mapped[Optional['User']] = relationship('User', foreign_keys=[invited_by], remote_side='User.id')\n    user_orders: Mapped[List[\"Order\"]] = relationship(\"Order\", foreign_keys=\"Order.user_id\")\n    seller_orders: Mapped[List[\"Order\"]] = relationship(\"Order\", foreign_keys=\"Order.seller_id\")\n    reviews: Mapped[List[\"Review\"]] = relationship(\"Review\", back_populates=\"user\")\n\n\n\nclass Order(AbstractBase):\n    __tablename__ = 'orders'\n\n    user_id: Mapped[UUID] = mapped_column(ForeignKey(\"users.id\"))\n    product_id: Mapped[UUID] = mapped_column(ForeignKey(\"products.id\"))\n    seller_id: Mapped[UUID] = mapped_column(ForeignKey(\"users.id\"))\n\n    # Чтобы отслеживать, на каком шаге сейчас заказ\n    step: Mapped[int] = mapped_column(default=1)\n\n    # Шаг 1: скриншоты\n    search_screenshot_path: Mapped[Optional[str]]\n    cart_screenshot_path: Mapped[Optional[str]]\n\n    # Шаг 4: реквизиты\n    card_number: Mapped[Optional[str]]\n    phone_number: Mapped[Optional[str]]\n    name: Mapped[Optional[str]]\n    bank: Mapped[Optional[str]]\n\n    # Шаг 5: финальный скрин корзины\n    final_cart_screenshot_path: Mapped[Optional[str]]\n\n    # Шаг 6: скрин доставки, скрин штрихкодов\n    delivery_screenshot_path: Mapped[Optional[str]]\n    barcodes_screenshot_path: Mapped[Optional[str]]\n\n    # Шаг 7: скрин отзывов, скрин электронного чека, номер чека\n    review_screenshot_path: Mapped[Optional[str]]\n    receipt_screenshot_path: Mapped[Optional[str]]\n    receipt_number: Mapped[Optional[str]]\n\n    status: Mapped[OrderStatus] = mapped_column(Enum(OrderStatus), default=\"CASHBACK_NOT_PAID\")\n\n    user: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[user_id], back_populates=\"user_orders\")\n    seller: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[seller_id], back_populates=\"seller_orders\")\n    product: Mapped[\"Product\"] = relationship(\"Product\", foreign_keys=[product_id], back_populates=\"orders\")\n\n\nclass Review(AbstractBase):\n    __tablename__ = 'reviews'\n\n    user_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\n    rating: Mapped[int]\n    comment: Mapped[str]\n\n    user: Mapped['User'] = relationship('User', back_populates='reviews')\n    product: Mapped['Product'] = relationship('Product', back_populates='reviews')\n\n\nclass ModeratorReview(AbstractBase):\n    __tablename__ = 'moderator_reviews'\n\n    moderator_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\n    comment_to_seller: Mapped[Optional[str]]\n    comment_to_moderator: Mapped[Optional[str]]\n    status_before: Mapped[ProductStatus]\n    status_after: Mapped[ProductStatus]\n\n    moderator: Mapped['User'] = relationship('User')\n    product: Mapped['Product'] = relationship('Product', back_populates='moderator_reviews')\n\n\nclass Push(AbstractBase):\n    __tablename__ = 'pushes'\n\n    title: Mapped[str] = mapped_column(unique=True)\n    text: Mapped[str]\n    creator_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\n    image_path: Mapped[Optional[str]]\n\n    button_text: Mapped[Optional[str]]\n    button_link: Mapped[Optional[str]]\n\n    deleted_at: Mapped[Optional[datetime]]\n\n    creator: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[creator_id])\n\n\nclass UserPush(AbstractBase):\n    __tablename__ = 'user_pushes'\n\n    push_id: Mapped[pyUUID] = mapped_column(ForeignKey('pushes.id'))\n    user_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\n    sent_at: Mapped[Optional[datetime]]\n    status: Mapped[PushStatus]\n\n    push: Mapped[\"Push\"] = relationship(\"Push\")\n    user: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[user_id])\n"
  },
  {
    "path": "backend/infrastructure/enums/user_role.py",
    "content": "from enum import StrEnum\n\n\nclass UserRole(StrEnum):\n    USER = \"user\"\n    CLIENT = \"client\"\n    SELLER = \"seller\"\n    MODERATOR = \"moderator\"\n    ADMIN = \"admin\"\n"
  },
  {
    "path": "backend/infrastructure/enums/payout_time.py",
    "content": "from enum import StrEnum\n\nclass PayoutTime(StrEnum):\n    AFTER_REVIEW = \"После отзыва\"\n    AFTER_DELIVERY = \"После получения товара\"\n    ON_15TH_DAY = \"На 15й день\"\n"
  },
  {
    "path": "backend/infrastructure/enums/push_status.py",
    "content": "from enum import StrEnum\n\n\nclass PushStatus(StrEnum):\n    PLANNED = 'planned'\n    IN_PROGRESS = 'in_progress'\n    DELIVERED = 'delivered'\n    FAILED = 'failed'\n"
  },
  {
    "path": "backend/infrastructure/enums/product_status.py",
    "content": "from enum import Enum\n\n\nclass ProductStatus(Enum):\n    CREATED = \"created\"\n    ACTIVE = \"active\"\n    NOT_PAID = \"not_paid\"\n    DISABLED = \"disabled\"\n    REJECTED = \"rejected\"  # отклонен совсем\n    ARCHIVED = \"archived\"\n"
  },
  {
    "path": "backend/infrastructure/enums/order_status.py",
    "content": "from enum import StrEnum\n\nclass OrderStatus(StrEnum):\n    CASHBACK_PAID = \"cashback_paid\"\n    CASHBACK_NOT_PAID = \"cashback_not_paid\"\n    CANCELLED = \"cancelled\"\n    PAYMENT_CONFIRMED = \"payment_confirmed\"\n"
  },
  {
    "path": "backend/infrastructure/enums/category.py",
    "content": "from enum import StrEnum\n\nclass Category(StrEnum):\n    WOMEN = \"Женщинам\"\n    MEN = \"Мужчинам\"\n    SHOES = \"Обувь\"\n    KIDS = \"Детям\"\n    HOME = \"Дом\"\n    NEW_YEAR = \"Новый год\"\n    BEAUTY = \"Красота\"\n    ACCESSORIES = \"Аксессуары\"\n    ELECTRONICS = \"Электроника\"\n    TOYS = \"Игрушки\"\n    FURNITURE = \"Мебель\"\n    ADULT = \"Товары для взрослых\"\n    APPLIANCES = \"Бытовая техника\"\n    PETS = \"Зоотовары\"\n    SPORTS = \"Спорт\"\n    AUTO = \"Автотовары\"\n    JEWELRY = \"Ювелирные изделия\"\n    REPAIR = \"Для ремонта\"\n    GARDEN = \"Сад и дача\"\n    HEALTH = \"Здоровье\"\n    STATIONERY = \"Канцтовары\"\n"
  },
  {
    "path": "backend/infrastructure/repositories/user.py",
    "content": "import logging\nfrom dataclasses import dataclass, field\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\n\nfrom abstractions.repositories.user import UserRepositoryInterface\nfrom domain.dto import CreateUserDTO, UpdateUserDTO\nfrom domain.models import User as UserModel\nfrom infrastructure.entities import User\nfrom infrastructure.enums.user_role import UserRole\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass UserRepository(\n    AbstractSQLAlchemyRepository[User, UserModel, CreateUserDTO, UpdateUserDTO],\n    UserRepositoryInterface\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        'inviter': None,\n    })\n\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                user = await session.get(self.entity, user_id)\n                user.referrer_bonus += bonus\n\n    async def get_moderators(self) -> list[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.role == UserRole.MODERATOR)\n            )\n\n            result = result.scalars().all()\n\n        return [self.entity_to_model(x) for x in result]\n\n    async def get_sellers(self) -> list[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.role == UserRole.SELLER)\n            )\n\n            result = result.scalars().all()\n\n        return [self.entity_to_model(x) for x in result]\n\n    async def get_clients(self) -> list[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.role == UserRole.CLIENT)\n            )\n\n            result = result.scalars().all()\n\n        return [self.entity_to_model(x) for x in result]\n\n    async def get_banned(self) -> list[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.is_banned == True)\n            )\n\n            result = result.scalars().all()\n\n        return [self.entity_to_model(x) for x in result]\n\n    async def get_by_telegram_id(self, telegram_id: int) -> Optional[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.telegram_id == telegram_id)\n                .options(*self.options)\n            )\n            user = result.unique().scalars().first()\n        if user:\n            return self.entity_to_model(user)\n\n        return None\n\n    async def become_seller(self, user_id: UUID):\n        async with self.session_maker() as session:\n            user = await session.get(self.entity, user_id)\n            async with session.begin():\n                user.is_seller = True\n\n    async def ensure_user(self, dto: CreateUserDTO) -> UserModel:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.telegram_id == dto.telegram_id)\n            )\n\n            user = result.scalars().one_or_none()\n\n        if not user:\n            await self.create(dto)\n\n        return await self.get_by_telegram_id(dto.telegram_id)\n\n    def create_dto_to_entity(self, dto: CreateUserDTO) -> User:\n        return User(\n            id=dto.id,\n            telegram_id=dto.telegram_id,\n            nickname=dto.nickname,\n            is_banned=False,\n            is_seller=False,\n            role=UserRole(dto.role),\n            balance=0,\n            invited_by=dto.invited_by,\n            referrer_bonus=0,\n            has_discount=dto.invited_by is not None,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: User) -> UserModel:\n        def map_inviter(inviter: User) -> UserModel:\n            inviter.inviter = None\n            return UserModel.model_validate(inviter)\n\n        inviter = self._get_relation(entity, 'inviter')\n\n        logger.info(f'inviter1 {inviter}')\n\n        return UserModel(\n            id=entity.id,\n            telegram_id=entity.telegram_id,\n            nickname=entity.nickname,\n            role=entity.role,\n            balance=entity.balance,\n            is_banned=entity.is_banned,\n            is_seller=entity.is_seller,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n            invited_by=entity.invited_by,\n            has_discount=entity.has_discount,\n            referrer_bonus=entity.referrer_bonus,\n            inviter=map_inviter(inviter) if inviter else None,\n        )\n"
  },
  {
    "path": "backend/infrastructure/repositories/order.py",
    "content": "import logging\nfrom dataclasses import field, dataclass\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nfrom abstractions.repositories import OrderRepositoryInterface\nfrom domain.dto import CreateOrderDTO, UpdateOrderDTO\nfrom domain.models import Order, Product as ProductModel, User\nfrom domain.models import User as UserModel\nfrom domain.models.order import Order as OrderModel\nfrom domain.responses.order_report import OrderReport\nfrom infrastructure.entities import Order, Product\nfrom infrastructure.enums.order_status import OrderStatus\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass OrderRepository(\n    AbstractSQLAlchemyRepository[Order, OrderModel, CreateOrderDTO, UpdateOrderDTO],\n    OrderRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        'product': None,\n        'user': None\n    })\n\n    def create_dto_to_entity(self, dto: CreateOrderDTO) -> Order:\n        return Order(\n            id=dto.id,\n            user_id=dto.user_id,\n            product_id=dto.product_id,\n            seller_id=dto.seller_id,\n            step=dto.step,\n            search_screenshot_path=dto.search_screenshot_path,\n            cart_screenshot_path=dto.cart_screenshot_path,\n            card_number=dto.card_number,\n            phone_number=dto.phone_number,\n            name=dto.name,\n            bank=dto.bank,\n            final_cart_screenshot_path=dto.final_cart_screenshot_path,\n            delivery_screenshot_path=dto.delivery_screenshot_path,\n            barcodes_screenshot_path=dto.barcodes_screenshot_path,\n            review_screenshot_path=dto.review_screenshot_path,\n            receipt_screenshot_path=dto.receipt_screenshot_path,\n            receipt_number=dto.receipt_number,\n            status=dto.status,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: Order) -> OrderModel:\n        def _map_product(product: Product) -> ProductModel:\n            return ProductModel(\n                id=product.id,\n                seller_id=product.seller_id,\n                name=product.name,\n                brand=product.brand,\n                article=product.article,\n                category=product.category,\n                key_word=product.key_word,\n                general_repurchases=product.general_repurchases,\n                remaining_products=product.remaining_products,\n                daily_repurchases=product.daily_repurchases,\n                price=product.price,\n                wb_price=product.wb_price,\n                tg=product.tg,\n                status=product.status,\n                payment_time=product.payment_time,\n                review_requirements=product.review_requirements,\n                requirements_agree=product.requirements_agree,\n                image_path=product.image_path,\n                created_at=product.created_at,\n                updated_at=product.updated_at\n            )\n\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                nickname=user.nickname,\n                role=user.role,\n                is_banned=user.is_banned,\n                balance=user.balance,\n                is_seller=user.is_seller,\n                created_at=user.created_at,\n                updated_at=user.updated_at\n            )\n\n        return OrderModel(\n            id=entity.id,\n            user_id=entity.user_id,\n            product_id=entity.product_id,\n            step=entity.step,\n            search_screenshot_path=entity.search_screenshot_path,\n            cart_screenshot_path=entity.cart_screenshot_path,\n            card_number=entity.card_number,\n            phone_number=entity.phone_number,\n            name=entity.name,\n            bank=entity.bank,\n            final_cart_screenshot_path=entity.final_cart_screenshot_path,\n            delivery_screenshot_path=entity.delivery_screenshot_path,\n            barcodes_screenshot_path=entity.barcodes_screenshot_path,\n            review_screenshot_path=entity.review_screenshot_path,\n            receipt_screenshot_path=entity.receipt_screenshot_path,\n            receipt_number=entity.receipt_number,\n            status=entity.status,\n            seller_id=entity.seller_id,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n            product=_map_product(entity.product),\n            user=_map_user(entity.user),\n            seller=_map_user(entity.user)\n        )\n\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.user_id == user_id)\n                .options(*self.options)\n            )\n            orders = result.scalars().all()\n            return [self.entity_to_model(order) for order in orders]\n\n\n    async def get_user_report(self, order_id: UUID) -> Order:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.id == order_id)\n                .options(*self.options)\n            )\n            order = result.scalars().first()\n            return self.entity_to_model(order)\n\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.seller_id == seller_id, self.entity.step == 7)\n                .options(*self.options)\n            )\n            orders = result.scalars().all()\n            logger.info(f\"orders found {len(orders)} orders for seller {seller_id}\")\n            logger.info([x.__dict__ for x in orders])\n            return [self.entity_to_model(order) for order in orders]\n"
  },
  {
    "path": "backend/infrastructure/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "backend/infrastructure/repositories/review.py",
    "content": "from typing import List\nfrom uuid import UUID\n\nfrom sqlalchemy import select\n\nfrom abstractions.repositories import ReviewRepositoryInterface\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\nfrom domain.models import Review as ReviewModel\nfrom infrastructure.entities import Review\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\n\nclass ReviewRepository(AbstractSQLAlchemyRepository[Review, Review, CreateReviewDTO, UpdateReviewDTO],\n                       ReviewRepositoryInterface):\n\n    def create_dto_to_entity(self, dto: CreateReviewDTO) -> Review:\n        return Review(\n            id=dto.id,\n            user_id=dto.user_id,\n            product_id=dto.product_id,\n            rating=dto.rating,\n            comment=dto.comment,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: Review) -> ReviewModel:\n        return ReviewModel(\n            id=entity.id,\n            user_id=entity.user_id,\n            product_id=entity.product_id,\n            rating=entity.rating,\n            comment=entity.comment,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at\n        )\n\n    async def get_reviews_by_product(self, product_id: UUID) -> List[Review]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity).where(self.entity.product_id == product_id)\n            )\n            reviews = result.scalars().all()\n            return [self.entity_to_model(review) for review in reviews]\n"
  },
  {
    "path": "backend/infrastructure/repositories/user_push.py",
    "content": "from dataclasses import field, dataclass\nfrom datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\n\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\nfrom domain.models import UserPush as UserPushModel, User as UserModel, Push as PushModel\nfrom infrastructure.entities import UserPush, User, Push\nfrom infrastructure.enums.push_status import PushStatus\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\n@dataclass\nclass UserPushRepository(\n    AbstractSQLAlchemyRepository[UserPush, UserPushModel, CreateUserPushDTO, UpdateUserPushDTO],\n    UserPushRepositoryInterface\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        'user': None,\n        'push': None,\n    })\n\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\n        async with self.session_maker() as session:\n            async with session.begin():\n                user_push = await session.get(self.entity, user_push_id)\n                user_push.status = status\n                if sent_at:\n                    user_push.sent_at = sent_at\n\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\n        async with self.session_maker() as session:\n            res = await session.execute(\n                select(self.entity.status == PushStatus.PLANNED)\n                .options(*self.options)\n                .order_by(self.entity.created_at)\n                .limit(size)\n            )\n            res = res.unique().scalars().all()\n\n        return [self.entity_to_model(x) for x in res]  # noqa\n\n    def create_dto_to_entity(self, dto: CreateUserPushDTO) -> UserPush:\n        return UserPush(\n            id=dto.id,\n            push_id=dto.push_id,\n            user_id=dto.user_id,\n            sent_at=None,\n            status=PushStatus.PLANNED,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: UserPush) -> UserPushModel:\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                nickname=user.nickname,\n                role=user.role,\n                balance=user.balance,\n                is_banned=user.is_banned,\n                is_seller=user.is_seller,\n                created_at=user.created_at,\n                updated_at=user.updated_at,\n            )\n\n        def _map_push(push: Push) -> PushModel:\n            return PushModel(\n                id=push.id,\n                title=push.title,\n                text=push.text,\n                creator_id=push.creator_id,\n                image_path=push.image_path,\n                created_at=push.created_at,\n                updated_at=push.updated_at\n            )\n\n        return UserPushModel(\n            id=entity.id,\n            push_id=entity.push_id,\n            user_id=entity.user_id,\n            sent_at=entity.sent_at,\n            status=entity.status,\n            user=_map_user(entity.user) if entity.user else None,\n            push=_map_push(entity.push) if entity.push else None,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at\n        )\n"
  },
  {
    "path": "backend/infrastructure/repositories/sqlalchemy.py",
    "content": "import logging\nfrom abc import abstractmethod\nfrom dataclasses import dataclass, field\nfrom typing import Type, Optional, Any\nfrom uuid import UUID\n\nfrom sqlalchemy import select\nfrom sqlalchemy.exc import NoResultFound, MissingGreenlet\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\nfrom sqlalchemy.orm import joinedload, InstrumentedAttribute\nfrom sqlalchemy.orm.exc import DetachedInstanceError\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom infrastructure.repositories.exceptions import NotFoundException\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass AbstractSQLAlchemyRepository[Entity, Model, CreateDTO, UpdateDTO](\n    CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO]\n):\n    session_maker: async_sessionmaker\n\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=dict)\n    options: list = field(default_factory=list)\n\n    def __post_init__(self):\n        self.entity: Type[Entity] = self.__orig_bases__[0].__args__[0]  # noqa\n        self._set_lazy_fields()\n\n    def _set_lazy_fields(self):\n        if not self.joined_fields:\n            return\n\n        def convert_to_nested_dict(fields):\n            return {field: {} for field in (fields or [])}\n\n        def get_associated_entity_class(attr_field):\n            \"\"\"\n            Extract the associated entity class from an InstrumentedAttribute.\n            \"\"\"\n            if hasattr(attr_field, \"comparator\") and hasattr(attr_field.comparator, \"prop\"):\n                relationship_prop = attr_field.comparator.prop\n                if hasattr(relationship_prop, \"mapper\"):\n                    return relationship_prop.mapper.entity\n            return None\n\n        def build_joinedload(attr_field, subfields, depth=0):\n            \"\"\"\n            Recursively build joinedload options for nested relationships.\n            \"\"\"\n            associated_entity = get_associated_entity_class(attr_field)\n            if not associated_entity:\n                raise ValueError(f\"Cannot determine associated entity class for attribute {attr_field}\")\n\n            loader = joinedload(attr_field)\n            for subfield, nested_subfields in subfields.items():\n                nested_attr_field = getattr(associated_entity, subfield, None)\n                if nested_attr_field is None:\n                    raise ValueError(f\"{subfield} is not a valid attribute of {associated_entity}\")\n\n                subloader = build_joinedload(nested_attr_field, nested_subfields, depth + 1)\n                loader = loader.options(subloader)\n            return loader\n\n        # Convert self.joined_fields to nested dictionaries if not already\n        joined_fields = {}\n        for field in self.joined_fields:\n            joined_fields[field] = convert_to_nested_dict(self.joined_fields[field])\n\n        options_to_add = []\n        for attr, subfields in joined_fields.items():\n            attr_field: InstrumentedAttribute = getattr(self.entity, attr)\n            if attr_field.comparator.prop.uselist:\n                loader = build_joinedload(attr_field, subfields or {})\n                options_to_add.append(loader)\n            else:\n                options_to_add.append(joinedload(attr_field))\n\n        self.options.extend(options_to_add)\n\n    async def create(self, obj: CreateDTO) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                session.add(self.create_dto_to_entity(obj))\n\n    async def create_many(self, objs: list[CreateDTO]) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                session.add_all([self.create_dto_to_entity(obj) for obj in objs])\n\n    async def get(self, obj_id: UUID) -> Model:\n        async with self.session_maker() as session:\n            try:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.id == obj_id)\n                        .options(*self.options)\n                    )\n                    obj = res.unique().scalars().one()\n                else:\n                    obj = await session.get(self.entity, obj_id)\n                return self.entity_to_model(obj) if obj else None\n            except NoResultFound:\n                raise NotFoundException\n\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                entity = await session.get(self.entity, obj_id)\n                for key, value in obj.model_dump(exclude_unset=True).items():\n                    setattr(entity, key, value)\n\n    async def delete(self, obj_id: UUID) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                obj = await session.get(self.entity, obj_id)\n                await session.delete(obj)\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Model]:\n        async with self.session_maker() as session:\n            if joined:\n                if self.options:\n                    return [\n                        self.entity_to_model(entity)\n                        for entity in (await session.execute(\n                            select(self.entity)\n                            .limit(limit)\n                            .offset(offset)\n                            .options(*self.options)\n                        )).unique().scalars().all()\n                    ]\n            res = (await session.execute(\n                select(self.entity)\n                .limit(limit)\n                .offset(offset)\n            )).scalars().all()\n            return [\n                self.entity_to_model(entity)\n                for entity in res\n            ]\n\n    @abstractmethod\n    def entity_to_model(self, entity: Entity) -> Model:\n        ...\n\n    @abstractmethod\n    def create_dto_to_entity(self, dto: CreateDTO) -> Entity:\n        ...\n\n    @staticmethod\n    def _get_relation(entity: Entity, relation: str, use_list: bool = False) -> Optional[Any]:\n        try:\n            logger.info(f\"Getting {relation} from {entity.id}\")\n            return getattr(entity, relation)\n        except DetachedInstanceError:\n            logger.error(f\"Could not get {relation} from {entity.id}\")\n            return [] if use_list else None\n"
  },
  {
    "path": "backend/infrastructure/repositories/moderator_review.py",
    "content": "from abstractions.repositories.moderator_review import ModeratorReviewRepositoryInterface\nfrom domain.dto.moderator_review import CreateModeratorReviewDTO, UpdateModeratorReviewDTO\nfrom infrastructure.entities import ModeratorReview\nfrom domain.models.moderator_review import ModeratorReview as ModeratorReviewModel\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\n\nclass ModeratorReviewRepository(\n    AbstractSQLAlchemyRepository[ModeratorReview, ModeratorReviewModel, CreateModeratorReviewDTO, UpdateModeratorReviewDTO],\n    ModeratorReviewRepositoryInterface,\n):\n    def create_dto_to_entity(self, dto: CreateModeratorReviewDTO) -> ModeratorReview:\n        return ModeratorReview(\n            id=dto.id,\n            moderator_id=dto.moderator_id,\n            comment_to_seller=dto.comment_to_seller,\n            product_id=dto.product_id,\n            comment_to_moderator=dto.comment_to_moderator,\n            status_before=dto.status_before,\n            status_after=dto.status_after,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: ModeratorReview) -> ModeratorReviewModel:\n        return ModeratorReviewModel(\n            id=entity.id,\n            moderator_id=entity.moderator_id,\n            comment_to_seller=entity.comment_to_seller,\n            product_id=entity.product_id,\n            comment_to_moderator=entity.comment_to_moderator,\n            status_before=entity.status_before,\n            status_after=entity.status_after,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "backend/infrastructure/repositories/exceptions.py",
    "content": "class NotFoundException(Exception):\n    ...\n"
  },
  {
    "path": "backend/infrastructure/repositories/product.py",
    "content": "import logging\nfrom dataclasses import field, dataclass\nfrom typing import Optional, Any\nfrom uuid import UUID\n\nfrom sqlalchemy import select, case, String, cast, func\nfrom sqlalchemy.orm import joinedload\n\nfrom abstractions.repositories import ProductRepositoryInterface\nfrom domain.dto import CreateProductDTO, UpdateProductDTO\nfrom domain.models import Product as ProductModel\nfrom domain.models.moderator_review import ModeratorReview as ModeratorReviewModel\nfrom infrastructure.entities import Product, ModeratorReview\nfrom infrastructure.enums.product_status import ProductStatus\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass ProductRepository(\n    AbstractSQLAlchemyRepository[Product, ProductModel, CreateProductDTO, UpdateProductDTO],\n    ProductRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        'moderator_reviews': None,\n    })\n\n    def __post_init__(self):\n        super().__post_init__()\n        self.options = [\n            joinedload(self.entity.moderator_reviews),\n        ]\n\n    async def get_active_products(self, limit=100, offset=0, search: Optional[str] = None):\n        async with self.session_maker() as session:\n            stmt = select(self.entity).where(self.entity.status == ProductStatus.ACTIVE)\n\n            if search:\n                # разбиваем запрос на слова и делаем префиксный поиск по каждому\n                tokens = [tok for tok in search.strip().split() if tok]\n                prefix_query = ' & '.join(f\"{tok}:*\" for tok in tokens)\n                tsq = func.to_tsquery('russian', prefix_query)\n                stmt = stmt.where(self.entity.search_vector.op('@@')(tsq))\n\n            result = await session.execute(stmt.limit(limit).offset(offset))\n            products = result.scalars().all()\n        return [self.entity_to_model(p) for p in products]\n\n    async def get_by_seller(self, user_id: UUID) -> Optional[list[ProductModel]]:\n        priority_case = case(\n            {\n                ProductStatus.CREATED.value.upper(): 1,\n                ProductStatus.ACTIVE.value.upper(): 2,\n                ProductStatus.DISABLED.value.upper(): 3,\n                ProductStatus.REJECTED.value.upper(): 4,\n                ProductStatus.ARCHIVED.value.upper(): 5,\n            },\n            value=func.upper(cast(Product.status, String)),\n            else_=99\n        )\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(Product)\n                .where(Product.seller_id == user_id)\n                .order_by(\n                    priority_case.asc(),\n                    Product.created_at.asc(),\n                )\n                .options(*self.options)\n            )\n            products = result.unique().scalars().all()\n\n        return [self.entity_to_model(product) for product in products]\n\n    async def get_products_to_review(self) -> list[ProductModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                # .where(self.entity.status == ProductStatus.CREATED)\n                .options(*self.options)\n            )\n            result = result.unique().scalars().all()\n        return [self.entity_to_model(x) for x in result]\n\n    def create_dto_to_entity(self, dto: CreateProductDTO) -> Product:\n        return Product(\n            id=dto.id,\n            name=dto.name,\n            brand=dto.brand,\n            article=dto.article,\n            category=dto.category,\n            key_word=dto.key_word,\n            general_repurchases=dto.general_repurchases,\n            remaining_products=dto.remaining_products,\n            daily_repurchases=dto.daily_repurchases,\n            price=dto.price,\n            wb_price=dto.wb_price,\n            tg=dto.tg,\n            payment_time=dto.payment_time,\n            review_requirements=dto.review_requirements,\n            requirements_agree=dto.requirements_agree,\n            seller_id=dto.seller_id,\n            status=ProductStatus.CREATED,\n            image_path=dto.image_path,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Product) -> ProductModel:\n        def _map_moderator_review(review: ModeratorReview) -> ModeratorReviewModel:\n            return ModeratorReviewModel.model_validate(review)\n\n        return ProductModel(\n            id=entity.id,\n            name=entity.name,\n            brand=entity.brand,\n            article=entity.article,\n            category=entity.category,\n            key_word=entity.key_word,\n            general_repurchases=entity.general_repurchases,\n            remaining_products=entity.remaining_products,\n            daily_repurchases=entity.daily_repurchases,\n            price=entity.price,\n            wb_price=entity.wb_price,\n            tg=entity.tg,\n            payment_time=entity.payment_time,\n            review_requirements=entity.review_requirements,\n            requirements_agree=entity.requirements_agree,\n            seller_id=entity.seller_id,\n            status=entity.status,\n            image_path=entity.image_path,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n            moderator_reviews=[\n                _map_moderator_review(x)\n                for x in self._get_relation(entity, 'moderator_reviews', use_list=True)\n            ]\n        )\n\n    async def get_by_article(self, article: str) -> Optional[Product]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.article == article)\n            )\n            product = result.scalars().one_or_none()\n        if product:\n            return self.entity_to_model(product)\n        return None\n"
  },
  {
    "path": "backend/infrastructure/repositories/push.py",
    "content": "from dataclasses import dataclass\nfrom datetime import datetime\nfrom uuid import UUID\n\nfrom sqlalchemy import select\nfrom sqlalchemy.exc import NoResultFound\n\nfrom abstractions.repositories.push import PushRepositoryInterface\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\nfrom domain.models import Push as PushModel\nfrom infrastructure.entities import Push\nfrom infrastructure.repositories.exceptions import NotFoundException\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\n\n@dataclass\nclass PushRepository(\n    AbstractSQLAlchemyRepository[Push, PushModel, CreatePushDTO, UpdatePushDTO],\n    PushRepositoryInterface\n):\n\n    async def delete(self, obj_id: UUID) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                obj = await session.get(self.entity, obj_id)\n                obj.deleted_at = datetime.now()\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[PushModel]:\n        async with self.session_maker() as session:\n            if joined:\n                if self.options:\n                    return [\n                        self.entity_to_model(entity)\n                        for entity in (await session.execute(\n                            select(self.entity)\n                            .where(self.entity.deleted_at == None)\n                            .limit(limit)\n                            .offset(offset)\n                            .options(*self.options)\n                        )).unique().scalars().all()\n                    ]\n            res = (await session.execute(\n                select(self.entity)\n                .where(self.entity.deleted_at == None)\n                .limit(limit)\n                .offset(offset)\n            )).scalars().all()\n            return [\n                self.entity_to_model(entity)\n                for entity in res\n            ]\n\n    async def get(self, obj_id: UUID) -> PushModel:\n        async with self.session_maker() as session:\n            try:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(\n                            self.entity.id == obj_id,\n                            self.entity.deleted_at == None,\n                        )\n                        .options(*self.options)\n                    )\n                    obj = res.unique().scalars().one()\n                else:\n                    obj = await session.get(self.entity, obj_id)\n                return self.entity_to_model(obj)\n            except NoResultFound:\n                raise NotFoundException\n\n    def create_dto_to_entity(self, dto: CreatePushDTO) -> Push:\n        return Push(\n            id=dto.id,\n            title=dto.title,\n            text=dto.text,\n            button_text=dto.button_text,\n            button_link=dto.button_link,\n            creator_id=dto.creator_id,\n            image_path=dto.image_path,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: Push) -> PushModel:\n        return PushModel(\n            id=entity.id,\n            title=entity.title,\n            text=entity.text,\n            button_text=entity.button_text,\n            button_link=entity.button_link,\n            creator_id=entity.creator_id,\n            image_path=entity.image_path,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at\n        )\n"
  },
  {
    "path": "backend/domain/__init__.py",
    "content": ""
  },
  {
    "path": "backend/domain/dto/user.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import Field\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\nfrom infrastructure.enums.user_role import UserRole\n\n\nclass CreateUserDTO(CreateDTO):\n    telegram_id: Optional[int]\n    nickname: Optional[str] = None\n    role: str = Field(default=UserRole.USER)\n    invited_by: Optional[UUID] = None\n\n\nclass UpdateUserDTO(UpdateDTO):\n    telegram_id: Optional[int] = None\n    nickname: Optional[str] = None\n    role: Optional[str] = None\n    is_banned: Optional[bool] = None\n    is_seller: Optional[bool] = None\n    balance: Optional[int] = None\n    has_discount: Optional[bool] = None"
  },
  {
    "path": "backend/domain/dto/order.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\nfrom infrastructure.enums.order_status import OrderStatus\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass CreateOrderDTO(CreateDTO):\n    user_id: UUID\n    product_id: UUID\n    seller_id: UUID\n    step: int\n    status: OrderStatus = None\n    search_screenshot_path: Optional[str] = None\n    cart_screenshot_path: Optional[str] = None\n    card_number: Optional[str] = None\n    phone_number: Optional[str] = None\n    name: Optional[str] = None\n    bank: Optional[str] = None\n    final_cart_screenshot_path: Optional[str] = None\n    delivery_screenshot_path: Optional[str] = None\n    barcodes_screenshot_path: Optional[str] = None\n    review_screenshot_path: Optional[str] = None\n    receipt_screenshot_path: Optional[str] = None\n    receipt_number: Optional[str] = None\n\n\n\nclass UpdateOrderDTO(UpdateDTO):\n    # user_id: Optional[UUID] = None\n    # product_id: Optional[UUID] = None\n    # seller_id: Optional[UUID] = None\n    step: Optional[int] = None\n    search_screenshot_path: Optional[str] = None\n    cart_screenshot_path: Optional[str] = None\n    card_number: Optional[str] = None\n    phone_number: Optional[str] = None\n    name: Optional[str] = None\n    bank: Optional[str] = None\n    final_cart_screenshot_path: Optional[str] = None\n    delivery_screenshot_path: Optional[str] = None\n    barcodes_screenshot_path: Optional[str] = None\n    review_screenshot_path: Optional[str] = None\n    receipt_screenshot_path: Optional[str] = None\n    receipt_number: Optional[str] = None\n    status: Optional[OrderStatus] = None\n"
  },
  {
    "path": "backend/domain/dto/__init__.py",
    "content": "from .user import CreateUserDTO, UpdateUserDTO\nfrom .order import CreateOrderDTO, UpdateOrderDTO\nfrom .product import CreateProductDTO, UpdateProductDTO\nfrom .review import CreateReviewDTO, UpdateReviewDTO\nfrom .push import CreatePushDTO, UpdatePushDTO\nfrom .user_push import CreateUserPushDTO, UpdateUserPushDTO\n"
  },
  {
    "path": "backend/domain/dto/review.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\n\n\nclass CreateReviewDTO(CreateDTO):\n    user_id: UUID\n    product_id: UUID\n    rating: int\n    comment: str\n\nclass UpdateReviewDTO(UpdateDTO):\n    rating: Optional[int] = None\n    comment: Optional[str] = None\n"
  },
  {
    "path": "backend/domain/dto/user_push.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\nfrom domain.models import User\nfrom infrastructure.entities import Push\n\n\nclass CreateUserPushDTO(CreateDTO):\n    push_id: UUID\n    user_id: UUID\n\nclass UpdateUserPushDTO(UpdateDTO):\n    push_id: Optional[UUID] = None\n    user_id: Optional[UUID] = None\n    sent_at: Optional[datetime] = None"
  },
  {
    "path": "backend/domain/dto/moderator_review.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass CreateModeratorReviewDTO(CreateDTO):\n    moderator_id: UUID\n    product_id: UUID\n    comment_to_seller: Optional[str] = None\n    comment_to_moderator: Optional[str] = None\n    status_before: ProductStatus\n    status_after: ProductStatus\n\n\nclass UpdateModeratorReviewDTO(UpdateDTO):\n    comment: Optional[str] = None\n"
  },
  {
    "path": "backend/domain/dto/product.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import Field, ConfigDict\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.payout_time import PayoutTime\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass CreateProductDTO(CreateDTO):\n    name: str\n    brand: str\n    article: str\n    category: Category\n    key_word: str\n    general_repurchases: int\n    remaining_products: int\n    daily_repurchases: int\n    price: float\n    wb_price: float\n    tg: str\n    payment_time: PayoutTime\n    review_requirements: str\n    requirements_agree: bool\n    seller_id: UUID\n    status: ProductStatus = Field(default=ProductStatus.CREATED)\n    image_path: Optional[str] = None\n\n\nclass UpdateProductDTO(UpdateDTO):\n    name: Optional[str] = None\n    brand: Optional[str] = None\n    article: Optional[str] = None\n    category: Optional[Category] = None\n    key_word: Optional[str] = None\n    general_repurchases: Optional[int] = None\n    remaining_products: Optional[int] = None\n    daily_repurchases: Optional[int] = None\n    price: Optional[float] = None\n    wb_price: Optional[float] = None\n    tg: Optional[str] = None\n    status: Optional[ProductStatus] = None\n    payment_time: Optional[PayoutTime] = None\n    review_requirements: Optional[str] = None\n    requirements_agree: Optional[bool] = None\n    image_path: Optional[str] = None\n"
  },
  {
    "path": "backend/domain/dto/base.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID, uuid4\n\nfrom pydantic import BaseModel, Field\n\n\nclass CreateDTO(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n\nclass UpdateDTO(BaseModel):\n    updated_at: Optional[datetime] = Field(default_factory=datetime.now)"
  },
  {
    "path": "backend/domain/dto/push.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\n\n\nclass CreatePushDTO(CreateDTO):\n    title: str\n    text: str\n    creator_id: UUID\n    image_path: Optional[str] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n\n\nclass UpdatePushDTO(UpdateDTO):\n    title: Optional[str] = None\n    text: Optional[str] = None\n    image_path: Optional[str] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n"
  },
  {
    "path": "backend/domain/responses/auth.py",
    "content": "from pydantic import BaseModel, Field\n\n\nclass AuthTokens(BaseModel):\n    access_token: str\n    refresh_token: str\n"
  },
  {
    "path": "backend/domain/responses/__init__.py",
    "content": ""
  },
  {
    "path": "backend/domain/responses/product.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom domain.models.moderator_review import ModeratorReview\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.payout_time import PayoutTime\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass ProductResponse(BaseModel):\n    id: UUID\n    name: str\n    brand: str\n    article: str\n    category: Category\n    key_word: str\n    general_repurchases: int\n    daily_repurchases: int\n    price: float\n    wb_price: float\n    tg: str\n    payment_time: PayoutTime\n    review_requirements: str\n    image_path: str | None = None\n    seller_id: UUID\n    status: ProductStatus\n    created_at: datetime\n    updated_at: datetime\n\n    last_moderator_review: Optional[ModeratorReview] = None\n\n    model_config = ConfigDict(from_attributes=True)"
  },
  {
    "path": "backend/domain/responses/order_report.py",
    "content": "from typing import Optional\nfrom pydantic import BaseModel, ConfigDict\n\nfrom infrastructure.enums.order_status import OrderStatus\n\n\nclass OrderReport(BaseModel):\n    step: int\n    search_screenshot_path: Optional[str] = None\n    cart_screenshot_path: Optional[str] = None\n    card_number: Optional[str] = None\n    article: Optional[str] = None\n    phone_number: Optional[str] = None\n    name: Optional[str] = None\n    bank: Optional[str] = None\n    final_cart_screenshot_path: Optional[str] = None\n    delivery_screenshot_path: Optional[str] = None\n    barcodes_screenshot_path: Optional[str] = None\n    review_screenshot_path: Optional[str] = None\n    receipt_screenshot_path: Optional[str] = None\n    receipt_number: Optional[str] = None\n    status: Optional[OrderStatus] = None\n    cashback: Optional[int] = None\n    model_config = ConfigDict(from_attributes=True)\n\n"
  },
  {
    "path": "backend/domain/models/user.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom infrastructure.enums.user_role import UserRole\n\n\nclass User(BaseModel):\n    id: UUID\n    telegram_id: Optional[int] = None\n    nickname: Optional[str] = None\n    role: UserRole\n    is_banned: bool\n    is_seller: bool\n    balance: Optional[int] = None\n    invited_by: Optional[UUID] = None\n    has_discount: Optional[bool] = None\n    referrer_bonus: Optional[int] = None\n\n    inviter: Optional['User'] = None\n    created_at: datetime\n    updated_at: datetime\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "backend/domain/models/order.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom domain.models import Product, User\nfrom infrastructure.enums.order_status import OrderStatus\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass Order(BaseModel):\n    id: UUID\n    user_id: UUID\n    product_id: UUID\n    seller_id: UUID\n    step: int\n    search_screenshot_path: Optional[str]\n    cart_screenshot_path: Optional[str]\n    card_number: Optional[str]\n    phone_number: Optional[str]\n    name: Optional[str]\n    bank: Optional[str]\n    final_cart_screenshot_path: Optional[str]\n    delivery_screenshot_path: Optional[str]\n    barcodes_screenshot_path: Optional[str]\n    review_screenshot_path: Optional[str]\n    receipt_screenshot_path: Optional[str]\n    receipt_number: Optional[str]\n    status: OrderStatus\n\n    product: Product\n    user: User\n    seller: User\n\n    model_config = ConfigDict(from_attributes=True)\n\n"
  },
  {
    "path": "backend/domain/models/__init__.py",
    "content": "from .user import User\nfrom .product import Product\nfrom .review import Review\nfrom .order import Order\nfrom .user_push import UserPush\nfrom .push import Push\n"
  },
  {
    "path": "backend/domain/models/review.py",
    "content": "from datetime import datetime\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\n\nclass Review(BaseModel):\n    id: UUID\n    user_id: UUID\n    product_id: UUID\n    rating: int\n    comment: str\n    created_at: datetime\n    updated_at: datetime\n\n    model_config = ConfigDict(from_attributes=True)\n\n"
  },
  {
    "path": "backend/domain/models/user_push.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\nfrom pydantic import ConfigDict\n\nfrom domain.models import User\nfrom domain.models.push import Push\nfrom infrastructure.enums.push_status import PushStatus\n\n\nclass UserPush(BaseModel):\n    id: UUID\n    push_id: UUID\n    user_id: UUID\n    sent_at: Optional[datetime] = None\n    status: PushStatus\n    created_at: datetime\n    updated_at: datetime\n\n    push: Optional[Push] = None\n    user: Optional[User] = None\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "backend/domain/models/moderator_review.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass ModeratorReview(BaseModel):\n    id: UUID\n    moderator_id: UUID\n    comment_to_seller: Optional[str] = None\n    comment_to_moderator: Optional[str] = None\n    product_id: UUID\n    status_before: ProductStatus\n    status_after: ProductStatus\n    created_at: datetime\n    updated_at: datetime\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "backend/domain/models/product.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom domain.models.moderator_review import ModeratorReview\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.payout_time import PayoutTime\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass Product(BaseModel):\n    id: UUID\n    name: str\n    brand: str\n    article: str\n    category: Category\n    key_word: str\n    general_repurchases: int\n    remaining_products: int\n    daily_repurchases: int\n    price: float\n    wb_price: float\n    tg: str\n    payment_time: PayoutTime\n    review_requirements: str\n    requirements_agree: bool\n    image_path: str | None = None\n    seller_id: UUID\n    status: ProductStatus\n    created_at: datetime\n    updated_at: datetime\n\n    moderator_reviews: Optional[list[ModeratorReview]] = None\n\n    model_config = ConfigDict(from_attributes=True)\n\n"
  },
  {
    "path": "backend/domain/models/push.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\nfrom pydantic import ConfigDict\n\nfrom pydantic import BaseModel\n\nfrom domain.models import User\n\n\nclass Push(BaseModel):\n    id: UUID\n    title: str\n    text: str\n    creator_id: UUID\n    image_path: Optional[str] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n    created_at: datetime\n    updated_at: datetime\n\n    creator: Optional[User] = None\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "backend/routes/auth.py",
    "content": "from fastapi import APIRouter\n\nfrom dependencies.services.auth.service import get_auth_service\nfrom routes.requests.auth import TelegramAuthRequest\n\nrouter = APIRouter(\n    prefix='/auth',\n    tags=['Auth'],\n)\n\n\n@router.post(\"/telegram\")\nasync def telegram_auth(payload: TelegramAuthRequest):\n    auth_service = get_auth_service()\n\n    tokens = await auth_service.create_token(init_data=payload.initData, ref_user_id=payload.ref)\n\n    return tokens\n"
  },
  {
    "path": "backend/routes/upload.py",
    "content": "import logging\nimport os\n\nfrom fastapi.responses import FileResponse\nfrom fastapi import APIRouter, Depends\n\nfrom abstractions.services.upload import UploadServiceInterface\nfrom dependencies.services.upload import get_upload_service\n\nrouter = APIRouter(\n    prefix=\"/upload\",\n    tags=[\"upload\"]\n)\n\nlogger = logging.getLogger(__name__)\n\n@router.get(\"/{filename}\")\nasync def get_file(\n        filename: str,\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n) -> FileResponse:\n    file_path = upload_service.get_file_path(filename)\n    return FileResponse(\n        path=file_path,\n        media_type='application/octet-stream',\n        filename=filename\n    )\n"
  },
  {
    "path": "backend/routes/order.py",
    "content": "import logging\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Request, Depends\nfrom fastapi import HTTPException, UploadFile, Form, File\n\nfrom abstractions.services.upload import UploadServiceInterface\nfrom dependencies.services.order import get_order_service\nfrom dependencies.services.upload import get_upload_service\nfrom domain.dto import UpdateOrderDTO\nfrom domain.dto.order import CreateOrderDTO\nfrom infrastructure.enums.order_status import OrderStatus\n\nrouter = APIRouter(\n    prefix=\"/orders\",\n    tags=[\"Orders\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.get(\"\")\nasync def get_orders(request: Request):\n    order_service = get_order_service()\n    orders = await order_service.get_orders()\n    return orders\n\n\n@router.get(\"/{order_id}\")\nasync def get_order(order_id: UUID, request: Request):\n    order_service = get_order_service()\n    order = await order_service.get_order(order_id)\n    return order\n\n\n@router.post(\"\")\nasync def create_order(\n        user_id: UUID = Form(...),\n        product_id: UUID = Form(...),\n        seller_id: UUID = Form(...),\n        search_query_screenshot: UploadFile = File(...),\n        cart_screenshot: UploadFile = File(...),\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n) -> UUID:\n    \"\"\"\n    Создаём заказ после шага 1:\n    - Сохраняем два скриншота (поискового запроса, корзины).\n    - Присваиваем step=1.\n    \"\"\"\n    # Сохраняем search_query_screenshot\n    try:\n        search_filename = await upload_service.upload(search_query_screenshot)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=\"Не удалось сохранить файл search_query_screenshot\"\n        ) from e\n\n    # Сохраняем cart_screenshot\n    try:\n        cart_filename = await upload_service.upload(cart_screenshot)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=\"Не удалось сохранить файл cart_screenshot\"\n        ) from e\n\n    # Создаём заказ (step=1)\n    order_data = CreateOrderDTO(\n        user_id=user_id,\n        product_id=product_id,\n        step=1,\n        seller_id=seller_id,\n        search_screenshot_path=search_filename,\n        cart_screenshot_path=cart_filename,\n        status=OrderStatus.CASHBACK_NOT_PAID,\n    )\n\n    # Допустим, у вас есть OrderService со методом create_order\n    order_service = get_order_service()\n    new_order_id = await order_service.create_order(order_data)\n    return new_order_id\n\n\n@router.patch(\"/status/{order_id}\")\nasync def update_order_status(\n        order_id: UUID,\n        status: OrderStatus = Form(...),\n):\n    update_data = {}\n    if status is not None:\n        update_data[\"status\"] = status\n\n    # Создаём DTO на основе собранных полей\n    dto = UpdateOrderDTO.model_validate(update_data)\n    order_service = get_order_service()\n\n    await order_service.update_order(order_id, dto)\n\n    # if not updated_order:\n    #     raise HTTPException(status_code=404, detail=\"Order not found\")\n\n    # return {\"message\": \"Order updated successfully\"}\n\n\n@router.patch(\"/{order_id}\")\nasync def update_order(\n        order_id: UUID,\n        step: Optional[int] = Form(None),\n\n        # Шаг 4 (реквизиты)\n        card_number: Optional[str] = Form(None),\n        phone_number: Optional[str] = Form(None),\n        name: Optional[str] = Form(None),\n        bank: Optional[str] = Form(None),\n\n        # Шаг 5\n        final_cart_screenshot: Optional[UploadFile] = File(None),\n\n        # Шаг 6\n        delivery_screenshot: Optional[UploadFile] = File(None),\n        barcodes_screenshot: Optional[UploadFile] = File(None),\n\n        # Шаг 7\n        review_screenshot: Optional[UploadFile] = File(None),\n        receipt_screenshot: Optional[UploadFile] = File(None),\n        receipt_number: Optional[str] = Form(None),\n\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n):\n\n\n    # Собираем данные для UpdateOrderDTO в словарь\n    update_data = {}\n\n    if step is not None:\n        update_data[\"step\"] = step\n\n    # Шаг 4: реквизиты\n    if card_number is not None:\n        update_data[\"card_number\"] = card_number\n    if phone_number is not None:\n        update_data[\"phone_number\"] = phone_number\n    if name is not None:\n        update_data[\"name\"] = name\n    if bank is not None:\n        update_data[\"bank\"] = bank\n\n    # Шаг 5\n    if final_cart_screenshot is not None:\n        path = await upload_service.upload(final_cart_screenshot)\n        update_data[\"final_cart_screenshot_path\"] = path\n\n    # Шаг 6\n    if delivery_screenshot is not None:\n        path = await upload_service.upload(delivery_screenshot)\n        update_data[\"delivery_screenshot_path\"] = path\n\n    if barcodes_screenshot is not None:\n        path = await upload_service.upload(barcodes_screenshot)\n        update_data[\"barcodes_screenshot_path\"] = path\n\n    # Шаг 7\n    if review_screenshot is not None:\n        path = await upload_service.upload(review_screenshot)\n        update_data[\"review_screenshot_path\"] = path\n\n    if receipt_screenshot is not None:\n        path = await upload_service.upload(receipt_screenshot)\n        update_data[\"receipt_screenshot_path\"] = path\n\n    if receipt_number is not None:\n        update_data[\"receipt_number\"] = receipt_number\n\n    # Создаём DTO на основе собранных полей\n    dto = UpdateOrderDTO.model_validate(update_data)\n\n    # Вызываем метод сервиса для обновления\n    order_service = get_order_service()\n    await order_service.update_order(order_id, dto)\n\n    # if not updated_order:\n    #     raise HTTPException(status_code=404, detail=\"Order not found\")\n\n    return {\"message\": \"Order updated successfully\"}\n\n\n@router.delete(\"/{order_id}\")\nasync def delete_order(order_id: UUID, request: Request):\n    order_service = get_order_service()\n    await order_service.delete_order(order_id)\n    return {\"message\": \"Order deleted successfully\"}\n"
  },
  {
    "path": "backend/routes/__init__.py",
    "content": "from fastapi import APIRouter\n\nfrom .auth import router as auth_router\nfrom .moderator import router as moderator_router\nfrom .order import router as orders_router\nfrom .product import router as product_router\nfrom .review import router as review_router\nfrom .user import router as user_router\nfrom .upload import router as upload_router\n\nrouter = APIRouter(\n    prefix=\"/api\",\n)\n\nrouter.include_router(auth_router)\nrouter.include_router(product_router)\nrouter.include_router(review_router)\nrouter.include_router(user_router)\nrouter.include_router(moderator_router)\nrouter.include_router(product_router)\nrouter.include_router(orders_router)\nrouter.include_router(upload_router)\n"
  },
  {
    "path": "backend/routes/review.py",
    "content": "import logging\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Request\n\nfrom dependencies.services.review import get_review_service\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\nfrom routes.requests.review import CreateReviewRequest, UpdateReviewRequest\n\nrouter = APIRouter(\n    prefix=\"/reviews\",\n    tags=[\"Reviews\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.get(\"\")\nasync def list_reviews(request: Request):\n    review_service = get_review_service()\n    reviews = await review_service.get_reviews()\n    return reviews\n\n\n@router.get(\"/{review_id}\")\nasync def get_review(review_id: UUID, request: Request):\n    review_service = get_review_service()\n    review = await review_service.get_review(review_id)\n    return review\n\n\n@router.post(\"\")\nasync def create_review(request: Request, review_req: CreateReviewRequest):\n    review_service = get_review_service()\n    dto = CreateReviewDTO(**review_req.dict())\n    review = await review_service.create_review(dto)\n    return review\n\n\n@router.patch(\"/{review_id}\")\nasync def update_review(review_id: UUID, request: Request, review_req: UpdateReviewRequest):\n    review_service = get_review_service()\n    dto = UpdateReviewDTO(**review_req.model_dump(exclude_unset=True))\n    await review_service.update_review(review_id, dto)\n    return {\"message\": \"Review updated successfully\"}\n\n\n@router.delete(\"/{review_id}\")\nasync def delete_review(review_id: UUID, request: Request):\n    review_service = get_review_service()\n    await review_service.delete_review(review_id)\n    return {\"message\": \"Review deleted successfully\"}\n"
  },
  {
    "path": "backend/routes/utils.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom fastapi import Request\n\n\ndef get_user_id_from_request(request: Request) -> Optional[UUID]:\n    return request.scope.get('x_user_id', None)\n"
  },
  {
    "path": "backend/routes/product.py",
    "content": "import logging\nfrom typing import Optional, Annotated\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, UploadFile, File, Form, HTTPException, Request, Depends\n\nfrom abstractions.services.upload import UploadServiceInterface\nfrom dependencies.services.product import get_product_service  # функция, возвращающая экземпляр ProductService\nfrom dependencies.services.upload import get_upload_service\nfrom domain.dto import CreateProductDTO, UpdateProductDTO\nfrom domain.models import Product\nfrom domain.responses.product import ProductResponse\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.payout_time import PayoutTime\nfrom infrastructure.enums.product_status import ProductStatus\nfrom routes.requests.update_product import UpdateProductForm\nfrom routes.utils import get_user_id_from_request\n\nrouter = APIRouter(\n    prefix=\"/products\",\n    tags=[\"Products\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.get(\"\")\nasync def get_products(\n        request: Request,\n        search: Optional[str] = None,\n):\n    product_service = get_product_service()\n    products = await product_service.get_active_products(search=search)\n    return products\n\n\n@router.get(\"/article\")\nasync def get_by_article(article: str) -> Product:\n    product_service = get_product_service()\n    return await product_service.get_by_article(article)\n\n\n@router.get(\"/seller\")\nasync def get_by_seller(\n        request: Request,\n) -> Optional[list[Product]]:\n    product_service = get_product_service()\n    seller_id = get_user_id_from_request(request)\n    return await product_service.get_by_seller(seller_id)\n\n\n@router.get(\"/{product_id}\")\nasync def get_product(\n        product_id: UUID,\n) -> ProductResponse:\n    product_service = get_product_service()\n    product = await product_service.get_product(product_id)\n\n    if not product:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n\n    response = ProductResponse.model_validate(product)\n    if product.moderator_reviews:\n        response.last_moderator_review = product.moderator_reviews[-1]  # todo\n\n    return response\n\n\n@router.post(\"\")\nasync def create_product(\n        request: Request,\n        name: str = Form(...),\n        article: str = Form(...),\n        brand: str = Form(...),\n        category: Category = Form(...),\n        key_word: str = Form(...),\n        general_repurchases: int = Form(...),\n        daily_repurchases: int = Form(...),\n        price: float = Form(..., gt=0),\n        wb_price: float = Form(...),\n        tg: str = Form(...),\n        payment_time: PayoutTime = Form(...),\n        review_requirements: str = Form(...),\n        requirements_agree: bool = Form(...),\n        image: Optional[UploadFile] = File(None),\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n) -> UUID:\n    seller_id = get_user_id_from_request(request)\n    image_path = None\n\n    dto = CreateProductDTO(\n        name=name,\n        brand=brand,\n        category=category,\n        key_word=key_word,\n        general_repurchases=general_repurchases,\n        remaining_products=general_repurchases,\n        daily_repurchases=daily_repurchases,\n        price=price,\n        wb_price=wb_price,\n        tg=tg,\n        payment_time=payment_time,\n        review_requirements=review_requirements,\n        requirements_agree=requirements_agree,\n        article=article,\n        image_path=image_path,\n        seller_id=seller_id\n    )\n\n    if image is not None:\n        try:\n            image_path = await upload_service.upload(image)\n        except Exception as e:\n            raise HTTPException(\n                status_code=500,\n                detail=\"Не удалось сохранить файл\"\n            ) from e\n    else:\n        logger.error(\"ATTENTION!!! IMAGE IS NONE\")\n\n    dto.image_path = image_path\n\n    product_service = get_product_service()\n    product_id = await product_service.create_product(dto)\n\n    return product_id\n\n\n@router.patch(\"/{product_id}\")\nasync def update_product(\n        product_id: UUID,\n        data: Annotated[UpdateProductForm, Form()],\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n) -> dict:\n    update_dto = UpdateProductDTO.model_validate(data.model_dump(exclude_unset=True))\n    # dto = UpdateProductDTO(\n    #     name=data.name,\n    #     brand=brand,\n    #     category=category,\n    #     key_word=key_word,\n    #     general_repurchases=general_repurchases,\n    #     daily_repurchases=daily_repurchases,\n    #     price=price,\n    #     wb_price=wb_price,\n    #     tg=tg,\n    #     payment_time=payment_time,\n    #     status=status,\n    #     review_requirements=review_requirements,\n    #     article=article,\n    # )\n\n    if data.image is not None:\n        try:\n            image_path = await upload_service.upload(data.image)\n            update_dto.image_path = image_path\n        except Exception as e:\n            logger.error(e, exc_info=True)\n            raise HTTPException(\n                status_code=500,\n                detail=\"Не удалось сохранить файл\"\n            ) from e\n\n    product_service = get_product_service()\n    await product_service.update_product(product_id, update_dto)\n    return {\"message\": \"Product updated successfully\"}\n\n\n@router.patch(\"/status/{product_id}\")\nasync def update_product_status(\n        product_id: UUID,\n        status: Optional[ProductStatus] = Form(...),\n) -> dict:\n    dto = UpdateProductDTO(\n        status=status,\n    )\n\n    product_service = get_product_service()\n    await product_service.update_product(product_id, dto)\n    return {\"message\": \"Product updated successfully\"}\n\n\n@router.delete(\"/{product_id}\")\nasync def delete_product(product_id: UUID):\n    product_service = get_product_service()\n    await product_service.delete_product(product_id)\n    return {\"message\": \"Product deleted successfully\"}\n"
  },
  {
    "path": "backend/routes/moderator/users.py",
    "content": "import logging\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Request\n\nfrom domain.models import User\nfrom routes.moderator.utils import moderator_pre_request\n\nrouter = APIRouter(\n    prefix='/users',\n)\n\nlogger = logging.getLogger(__name__)\n\n@router.get('')\nasync def get_users(\n        request: Request,\n) -> list[User]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_users()\n\n\n@router.get('/moderators')\nasync def get_moderators(\n        request: Request,\n) -> list[User]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_moderators()\n\n\n@router.get('/sellers')\nasync def get_sellers(\n        request: Request,\n) -> list[User]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_sellers()\n\n@router.get('/clients')\nasync def get_clients(\n        request: Request,\n) -> list[User]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_clients()\n\n\n@router.get('/banned')\nasync def get_banned_users(\n        request: Request,\n) -> list[User]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_banned()\n\n\n@router.get('/{user_id}')\nasync def get_user(\n        request: Request,\n        user_id: UUID,\n) -> User:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    res = await moderator_service.get_user(user_id)\n    logger.info(f'inviter {res.inviter}')\n    return res\n\n@router.post('/{user_id}/ban')\nasync def ban_user(\n        request: Request,\n        user_id: UUID,\n\n) -> None:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.ban_user(user_id)\n\n\n@router.post('/{user_id}/unban')\nasync def unban_user(\n        request: Request,\n        user_id: UUID,\n\n) -> None:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.unban_user(user_id)\n\n\n@router.post('/{user_id}/promote')\nasync def promote_user(\n        request: Request,\n        user_id: UUID,\n\n) -> None:\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\n\n    await permission_service.is_admin(moderator_id)\n\n    return await moderator_service.promote_user(user_id)\n\n\n@router.post('/{user_id}/demote')\nasync def demote_user(\n        request: Request,\n        user_id: UUID,\n\n) -> None:\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\n\n    await permission_service.is_admin(moderator_id)\n\n    return await moderator_service.demote_user(user_id)\n\n@router.post('/{user_id}/use-discount')\nasync def use_discount_user(\n        request: Request,\n        user_id: UUID,\n) -> None:\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\n\n    await permission_service.is_moderator(moderator_id)\n\n    return await moderator_service.use_discount(user_id)\n\n\n@router.post('/{user_id}/referral-purchase')\nasync def referral_purchase(\n        request: Request,\n        user_id: UUID,\n        amount: int,\n) -> None:\n    moderator_id, moderator_service, permission_service = await moderator_pre_request(request)\n\n    await permission_service.is_moderator(moderator_id)\n\n    return await moderator_service.increase_referrer_bonus(user_id, amount)\n"
  },
  {
    "path": "backend/routes/moderator/__init__.py",
    "content": "from fastapi import APIRouter\n\nfrom .products import router as products_router\nfrom .users import router as users_router\nfrom .push import router as pushes_router\n\nrouter = APIRouter(\n    prefix='/moderator',\n    tags=['Moderator']\n)\n\nrouter.include_router(products_router)\nrouter.include_router(users_router)\nrouter.include_router(pushes_router)\n"
  },
  {
    "path": "backend/routes/moderator/products.py",
    "content": "from uuid import UUID\n\nfrom fastapi import APIRouter, Request\n\nfrom domain.models import Product\nfrom routes.moderator.utils import moderator_pre_request\nfrom routes.requests.moderator import UpdateProductStatusRequest\n\nrouter = APIRouter(\n    prefix='/products',\n)\n\n@router.get('')\nasync def get_products(\n        request: Request,\n) -> list[Product]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_products()\n\n\n@router.get('/to-review')\nasync def get_products_to_review(\n        request: Request,\n) -> list[Product]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_products_to_review()\n\n\n@router.get('/{product_id}')\nasync def get_product(\n        request: Request,\n        product_id: UUID,\n) -> Product:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_product(product_id)\n\n\n@router.patch('/{product_id}')\nasync def review_product(\n        request: Request,\n        product_id: UUID,\n        update_request: UpdateProductStatusRequest,\n) -> None:\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\n\n    await moderator_service.review_product(\n        product_id=product_id,\n        moderator_id=moderator_id,\n        request=update_request,\n    )\n"
  },
  {
    "path": "backend/routes/moderator/utils.py",
    "content": "from uuid import UUID\n\nfrom fastapi import Request\n\nfrom abstractions.services.moderator import ModeratorServiceInterface\nfrom abstractions.services.permissions import PermissionServiceInterface\nfrom dependencies.services.moderator import get_moderator_service\nfrom dependencies.services.permissions import get_permission_service\nfrom routes.utils import get_user_id_from_request\n\n\nasync def moderator_pre_request(request: Request) -> tuple[UUID, ModeratorServiceInterface, PermissionServiceInterface]:\n    permission_service = get_permission_service()\n\n    moderator_id = get_user_id_from_request(request)\n\n    await permission_service.is_moderator(moderator_id)\n\n    return moderator_id, get_moderator_service(), permission_service\n"
  },
  {
    "path": "backend/routes/moderator/push.py",
    "content": "from typing import Annotated\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Request, Form, HTTPException\n\nfrom dependencies.services.upload import get_upload_service\nfrom domain.dto import CreatePushDTO, UpdatePushDTO\nfrom domain.models import Push\nfrom routes.moderator.utils import moderator_pre_request\nfrom routes.requests.push import CreatePushRequest, UpdatePushRequest\n\nrouter = APIRouter(\n    prefix='/pushes'\n)\n\n\n@router.get('')\nasync def get_pushes(request: Request) -> list[Push]:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_pushes()\n\n\n@router.get('/{push_id}')\nasync def get_push(\n        push_id: UUID,\n        request: Request,\n) -> Push:\n    _, moderator_service, _ = await moderator_pre_request(request)\n\n    return await moderator_service.get_push(push_id)\n\n\n@router.post('')\nasync def create_push(\n        create_request: Annotated[CreatePushRequest, Form()],\n        request: Request,\n) -> None:\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\n\n    create_dto = CreatePushDTO(\n        title=create_request.title,\n        text=create_request.text,\n        creator_id=moderator_id,\n        button_text=create_request.button_text,\n        button_link=create_request.button_link,\n    )\n\n    if create_request.image:\n        upload_service = get_upload_service()\n        try:\n            create_dto.image_path = await upload_service.upload(create_request.image)\n        except Exception as e:\n            raise HTTPException(\n                status_code=500,\n                detail=\"Не удалось сохранить файл search_query_screenshot\"\n            ) from e\n\n    await moderator_service.create_push(create_dto)\n\n\n@router.patch('/{push_id}')\nasync def update_push(\n        request: Request,\n        push_id: UUID,\n        update_request: Annotated[UpdatePushRequest, Form()],\n) -> None:\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\n\n    update_dto = UpdatePushDTO(\n        title=update_request.title,\n        text=update_request.text,\n        button_text=update_request.button_text,\n        button_link=update_request.button_link,\n    )\n\n    request_dump = update_request.model_dump(exclude_unset=True)\n    if image := request_dump.get('image', None):\n        upload_service = get_upload_service()\n        update_dto.image_path = await upload_service.upload(image)\n\n    await moderator_service.update_push(\n        push_id=push_id,\n        update_dto=update_dto,\n    )\n\n\n@router.delete('/{push_id}')\nasync def delete_push(\n        request: Request,\n        push_id: UUID,\n) -> None:\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\n    await moderator_service.delete_push(\n        push_id=push_id\n    )\n\n\n@router.post('/{push_id}/activate')\nasync def activate_push(\n        push_id: UUID,\n        user_ids: list[UUID],\n        request: Request,\n) -> None:\n    moderator_id, moderator_service, _ = await moderator_pre_request(request)\n\n    await moderator_service.activate_push(\n        push_id=push_id,\n        user_ids=user_ids,\n    )\n"
  },
  {
    "path": "backend/routes/user/order.py",
    "content": "from uuid import UUID\n\nfrom fastapi import APIRouter, Request\n\nfrom dependencies.services.order import get_order_service\nfrom domain.models import Order\nfrom domain.responses.order_report import OrderReport\nfrom routes.utils import get_user_id_from_request\n\nrouter = APIRouter(\n    prefix=\"/orders\",\n)\n\n\n@router.get(\"\")\nasync def get_orders_by_user(request: Request) -> list[Order]:\n    user_id = get_user_id_from_request(request)\n    order_service = get_order_service()\n    return await order_service.get_orders_by_user(user_id)\n\n\n@router.get(\"/reports/{seller_id}\")\nasync def get_orders_by_seller(request: Request, seller_id: UUID) -> list[Order]:\n    order_service = get_order_service()\n    return await order_service.get_orders_by_seller(seller_id)\n\n\n@router.get(\"/report/{order_id}\")\nasync def get_user_report(request: Request, order_id: UUID) -> OrderReport:\n    order_service = get_order_service()\n    return await order_service.get_user_report(order_id)\n"
  },
  {
    "path": "backend/routes/user/__init__.py",
    "content": "import logging\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Request, HTTPException, Form\n\nfrom dependencies.services.user import get_user_service\nfrom domain.dto import CreateUserDTO, UpdateUserDTO\nfrom domain.models import User\nfrom routes.requests.user import CreateUserRequest, UpdateUserRequest\nfrom .order import router as order_router\nfrom .product import router as product_router\nfrom ..utils import get_user_id_from_request\n\nrouter = APIRouter(\n    prefix=\"/users\",\n    tags=[\"Users\"],\n)\nrouter.include_router(product_router)\nrouter.include_router(order_router)\n\nlogger = logging.getLogger(__name__)\n\n\n# todo: все ручки кроме get /me - в модераторский роутер и в модераторский сервис\n@router.get(\"\")\nasync def list_users(request: Request):\n    user_service = get_user_service()\n    users = await user_service.get_users()  # Метод должен возвращать список пользователей\n    return users\n\n\n@router.get(\"/me\")\nasync def get_me(request: Request) -> User:\n    user_id = get_user_id_from_request(request)\n    logger.info(\"id AAAA\")\n    logger.info(user_id)\n    user_service = get_user_service()\n    user = await user_service.get_user(user_id)\n    return user\n\n\n@router.get(\"/invite\")\nasync def get_invite_link(request: Request):\n    user_service = get_user_service()\n    user_id = get_user_id_from_request(request)\n\n    link = await user_service.get_invite_link(user_id)\n\n    return link\n\n\n@router.get(\"/{user_id}\")\nasync def get_user(user_id: UUID, request: Request):\n    user_service = get_user_service()\n    user = await user_service.get_user(user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n    return user\n\n\n@router.post(\"\")\nasync def create_user(request: Request, user_req: CreateUserRequest):\n    user_service = get_user_service()\n    dto = CreateUserDTO(**user_req.dict())\n    user = await user_service.create_user(dto)\n    return user\n\n\n@router.patch(\"/{user_id}\")\nasync def update_user(user_id: UUID, request: Request, user_req: UpdateUserRequest):\n    user_service = get_user_service()\n    dto = UpdateUserDTO(**user_req.model_dump(exclude_unset=True))\n    await user_service.update_user(user_id, dto)\n    return {\"message\": \"User updated successfully\"}\n\n\n@router.delete(\"/{user_id}\")\nasync def delete_user(user_id: UUID, request: Request):\n    user_service = get_user_service()\n    await user_service.delete_user(user_id)\n    return {\"message\": \"User deleted successfully\"}\n\n\n@router.patch(\"/balance/{user_id}\")\nasync def increase_balance(\n        request: Request,\n        user_id: UUID,\n        balance: int = Form(...),\n):\n    user_service = get_user_service()\n    await user_service.increase_balance(user_id, balance)\n\n\n@router.get(\"/balance/{user_id}\")\nasync def get_balance(request: Request):\n    user_service = get_user_service()\n    user = await user_service.get_user(get_user_id_from_request(request))\n    return user.balance\n"
  },
  {
    "path": "backend/routes/user/product.py",
    "content": "from uuid import UUID\n\nfrom fastapi import APIRouter, Request\n\nfrom dependencies.services.product import get_product_service\nfrom dependencies.services.user import get_user_service\nfrom domain.models import Product\nfrom routes.utils import get_user_id_from_request\n\nrouter = APIRouter(\n    prefix=\"/products\",\n)\n\n\n@router.get(\"\")\nasync def get_products_by_user(request: Request) -> list[Product]:\n    user_id = get_user_id_from_request(request)\n    user_service = get_user_service()\n    return await user_service.get_products_by_user(user_id)\n"
  },
  {
    "path": "backend/routes/requests/auth.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass TelegramAuthRequest(BaseModel):\n    initData: str\n    ref: Optional[UUID] = None\n"
  },
  {
    "path": "backend/routes/requests/user.py",
    "content": "from pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional\n\nclass CreateUserRequest(BaseModel):\n    telegram_id: Optional[int] = Field(None, description=\"Telegram ID пользователя\")\n    nickname: Optional[str] = Field(None, description=\"Ник пользователя\")\n    email: EmailStr = Field(..., description=\"Email пользователя\")\n    password: str = Field(..., min_length=6, description=\"Пароль пользователя\")\n\nclass UpdateUserRequest(BaseModel):\n    nickname: Optional[str] = Field(None, description=\"Новое имя или ник пользователя\")\n    email: Optional[EmailStr] = Field(None, description=\"Новый email пользователя\")\n    password: Optional[str] = Field(None, min_length=6, description=\"Новый пароль пользователя\")\n"
  },
  {
    "path": "backend/routes/requests/order.py",
    "content": "from typing import Optional\nfrom uuid import UUID\nfrom pydantic import BaseModel, Field\n\nclass CreateOrderRequest(BaseModel):\n    user_id: UUID = Field(..., description=\"ID пользователя, который оформляет заказ\")\n    product_id: UUID = Field(..., description=\"ID продукта, который заказывается\")\n    card_number: str = Field(..., min_length=13, max_length=19, description=\"Номер карты для оплаты\")\n\n\nclass UpdateOrderRequest(BaseModel):\n    status: Optional[str] = Field(None, description=\"Новый статус заказа (например, 'pending', 'approved', 'rejected')\")\n    card_number: Optional[str] = Field(None, description=\"Новая карта\")\n"
  },
  {
    "path": "backend/routes/requests/__init__.py",
    "content": ""
  },
  {
    "path": "backend/routes/requests/review.py",
    "content": "from uuid import UUID\n\nfrom pydantic import BaseModel, Field\nfrom typing import Optional\n\nclass CreateReviewRequest(BaseModel):\n    user_id: UUID = Field(..., description=\"ID юзера, который оценивается\")\n    product_id: UUID = Field(..., description=\"ID продукта, который оценивается\")\n    rating: int = Field(..., ge=1, le=5, description=\"Оценка продукта от 1 до 5\")\n    comment: str = Field(..., description=\"Комментарий к отзыву\")\n\nclass UpdateReviewRequest(BaseModel):\n    rating: Optional[int] = Field(None, ge=1, le=5, description=\"Обновлённая оценка продукта (от 1 до 5)\")\n    comment: Optional[str] = Field(None, description=\"Обновлённый комментарий\")\n"
  },
  {
    "path": "backend/routes/requests/moderator.py",
    "content": "from typing import Optional\n\nfrom pydantic import BaseModel, Field\n\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass UpdateProductStatusRequest(BaseModel):\n    status: Optional[ProductStatus] = None\n    comment_to_seller: Optional[str] = Field(None, validation_alias=\"commentSeller\")\n    comment_to_moderator: Optional[str] = Field(None, validation_alias=\"commentModerator\")\n"
  },
  {
    "path": "backend/routes/requests/update_product.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\nfrom fastapi import UploadFile\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.payout_time import PayoutTime\nfrom infrastructure.enums.product_status import ProductStatus\n\n\nclass UpdateProductForm(BaseModel):\n    name: Optional[str] = None\n    article: Optional[str] = None\n    brand: Optional[str] = None\n    category: Optional[Category] = None\n    key_word: Optional[str] = None\n    general_repurchases: Optional[int] = None\n    daily_repurchases: Optional[int] = None\n    price: Optional[float] = None\n    wb_price: Optional[float] = None\n    tg: Optional[str] = None\n    status: Optional[ProductStatus] = None\n    payment_time: Optional[PayoutTime] = None\n    review_requirements: Optional[str] = None\n    image: Optional[UploadFile] = None\n"
  },
  {
    "path": "backend/routes/requests/product.py",
    "content": "from typing import Optional\n\nfrom pydantic import BaseModel, Field\n\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.payout_time import PayoutTime\n\n\nclass CreateProductRequest(BaseModel):\n    name: str = Field(..., description=\"Название товара\")\n    article: str = Field(..., description=\"Уникальный артикул товара\")\n    brand: str = Field(..., description=\"Бренд товара\")\n    category: Category = Field(..., description=\"Категория товара\")\n    key_word: str = Field(..., description=\"Ключевое слово\")\n    general_repurchases: int = Field(..., description=\"Общий план по выкупам\")\n    daily_repurchases: int = Field(..., description=\"План по выкупам на день\")\n    price: float = Field(..., gt=0, description=\"Цена товара\")\n    wb_price: float = Field(..., description=\"Цена товара на вб\")\n    tg: str = Field(..., description=\"Телеграм для связи с продавцом\")\n    payment_time: PayoutTime = Field(..., description=\"Время выплаты\")\n    review_requirements: str = Field(..., description=\"Требования к отзыву\")\n    image_path: Optional[str] = Field(None, description=\"Путь к изображению товара\")\n\n\nclass UpdateProductRequest(BaseModel):\n    name: Optional[str] = Field(None, description=\"Название товара\")\n    article: Optional[str] = Field(None, description=\"Уникальный артикул товара\")\n    brand: Optional[str] = Field(None, description=\"Бренд товара\")\n    category: Category = Field(..., description=\"Категория товара\")\n    key_word: Optional[str] = Field(None, description=\"Ключевое слово\")\n    general_repurchases: Optional[int] = Field(None, description=\"Общий план по выкупам\")\n    daily_repurchases: Optional[int] = Field(None, description=\"План по выкупам на день\")\n    price: Optional[float] = Field(None, gt=0, description=\"Цена товара\")\n    wb_price: Optional[float] = Field(None, description=\"Цена товара на вб\")\n    tg: Optional[str] = Field(None, description=\"Телеграм для связи с продавцом\")\n    payment_time: Optional[PayoutTime] = Field(None, description=\"Время выплаты\")\n    review_requirements: Optional[str] = Field(None, description=\"Требования к отзыву\")\n    image_path: Optional[str] = Field(None, description=\"Путь к изображению товара\")\n"
  },
  {
    "path": "backend/routes/requests/push.py",
    "content": "from typing import Optional\n\nfrom fastapi import UploadFile\nfrom pydantic import BaseModel\n\n\nclass CreatePushRequest(BaseModel):\n    title: str\n    text: str\n    image: Optional[UploadFile] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n\n\nclass UpdatePushRequest(BaseModel):\n    title: Optional[str] = None\n    text: Optional[str] = None\n    image: Optional[UploadFile] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n"
  },
  {
    "path": "backend/services/user.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom abstractions.repositories import ProductRepositoryInterface\nfrom abstractions.repositories.user import UserRepositoryInterface\nfrom abstractions.services import UserServiceInterface\nfrom abstractions.services.notification import NotificationServiceInterface\nfrom domain.dto import CreateUserDTO, UpdateUserDTO, UpdateProductDTO\nfrom domain.models import User\nfrom infrastructure.enums.product_status import ProductStatus\nfrom infrastructure.enums.user_role import UserRole\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass UserService(UserServiceInterface):\n    user_repository: UserRepositoryInterface\n    notification_service: NotificationServiceInterface\n    product_repository: ProductRepositoryInterface\n\n    bot_username: str\n\n    async def create_user(self, dto: CreateUserDTO) -> None:\n        return await self.user_repository.create(dto)\n\n    async def get_user(self, user_id: UUID) -> User:\n        return await self.user_repository.get(user_id)\n\n    async def update_user(self, user_id: UUID, dto: UpdateUserDTO) -> None:\n        await self.user_repository.update(user_id, dto)\n\n    async def delete_user(self, user_id: UUID) -> None:\n        await self.user_repository.delete(user_id)\n\n    async def get_users(self, limit: int = 100, offset: int = 0) -> List[User]:\n        return await self.user_repository.get_all(limit=limit, offset=offset)\n\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\n        return await self.user_repository.ensure_user(dto)\n\n    async def get_user_products(self, user_id: UUID):\n        return await self.user_repository.get_user_products(user_id)\n\n    async def ban(self, user_id: UUID):\n        dto = UpdateUserDTO(\n            is_banned=True,\n        )\n        await self.user_repository.update(\n            obj_id=user_id,\n            obj=dto,\n        )\n\n    async def unban(self, user_id: UUID):\n        dto = UpdateUserDTO(\n            is_banned=False,\n        )\n        await self.user_repository.update(\n            obj_id=user_id,\n            obj=dto,\n        )\n\n    async def promote_user(self, user_id: UUID):\n        dto = UpdateUserDTO(\n            role=UserRole.MODERATOR,\n        )\n        await self.user_repository.update(\n            obj_id=user_id,\n            obj=dto,\n        )\n\n    async def demote_user(self, user_id: UUID) -> None:\n        dto = UpdateUserDTO(\n            role=UserRole.USER,\n        )\n        await self.user_repository.update(\n            obj_id=user_id,\n            obj=dto,\n        )\n\n    async def get_banned(self) -> list[User]:\n        return await self.user_repository.get_banned()\n\n    async def get_sellers(self) -> list[User]:\n        return await self.user_repository.get_sellers()\n\n    async def get_clients(self) -> list[User]:\n        return await self.user_repository.get_clients()\n\n    async def get_moderators(self) -> list[User]:\n        return await self.user_repository.get_moderators()\n\n    async def increase_balance(self, user_id: UUID, balance_sum: int):\n        user = await self.user_repository.get(user_id)\n        update_dto = UpdateUserDTO(\n            balance=user.balance + balance_sum,\n        )\n        res = await self.user_repository.update(user_id, update_dto)\n        try:\n            await self.notification_service.send_balance_increased(\n                user_id=user_id,\n                amount=balance_sum,\n            )\n        except Exception:\n            logger.error(\"Error while sending push notification\", exc_info=True)\n\n        products = await self.product_repository.get_by_seller(user_id)\n        necessary_balance = sum(product.remaining_products for product in products if product.status==ProductStatus.ACTIVE\n                                or product.status==ProductStatus.NOT_PAID)\n        if user.balance + balance_sum >= necessary_balance:\n            for product in products:\n                if product.status == ProductStatus.NOT_PAID:\n                    update_product_dto = UpdateProductDTO(\n                        status=ProductStatus.ACTIVE,\n                    )\n                    await self.product_repository.update(product.id, update_product_dto)\n        else:\n            active_products_sum = sum(product.remaining_products for product in products if product.status == ProductStatus.ACTIVE)\n            not_paid_products = [product for product in products if product.status == ProductStatus.NOT_PAID]\n            for product in not_paid_products:\n                if user.balance + balance_sum >= active_products_sum + product.remaining_products:\n                    update_product_dto = UpdateProductDTO(\n                        status=ProductStatus.ACTIVE,\n                    )\n                    await self.product_repository.update(product.id, update_product_dto)\n\n\n\n\n\n        return res\n\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\n        await self.user_repository.increase_referrer_bonus(user_id, bonus)\n\n    async def use_discount(self, user_id: UUID) -> None:\n        update_dto = UpdateUserDTO(\n            has_discount=False,\n        )\n\n        await self.user_repository.update(user_id, update_dto)\n\n    async def get_invite_link(self, user_id: UUID) -> str:\n        return f'https://t.me/{self.bot_username}?start={user_id}'\n"
  },
  {
    "path": "backend/services/upload.py",
    "content": "import logging\nimport os\nfrom dataclasses import dataclass, field\nfrom typing import Annotated\nfrom uuid import uuid4\n\nimport aiofiles\nfrom fastapi import UploadFile\n\nfrom abstractions.services.upload import UploadServiceInterface\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass UploadService(UploadServiceInterface):\n    images_dir: str = field(default=\"/app/upload\")\n\n    async def initialize(self) -> None:\n        os.makedirs(self.images_dir, exist_ok=True)\n\n    async def upload(self, file: UploadFile) -> str:\n        new_filename, new_filepath = self._get_new_file_path(file.filename)\n        try:\n            async with aiofiles.open(new_filepath, \"wb\") as f:\n                content = await file.read()\n                await f.write(content)\n            return new_filename\n        except Exception:\n            logger.error(\"There was an error while uploading file\", exc_info=True)\n            raise\n\n    def get_file_path(self, filename: str) -> str:\n        return os.path.join(self.images_dir, filename)\n\n    def _get_new_file_path(\n            self,\n            filename: str,\n    ) -> tuple[\n        Annotated[str, 'filename'],\n        Annotated[str, 'file path'],\n    ]:\n        new_filename = f\"{uuid4()}.{filename.split('.')[-1]}\"\n        return new_filename, self.get_file_path(new_filename)\n"
  },
  {
    "path": "backend/services/permission.py",
    "content": "from dataclasses import dataclass\nfrom uuid import UUID\n\nfrom abstractions.services import UserServiceInterface\nfrom abstractions.services.permissions import PermissionServiceInterface\nfrom infrastructure.enums.user_role import UserRole\nfrom services.exceptions import PermissionException\n\n\n@dataclass\nclass PermissionService(PermissionServiceInterface):\n    user_service: UserServiceInterface\n\n    async def is_moderator(self, user_id: UUID) -> None:\n        user = await self.user_service.get_user(user_id)\n        is_moderator = user.role == UserRole.MODERATOR or user.role == UserRole.ADMIN\n\n        if not is_moderator:\n            raise PermissionException(\"Only moderators can do this\")\n\n    async def is_admin(self, user_id: UUID) -> None:\n        user = await self.user_service.get_user(user_id)\n        is_moderator = user.role == UserRole.ADMIN\n\n        if not is_moderator:\n            raise PermissionException(\"Only admins can do this\")\n"
  },
  {
    "path": "backend/services/order.py",
    "content": "from dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom abstractions.repositories import OrderRepositoryInterface, ProductRepositoryInterface, UserRepositoryInterface\nfrom abstractions.services import OrderServiceInterface\nfrom abstractions.services.notification import NotificationServiceInterface\nfrom domain.dto import UpdateOrderDTO, CreateOrderDTO, UpdateUserDTO, UpdateProductDTO\nfrom domain.models import Order\nfrom domain.responses.order_report import OrderReport\nfrom infrastructure.enums.order_status import OrderStatus\nfrom infrastructure.enums.product_status import ProductStatus\nfrom infrastructure.enums.user_role import UserRole\n\n\n@dataclass\nclass OrderService(OrderServiceInterface):\n    order_repository: OrderRepositoryInterface\n    product_repository: ProductRepositoryInterface\n    notification_service: NotificationServiceInterface\n    user_repository: UserRepositoryInterface\n\n    async def create_order(self, dto: CreateOrderDTO) -> UUID:\n        await self.order_repository.create(dto)\n        order = await self.order_repository.get(dto.id)\n        return order.id\n\n    async def get_order(self, order_id: UUID) -> Order:\n        return await self.order_repository.get(order_id)\n\n    async def update_order(self, order_id: UUID, dto: UpdateOrderDTO) -> None:\n        await self.order_repository.update(order_id, dto)\n        order = await self.order_repository.get(order_id)\n        product = await self.product_repository.get(order.product_id)\n        seller = await self.user_repository.get(product.seller_id)\n        if dto.step == 5:\n            if seller.role == UserRole.CLIENT or seller.role == UserRole.USER:\n                seller_dto = UpdateUserDTO(\n                    role=UserRole.SELLER,\n                    balance=seller.balance - 1\n                )\n            else:\n                seller_dto = UpdateUserDTO(\n                    balance=seller.balance - 1\n                )\n            await self.user_repository.update(seller.id, seller_dto)\n\n            product = await self.product_repository.get(product.id)\n            remaining_products = product.remaining_products - 1\n            if remaining_products == 0:\n                product_dto = UpdateProductDTO(\n                    remaining_products=product.remaining_products - 1,\n                    status=ProductStatus.ARCHIVED\n                )\n            else:\n                product_dto = UpdateProductDTO(\n                    remaining_products=product.remaining_products - 1,\n                )\n\n            await self.product_repository.update(product.id, product_dto)\n        if dto.status == OrderStatus.CASHBACK_PAID:\n            await self.notification_service.send_cashback_paid(order_id)\n\n            order = await self.order_repository.get(order_id)\n            user_dto = UpdateUserDTO(\n                role=UserRole.CLIENT,\n            )\n            await self.user_repository.update(order.user_id, user_dto)\n\n    async def delete_order(self, order_id: UUID) -> None:\n        await self.order_repository.delete(order_id)\n\n    async def get_orders(self, limit: int = 100, offset: int = 0) -> List[Order]:\n        return await self.order_repository.get_all(limit=limit, offset=offset)\n\n    async def get_orders_by_user(self, user_id: UUID) -> List[Order]:\n        return await self.order_repository.get_orders_by_user(user_id=user_id)\n\n    async def get_user_report(self, order_id: UUID) -> OrderReport:\n        order = await self.order_repository.get(order_id)\n        product = await self.product_repository.get(order.product_id)\n        order_dict = order.model_dump()\n        order_dict['article'] = product.article\n        order_dict['cashback'] = product.wb_price - product.price\n        order_report = OrderReport.model_validate(order_dict)\n        return order_report\n\n    async def get_orders_by_seller(self, seller_id: UUID) -> list[Order]:\n        orders = await self.order_repository.get_orders_by_seller(seller_id)\n        return orders\n"
  },
  {
    "path": "backend/services/__init__.py",
    "content": ""
  },
  {
    "path": "backend/services/review.py",
    "content": "from dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom abstractions.repositories import ReviewRepositoryInterface\nfrom abstractions.services import ReviewServiceInterface\nfrom domain.dto import CreateReviewDTO, UpdateReviewDTO\nfrom domain.models import Review\n\n\n@dataclass\nclass ReviewService(ReviewServiceInterface):\n    review_repository: ReviewRepositoryInterface\n\n    async def create_review(self, dto: CreateReviewDTO) -> None:\n        return await self.review_repository.create(dto)\n\n    async def get_review(self, review_id: UUID) -> Review:\n        return await self.review_repository.get(review_id)\n\n    async def update_review(self, review_id: UUID, dto: UpdateReviewDTO) -> None:\n        await self.review_repository.update(review_id, dto)\n\n    async def delete_review(self, review_id: UUID) -> None:\n        await self.review_repository.delete(review_id)\n\n    async def get_reviews(self, limit: int = 100, offset: int = 0) -> List[Review]:\n        return await self.review_repository.get_all(limit=limit, offset=offset)\n\n    async def list_reviews_by_product(self, product_id: UUID) -> List[Review]:\n        return await self.review_repository.get_reviews_by_product(product_id=product_id)\n\n\n"
  },
  {
    "path": "backend/services/moderator.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom uuid import UUID\n\nfrom abstractions.repositories import ProductRepositoryInterface\nfrom abstractions.repositories.moderator_review import ModeratorReviewRepositoryInterface\nfrom abstractions.services import UserServiceInterface\nfrom abstractions.services.moderator import ModeratorServiceInterface\nfrom abstractions.services.notification import NotificationServiceInterface\nfrom domain.dto import UpdateProductDTO, CreatePushDTO, UpdatePushDTO\nfrom domain.dto.moderator_review import CreateModeratorReviewDTO\nfrom domain.models import Product, User, Push\nfrom infrastructure.enums.product_status import ProductStatus\nfrom routes.requests.moderator import UpdateProductStatusRequest\n\nlogger = logging.getLogger(__name__)\n@dataclass\nclass ModeratorService(ModeratorServiceInterface):\n    products_repository: ProductRepositoryInterface\n    user_service: UserServiceInterface\n    moderator_review_repository: ModeratorReviewRepositoryInterface\n    notification_service: NotificationServiceInterface\n\n    async def get_products(self) -> list[Product]:\n        return await self.products_repository.get_all()\n\n    async def get_product(self, product_id: UUID) -> Product:\n        return await self.products_repository.get(product_id)\n\n    async def get_products_to_review(self) -> list[Product]:\n        return await self.products_repository.get_products_to_review()\n\n    async def review_product(\n            self,\n            product_id: UUID,\n            moderator_id: UUID,\n            request: UpdateProductStatusRequest,\n    ):\n        product = await self.products_repository.get(product_id)\n\n        if request.status == ProductStatus.ACTIVE:\n            product = await self.products_repository.get(product_id)\n            logger.info(f\"Reviewing product {product}\")\n            seller = await self.user_service.get_user(product.seller_id)\n            seller_products = await self.products_repository.get_by_seller(product.seller_id)\n            required_balance = sum(product.general_repurchases for product in seller_products)\n            logger.info(f\"required_balance {required_balance}\")\n            logger.info(f\"seller.balance {seller.balance}\")\n            if required_balance > seller.balance:\n                status = ProductStatus.NOT_PAID\n            else:\n                status = request.status\n        else:\n            status = request.status\n        product_dto = UpdateProductDTO(\n            status=status,\n        )\n        logger.info(request)\n        review_dto = CreateModeratorReviewDTO(\n            moderator_id=moderator_id,\n            product_id=product_id,\n            comment_to_seller=request.comment_to_seller,\n            comment_to_moderator=request.comment_to_moderator,\n            status_before=product.status,\n            status_after=status,\n        )\n        await self.moderator_review_repository.create(review_dto)\n        await self.products_repository.update(\n            obj_id=product_id,\n            obj=product_dto,\n        )\n\n    async def get_users(self) -> list[User]:\n        return await self.user_service.get_users()\n\n    async def get_user(self, user_id: UUID) -> User:\n         return await self.user_service.get_user(user_id)\n\n    async def get_moderators(self) -> list[User]:\n        return await self.user_service.get_moderators()\n\n    async def get_sellers(self) -> list[User]:\n        return await self.user_service.get_sellers()\n\n    async def get_clients(self) -> list[User]:\n        return await self.user_service.get_clients()\n\n    async def get_banned(self) -> list[User]:\n        return await self.user_service.get_banned()\n\n    async def ban_user(self, user_id: UUID):\n        await self.user_service.ban(user_id)\n\n    async def unban_user(self, user_id: UUID):\n        await self.user_service.unban(user_id)\n\n    async def promote_user(self, user_id: UUID):\n        await self.user_service.promote_user(user_id)\n\n    async def demote_user(self, user_id: UUID):\n        await self.user_service.demote_user(user_id)\n\n    async def create_push(self, push: CreatePushDTO) -> None:\n        await self.notification_service.create_push(push)\n\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\n        await self.notification_service.activate_push(push_id, user_ids)\n\n    async def get_pushes(self) -> list[Push]:\n        return await self.notification_service.get_pushes()\n\n    async def get_push(self, push_id: UUID) -> Push:\n        return await self.notification_service.get_push(push_id)\n\n    async def update_push(self, push_id: UUID, update_dto: UpdatePushDTO) -> None:\n        return await self.notification_service.update_push(push_id, update_dto)\n\n    async def delete_push(self, push_id: UUID) -> None:\n        return await self.notification_service.delete_push(push_id)\n\n    async def use_discount(self, user_id: UUID) -> None:\n        await self.user_service.use_discount(user_id)\n\n    async def increase_referrer_bonus(self, user_id: UUID, bonus: int) -> None:\n        await self.user_service.increase_referrer_bonus(user_id, bonus)\n"
  },
  {
    "path": "backend/services/exceptions.py",
    "content": "class PermissionException(Exception):\n    ...\n\nclass BannedUserException(Exception):\n    ..."
  },
  {
    "path": "backend/services/notifications.py",
    "content": "from dataclasses import dataclass\nfrom uuid import UUID\n\nfrom httpx import AsyncClient\n\nfrom abstractions.repositories import OrderRepositoryInterface, UserRepositoryInterface\nfrom abstractions.repositories.push import PushRepositoryInterface\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom abstractions.services.notification import NotificationServiceInterface\nfrom domain.dto import CreatePushDTO, CreateUserPushDTO, UpdatePushDTO\nfrom domain.models import Push\n\n\n@dataclass\nclass NotificationService(NotificationServiceInterface):\n    token: str\n    orders_repository: OrderRepositoryInterface\n    users_repository: UserRepositoryInterface\n    push_repository: PushRepositoryInterface\n    user_push_repository: UserPushRepositoryInterface\n\n    async def send_cashback_paid(self, order_id: UUID) -> None:\n        order = await self.orders_repository.get(order_id)\n        user = await self.users_repository.get(order.user_id)\n        async with AsyncClient() as client:\n            await client.post(\n                url=f'https://api.telegram.org/bot{self.token}/sendMessage',\n                params={\n                    'chat_id': user.telegram_id,\n                    'text': 'Ваш кешбек выплачен!',\n                }\n            )\n\n    async def send_balance_increased(self, user_id: UUID, amount: int) -> None:\n        user = await self.users_repository.get(user_id)\n        async with AsyncClient() as client:\n            await client.post(\n                url=f'https://api.telegram.org/bot{self.token}/sendMessage',\n                params={\n                    'chat_id': user.telegram_id,\n                    'text': f'Ваш баланс полонен на {amount} раздач',\n                }\n            )\n\n    async def create_push(self, push: CreatePushDTO) -> None:\n        await self.push_repository.create(push)\n\n    async def activate_push(self, push_id: UUID, user_ids: list[UUID]) -> None:\n        dtos = [CreateUserPushDTO(push_id=push_id, user_id=user_id) for user_id in user_ids]\n        await self.user_push_repository.create_many(dtos)\n\n    async def get_push(self, push_id: UUID) -> Push:\n        return await self.push_repository.get(push_id)\n\n    async def get_pushes(self) -> list[Push]:\n        return await self.push_repository.get_all()\n\n    async def update_push(self, push_id: UUID, push: UpdatePushDTO) -> None:\n        return await self.push_repository.update(push_id, push)\n\n    async def delete_push(self, push_id: UUID) -> None:\n        return await self.push_repository.delete(push_id)\n"
  },
  {
    "path": "backend/services/product.py",
    "content": "from dataclasses import dataclass\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom abstractions.repositories import ProductRepositoryInterface, UserRepositoryInterface\nfrom abstractions.services import ProductServiceInterface\nfrom domain.dto import CreateProductDTO, UpdateProductDTO, UpdateUserDTO\nfrom domain.models import Product\nfrom settings import settings\n\nfrom backend.abstractions.repositories.push import PushRepositoryInterface\nfrom backend.abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom backend.domain.dto import CreatePushDTO, CreateUserPushDTO\nfrom backend.infrastructure.enums.product_status import ProductStatus\n\n\n@dataclass\nclass ProductService(ProductServiceInterface):\n    product_repository: ProductRepositoryInterface\n    user_repository: UserRepositoryInterface\n    push_repository: PushRepositoryInterface\n    user_push_repository: UserPushRepositoryInterface\n\n    async def create_product(self, dto: CreateProductDTO) -> UUID:\n        await self.product_repository.create(dto)\n        update_user = UpdateUserDTO(\n            is_seller=True,\n        )\n        await self.user_repository.update(\n            obj_id=dto.seller_id,\n            obj=update_user\n        )\n\n        if dto.status == ProductStatus.ACTIVE:\n            push = CreatePushDTO(\n                title=\"🛒 Новый товар в каталоге!\",\n                text=f\"{dto.name}\\nЦена: {dto.price} ₽\",\n                image_path=dto.image_path,\n            )\n            await self.push_repository.create(push)\n            push = await self.push_repository.get(push.id)\n            user_push = CreateUserPushDTO(\n                user_id=settings.bot.channel_id,\n                push_id=push.id,\n            )\n            await self.user_push_repository.create(user_push)\n\n        return dto.id\n\n    async def get_product(self, product_id: UUID) -> Product:\n        return await self.product_repository.get(product_id)\n\n    async def update_product(self, product_id: UUID, dto: UpdateProductDTO) -> None:\n\n        if dto.status == ProductStatus.ACTIVE:\n            push = CreatePushDTO(\n                title=\"🛒 Новый товар в каталоге!\",\n                text=f\"{dto.name}\\nЦена: {dto.price} ₽\",\n                image_path=dto.image_path,\n            )\n            await self.push_repository.create(push)\n            push = await self.push_repository.get(push.id)\n            user_push = CreateUserPushDTO(\n                user_id=settings.bot.channel_id,\n                push_id=push.id,\n            )\n            await self.user_push_repository.create(user_push)\n        await self.product_repository.update(product_id, dto)\n\n    async def delete_product(self, product_id: UUID) -> None:\n        await self.product_repository.delete(product_id)\n\n    async def get_products(self, limit: int = 100, offset: int = 0) -> List[Product]:\n        return await self.product_repository.get_all(limit=limit, offset=offset)\n\n    async def get_by_article(self, article: str) -> Product:\n        return await self.product_repository.get_by_article(article)\n\n    async def get_by_seller(self, seller_id: UUID) -> Optional[list[Product]]:\n        return await self.product_repository.get_by_seller(seller_id)\n\n    async def get_active_products(self, limit: int = 100, offset: int = 0, search: Optional[str] = None) -> List[Product]:\n        return await self.product_repository.get_active_products(limit=limit, offset=offset, search=search)\n"
  },
  {
    "path": "backend/services/auth/service.py",
    "content": "import hashlib\nimport hmac\nimport logging\nimport time\nimport json\nfrom typing import Optional\nfrom urllib.parse import parse_qs\nfrom dataclasses import dataclass\nfrom uuid import UUID\n\nfrom abstractions.services import UserServiceInterface\nfrom abstractions.services.auth.service import AuthServiceInterface\nfrom abstractions.services.auth.tokens import TokenServiceInterface\nfrom domain.dto import CreateUserDTO\nfrom domain.responses.auth import AuthTokens\nfrom infrastructure.repositories.exceptions import NotFoundException\nfrom services.auth.exceptions import ExpiredDataException, InvalidTokenException\nfrom services.exceptions import BannedUserException\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass AuthService(AuthServiceInterface):\n    bot_token: str\n    token_service: TokenServiceInterface\n    user_service: UserServiceInterface\n\n    async def get_user_id_from_jwt(self, token: str) -> UUID:\n        try:\n            if token == 'abc':\n                return UUID('9cfed29e-9b5e-444f-8746-e1355ddd95b1')\n\n            payload = self.token_service.get_token_payload(token=token)\n            user_id: str | None = payload.get('sub', None)\n            if not user_id:\n                raise InvalidTokenException()\n\n            user = await self.user_service.get_user(UUID(user_id))  # todo: pk type\n\n            if user.is_banned:\n                raise BannedUserException\n\n            return user.id\n        except (InvalidTokenException, NotFoundException):\n            raise\n\n    async def create_token(self, init_data: str, ref_user_id: Optional[UUID] = None) -> AuthTokens:\n        \"\"\"Verifies Telegram Mini App auth data properly.\"\"\"\n        # Parse initData properly (decode URL params)\n        data_dict = {k: v[0] for k, v in parse_qs(init_data).items()}\n\n        # Extract hash separately\n        received_hash = data_dict.pop(\"hash\", None)\n        if not received_hash:\n            raise InvalidTokenException(\"Missing hash in init data\")\n\n        # Check expiration\n        auth_date = int(data_dict.get(\"auth_date\", \"0\"))\n        if time.time() - auth_date > 86400:  # Expire after 1 day\n            raise ExpiredDataException()\n\n        # Step 1: Sort the key-value pairs in alphabetical order\n        sorted_data_string = \"\\n\".join(f\"{k}={v}\" for k, v in sorted(data_dict.items()))\n\n        # Step 2: Create HMAC-SHA256 signature of the bot token using 'WebAppData' as key\n        secret_key = hmac.new(b\"WebAppData\", self.bot_token.encode(), hashlib.sha256).digest()\n\n        # Step 3: Create final HMAC-SHA256 signature using the previous step result as the key\n        computed_hash = hmac.new(secret_key, sorted_data_string.encode(), hashlib.sha256).hexdigest()\n\n        logger.info(f\"Computed Hash: {computed_hash}, Received Hash: {received_hash}, InitData: {init_data}\")\n\n        # Step 4: Validate hash\n        if computed_hash != received_hash:\n            raise InvalidTokenException(\"Invalid init data hash\")\n\n        # Extract Telegram User ID\n        user_data = json.loads(data_dict.get(\"user\", \"{}\"))\n        telegram_user_id = int(user_data.get(\"id\", 0))\n        username = user_data.get(\"username\", None)\n\n        # Ensure user exists\n        user_dto = CreateUserDTO(telegram_id=telegram_user_id, nickname=username, invited_by=ref_user_id)\n        user = await self.user_service.ensure_user(user_dto)\n\n        # Generate access & refresh tokens\n        return self.token_service.create_auth_token(user_id=str(user.id))\n\n    async def refresh_token(self, refresh_token: str) -> AuthTokens:\n        try:\n            old_claims = self.token_service.get_token_payload(refresh_token)\n            user_id = old_claims['sub']\n            await self.user_service.get_user(user_id)\n\n            return self.token_service.create_auth_token(user_id)\n        except (InvalidTokenException, NotFoundException):\n            raise\n"
  },
  {
    "path": "backend/services/auth/__init__.py",
    "content": ""
  },
  {
    "path": "backend/services/auth/tokens.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom datetime import datetime, timedelta, UTC\n\nfrom jwt import (\n    decode, encode,\n    ExpiredSignatureError as ExpiredSignatureJWTError,\n    InvalidTokenError as InvalidTokenJWTError\n)\n\nfrom abstractions.services.auth.tokens import TokenServiceInterface\nfrom domain.responses.auth import AuthTokens\nfrom services.auth.exceptions import InvalidTokenException, ExpiredTokenException\nfrom settings import JwtSettings\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass TokenService(TokenServiceInterface):\n    jwt_settings: JwtSettings\n\n    def create_auth_token(self, user_id: str) -> AuthTokens:\n        access_claims = {\n            'sub': user_id,\n            'exp': datetime.now(tz=UTC) + timedelta(seconds=self.jwt_settings.access_expire),\n        }\n\n        refresh_claims = {\n            'sub': user_id,\n            'exp': datetime.now(tz=UTC) + timedelta(seconds=self.jwt_settings.refresh_expire),\n        }\n\n        return AuthTokens(\n            access_token=self._create_token(**access_claims),\n            refresh_token=self._create_token(**refresh_claims),\n        )\n\n    def _create_token(self, **claims) -> str:\n        if 'iss' not in claims:\n            claims[\"iss\"] = self.jwt_settings.issuer\n\n        if 'aud' not in claims:\n            claims[\"aud\"] = self.jwt_settings.audience\n\n        token = encode(\n            payload=claims,\n            key=self.jwt_settings.secret_key.get_secret_value(),\n            algorithm=\"HS256\"\n        )\n\n        return token\n\n    def get_token_payload(self, token: str) -> dict:\n        try:\n            claims = decode(\n                token,\n                self.jwt_settings.secret_key.get_secret_value(),\n                algorithms=[\"HS256\"],\n                issuer=self.jwt_settings.issuer,\n                audience=self.jwt_settings.audience,\n                options={\n                    \"verify_exp\": True\n                },\n            )\n\n            return claims\n        except ExpiredSignatureJWTError as ex:\n            logger.error(\"Token has expired: %s\", token)\n            raise ExpiredTokenException from ex\n        except InvalidTokenJWTError as ex:\n            logger.error(\"Invalid token: %s. Error: %s\", token, ex)\n            raise InvalidTokenException from ex\n"
  },
  {
    "path": "backend/services/auth/exceptions.py",
    "content": "class ExpiredDataException(Exception):\n    ...\n\n\nclass InvalidTokenException(Exception):\n    ...\n\n\nclass ExpiredTokenException(Exception):\n    ...\n"
  },
  {
    "path": "nginx/compose.yaml",
    "content": "services:\n  nginx:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./certs:/etc/nginx/certs\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n    restart: always\n"
  },
  {
    "path": "nginx/nginx.conf",
    "content": "events {\n    worker_connections 1024;\n}\n\nhttp {\n    resolver 127.0.0.11;\n\n    server {\n        listen 80;\n        server_name cashbackwb.ru;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name cashbackwb.ru;\n\n        ssl_certificate /etc/nginx/certs/cashbackwbru.crt;\n        ssl_certificate_key /etc/nginx/certs/cashbackwbru.key;\n\n        location / {\n            resolver 127.0.0.11 valid=30s;\n            set $frontend_upstream http://frontend:80;\n            proxy_pass $frontend_upstream;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        location /api {\n            client_max_body_size 50M;\n            resolver 127.0.0.11 valid=30s;\n            set $backend_upstream http://backend:8080;\n            proxy_pass $backend_upstream;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n"
  },
  {
    "path": "nginx/certs/cashbackwbru.key",
    "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIJKgIBAAKCAgEAwSNvVe7OmTgFVV5DIm4L7uq8TaXG7/DlLDcw0ZaxWdoouJbl\nYK9TXklR9FzVr5/HdrNxDt12/vdCoajsu3Dbj2q0NVY9tN651Mof/zPSr9mmBJA8\nrO7h4AsKONtZ/4UyHAbTfq9Izouw+kvZupVeDzkUzICzH6AByOUUG+T5c2AwCcuq\nKRc4dBiMxsOU4U2X0YfoL0K+xSNXAtxKOPa/EtHelh/JCNNeDIkSXYer59XQvtSf\ntpniFCGvFQOKv89u78lNJ3qmFpK9bbugn4LI6vFhJmFg+OFwb58NCRnnHuk1Yp7B\nav4TZcIjcEHsP/6WQzuZ9fQgqKXEMxIhlA4ZCQrTJsXm64rPEGW5Br5kz+Y7cePc\ncNENOWVLp065A2d9FCJShpY2d37wXrmhKYoQtC2Nk7UXtRqoGs4xblp/X7TOlRjs\nv43D5vhPLfOUUr3Ziza7eitlhZVgmhj/RKJtFQHyfpKq8C2tnVJiXNEtNPplep73\nKqCuFOQGmSeJ02FrlrptlW08d1oT0C/jWt+GIJxDKos2fsY9/6PhbjQmRCHOFL5/\nLRt/h5lY2AlNUNaO8HIRQlVaHsqAFU/ty2gKZRFjkn5fd35UJvneXOzx2XBxn1q5\nqOE0gxrr3NdvC3KWMZV98bSKC6nxWItGznoGtww545YlHB1KwNcrtqNqNPUCAwEA\nAQKCAgEAuHKa1TpnW7RAg7Kt8qeeBeFvS8hSILuyYXOjz8VWQjUyRnb1QEywFY94\nESLHgB3bY+Uix8uA5SZGIBUvYCL7zA9fYsCl1aIPXsRZomNfhkkZX6pQB+drF4fz\njzEM1hXiMRnjyUyk/3ww3BisKqCTX35n+pW+eylYCv+bILif8iueNPyn2O4wH8+C\nQiBugmyT3KsqdlgL0EFby4ON7rDW8aY0KLLaTu9tFhOh0mjLJ3DvFhABJ2X2nrs8\ndZkYXO5BSAa7BEUBcPVaqv1Q/ITuVFGJMho1ffnuYutGi7aNHtwg+7oZhZB3/epV\n5dNPSB5ean71HgqzVdxZb1yVbMu541wFfpVzLIcIiWtBBwwqfsTqIe77y8RmGC4z\nsnHIfxIi8lVNlK6s45jSysCcdG3eyK0USdavhZZiSmbyNikHqmwlkMqjUnSKaJ2m\nzzqP9S6TzcgN4HW1/tWvrVqmtse+nPiq2EPSyZX5t7a8sW8GMkE+rOWVwqkllTuK\nUuSKo2R2auZxku8fNcjYkt1YO5l3Q/672hCJmOj0dQBqe0bMIk6R4AFbLd8t1mk8\ni3jov1KhRu8S9N3QlU+TbPQ5f/NZwjaGnTBo6AwzZoet6mBGR1oy81dhK+aXURBU\nLzUuW83xlQSVnMUl5EhpAxgHIhuO56tHchhnqCt2/RW2/VG8h1ECggEBAOKSA3mc\nWotz5hkwIs0nSSY54wkde2SA3y6Btdrtw6Opa48b8+C/p1IfcZzIV5q/NI7GjWoU\nGf19OrB19fhsArzZpTVnXRNBIF4HL31qHUeimNY8tA3hVhQUmiUgAyc0Rp/6x35d\nh3GBtgEg0VkRhg+/rsrGTGNacsWkkwW8wxwLfr85KEcNTA5BPLG9TDxPXiFUqsP0\nmYaejmTacIfIBsFBD413I87hm08T3bu8TKE/f+mbYcPBq1QQsQWW/cScFkfUq9j5\nCazcpBFxbW9CDQLnIsu+ZOLEXJjVO6Qxw0iW2JtHdEhfHpDsV+eN7bEeZY1IRHl3\ngxd/4gC5tsLw4+8CggEBANo5u2kDkW4hwLTG2zeR3xoFOkODtFKsiDQW+/uT8g5T\njNvKb3Mt7qHWGRfowFqI86cZ6eUDp2SqVyt5FtvHAj9wGTtpYvhOh88c9gey8D6Z\nhSbXL7odCze+ez1EYIY+VVCC4LDQszkwP6otG/hpjmSuJdy4bx7P/+UncRaalxr6\nCV4OSIfNJZoyw3BcLOX81f2bdsc532ngqmAHjGawbsa1PcmJB4GceguYSO2G1sbB\nv0sVLyW0lD/V6ErFUiRySx8OpgY3OckskSVNh8lFjU4q5kYGn4ByDLmH1UWCF5Ic\n6oQCr4ItvAFjllaOBRyKZKl4N7HqaLqJFK3BWqkuwVsCggEASDEiLlOlfh21yXzO\n+fN0mVuEfdkJAiMV+emWmmV8Gt/Wx8iuUoR+ueoO91fWohYelweo843oIh8O3j8X\n2sn/rVDkFToULBhqScucVCfFoJesf0bkUC/mj4to+j9TAeDkSAFOI3OFvqMH7SAZ\n1HmC7+2xsiaxHE8rltIzjnZw7LS09BUwQkN4Ympi/ndEnUrkwVYK+1kqufw3fucj\nSAByNo2WeQrnO/oi1HWOB02eVRq4lSTPZ+KDxstyvEc6ILVjXAvlncLsVEoRdQVh\nSzwOjUg8jBLkbmUG5CO9VzoL8UsvRXrlEFJOmPrVn5BXlkILNZM7TkDIYmp7BqQm\nGcNLvQKCAQEA0nC/8Gn3cYvtCKeHONRbn/0QjZDRcLReeFT91EJ8NyKNAFr8FMdj\niv8qnare66+Lv0W3Dxjx8Jpvi0WvLGuCGGjifC+JuEgKoUidXRlKoiNriuQSa1ic\nu7ndoFxy9KHhpc1AHmJzop+LlXEAuxIXtbFWY74bskwEyhe574FOXD5okCIYAZVs\nQIHZhF3vEi46seCcr0x4zOJRil9dHp3fhZG7rsCM04lxDANjuGLCdVLbRO191M+J\n8vE1m/0i1HC/TojSw8W33O80XROh8Q84T/wAqeCzKatR6Aw8N1ZXopht8rWgSFoQ\nJgrCLF+yQC6ZGfALTW/uZIvSvChsZB/pZwKCAQEAkEVbmWndFH8G2Rb3RVhqJ1Ru\nlxYQQxmu4myNbfbJue/AMzpx/+YGxadbHqYeQ0vXAB+Jhkhpyif8rCCoS5eRlVS8\npTJhMDRc2Q0Tqco5bMRhYZJiVtqkYHjfCs0IbvUnL3nGfPtW3I+22F0acd8m9Xcd\nB8Jn5i0wDxoJk1ynN8gXWT8G5tcF0vAJKvSHZ8/tMaOyv139c6pK35mR8DQMrlrc\nUgvtwMjqjzTanhPbFMYkohkGwDRgk6EAtMKrDRiy6wVFDU12+uEr6RTsMUUIcYCa\nlAFrwAI+hEJ5VxHxjrGSZSv/sRXH8igzOeJJVz46u1CutnG1VZfrNKgeXosVcg==\n-----END RSA PRIVATE KEY-----\n"
  },
  {
    "path": "nginx/certs/cashbackwbru.crt",
    "content": "-----BEGIN CERTIFICATE-----\nMIIHmzCCBoOgAwIBAgIMVUmFfnC+ZIHJqfnJMA0GCSqGSIb3DQEBCwUAMFMxCzAJ\nBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMSkwJwYDVQQDEyBH\nbG9iYWxTaWduIEdDQyBSMyBEViBUTFMgQ0EgMjAyMDAeFw0yNDEyMTUxNTA2NDda\nFw0yNTA3MTcxNTA2NDdaMBwxGjAYBgNVBAMTEXd3dy5jYXNoYmFja3diLnJ1MIIC\nIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwSNvVe7OmTgFVV5DIm4L7uq8\nTaXG7/DlLDcw0ZaxWdoouJblYK9TXklR9FzVr5/HdrNxDt12/vdCoajsu3Dbj2q0\nNVY9tN651Mof/zPSr9mmBJA8rO7h4AsKONtZ/4UyHAbTfq9Izouw+kvZupVeDzkU\nzICzH6AByOUUG+T5c2AwCcuqKRc4dBiMxsOU4U2X0YfoL0K+xSNXAtxKOPa/EtHe\nlh/JCNNeDIkSXYer59XQvtSftpniFCGvFQOKv89u78lNJ3qmFpK9bbugn4LI6vFh\nJmFg+OFwb58NCRnnHuk1Yp7Bav4TZcIjcEHsP/6WQzuZ9fQgqKXEMxIhlA4ZCQrT\nJsXm64rPEGW5Br5kz+Y7cePccNENOWVLp065A2d9FCJShpY2d37wXrmhKYoQtC2N\nk7UXtRqoGs4xblp/X7TOlRjsv43D5vhPLfOUUr3Ziza7eitlhZVgmhj/RKJtFQHy\nfpKq8C2tnVJiXNEtNPplep73KqCuFOQGmSeJ02FrlrptlW08d1oT0C/jWt+GIJxD\nKos2fsY9/6PhbjQmRCHOFL5/LRt/h5lY2AlNUNaO8HIRQlVaHsqAFU/ty2gKZRFj\nkn5fd35UJvneXOzx2XBxn1q5qOE0gxrr3NdvC3KWMZV98bSKC6nxWItGznoGtww5\n45YlHB1KwNcrtqNqNPUCAwEAAaOCA6QwggOgMA4GA1UdDwEB/wQEAwIFoDAMBgNV\nHRMBAf8EAjAAMIGTBggrBgEFBQcBAQSBhjCBgzBGBggrBgEFBQcwAoY6aHR0cDov\nL3NlY3VyZS5nbG9iYWxzaWduLmNvbS9jYWNlcnQvZ3NnY2NyM2R2dGxzY2EyMDIw\nLmNydDA5BggrBgEFBQcwAYYtaHR0cDovL29jc3AuZ2xvYmFsc2lnbi5jb20vZ3Nn\nY2NyM2R2dGxzY2EyMDIwMFYGA1UdIARPME0wQQYJKwYBBAGgMgEKMDQwMgYIKwYB\nBQUHAgEWJmh0dHBzOi8vd3d3Lmdsb2JhbHNpZ24uY29tL3JlcG9zaXRvcnkvMAgG\nBmeBDAECATBBBgNVHR8EOjA4MDagNKAyhjBodHRwOi8vY3JsLmdsb2JhbHNpZ24u\nY29tL2dzZ2NjcjNkdnRsc2NhMjAyMC5jcmwwbgYDVR0RBGcwZYIRd3d3LmNhc2hi\nYWNrd2IucnWCGmF1dG9kaXNjb3Zlci5jYXNoYmFja3diLnJ1ghJtYWlsLmNhc2hi\nYWNrd2IucnWCEW93YS5jYXNoYmFja3diLnJ1gg1jYXNoYmFja3diLnJ1MB0GA1Ud\nJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAWgBQNmMBzf6u9vdlH\nS0mtCkoMrD7HfDAdBgNVHQ4EFgQUfKuVVc5yO8csEB2o0beJVtFzE8UwggF+Bgor\nBgEEAdZ5AgQCBIIBbgSCAWoBaAB2AK8YGijWjKPgqYpMnGerCfi7vCK6rryxOKOh\nndP5tgMNAAABk8rbm94AAAQDAEcwRQIgPqVbFbgTUSu9z07HuOEWSjm0RSbY4Jp2\nu4aFPHjL26ACIQCZE7VKD6iPs4YOg3mq8//c8RvFRn+ezUdLC8aOVj2BIQB3ABoE\n/0nQVB1Ar/agw7/x2MRnL07s7iNAaJhrF0Au3Il9AAABk8rbnIYAAAQDAEgwRgIh\nAOiYJcmB27kPLECJpAvakBoHidJB7WMN11QOrrgDlAQeAiEAl/9grfDpQy4ZJnjg\nhlN+gUNjc4nK+WEfIHK8ZgQbx8kAdQAS8U40vVNyTIQGGcOPP3oT+Oe1YoeInG0w\nBYTr5YYmOgAAAZPK25zeAAAEAwBGMEQCIGKrubH2fwAS0OBjoZlHl2cvcQmSttJt\nWBnG4iGrZ8dUAiAvDV5DWrB6LXELPuxVjuy/3tVeVMh7wxdSy1nIzx4x2jANBgkq\nhkiG9w0BAQsFAAOCAQEAF99vfNMM3HAErvEApHzdkjy2B+sP6aUY3Z56ro9PIi52\nCN6aeTls6pYR7qEx3GubOpGIxnbrCqOYDYklo6Pa7WGNe5Kz2un0k0R5jExQx79i\n+kXjxOIB9c/NJNm1+FiQUcyQIYcy4IOvvBJ8ZIb6bujNqcLxCAcORflMgA9qNIUk\nEF9qJuIF7AxecNr+gQ221JxCUK89L79zQQq6+LLLpnsw2yqhO6lsx297y3FYTDsY\nOInn/QlMm0+dQbaa3u5V3Q4xziMz0WLcjLiu+esjdifnHIQ2/Iqi7OxO8dLAdh+3\nfWTQFPdIReEF72JMpfj37X7ig7vTefHNZ8ccPdAxsw==\n-----END CERTIFICATE-----\n"
  },
  {
    "path": ".github/workflows/deploy.yml",
    "content": "name: DEPLOY\n\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\n\njobs:\n  deploy:\n    name: Deploy all\n    runs-on: [\n      \"self-hosted\",\n      \"dev\"\n    ]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Compose up\n        run: |\n          sudo docker compose up --build -d\n\n      - name: Cleanup\n        run: |\n          docker system prune -a -f\n        \n"
  },
  {
    "path": ".github/workflows/reboot-nginx.yml",
    "content": "name: REBOOT NGINX\n\n\non:\n  workflow_dispatch:\n\n\njobs:\n  reboot:\n    name: Reboot nginx docker service\n    runs-on: [\n      \"self-hosted\",\n      \"dev\"\n    ]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Reboot\n        run: |\n          docker compose stop nginx\n          docker compose up --build -d nginx\n"
  },
  {
    "path": "bot/requirements.txt",
    "content": "aiofiles==24.1.0\naiogram==3.18.0\naiohappyeyeballs==2.6.1\naiohttp==3.11.13\naiosignal==1.3.2\nannotated-types==0.7.0\nattrs==25.3.0\ncertifi==2025.1.31\nfrozenlist==1.5.0\nidna==3.10\nmagic-filter==1.0.12\nmultidict==6.1.0\npropcache==0.3.0\npydantic==2.10.6\npydantic_core==2.27.2\npython-dotenv==1.1.0\ntyping_extensions==4.12.2\nyarl==1.18.3\n"
  },
  {
    "path": "bot/Dockerfile",
    "content": "FROM python:3.12\n\nENV ENVIRONMENT=dev\n\nRUN apt-get update\n\nWORKDIR /wb\n\nCOPY requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCOPY . ."
  },
  {
    "path": "bot/main.py",
    "content": "import asyncio\nimport logging\nimport os\n\nfrom aiogram import Bot, Dispatcher, types\nfrom aiogram.filters import CommandStart, CommandObject\nfrom aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo\nfrom aiogram.utils.deep_linking import decode_payload\nfrom dotenv import load_dotenv\n\nload_dotenv(dotenv_path=f'{os.getenv(\"ENVIRONMENT\", \"local\")}.env')\n\nTOKEN = os.getenv('TOKEN')\nWEB_APP_URL = os.getenv('WEB_APP_URL')\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\n# Initialize bot and dispatcher\nbot = Bot(token=TOKEN)\ndp = Dispatcher()\n\nlogger = logging.getLogger(__name__)\n\n@dp.message(CommandStart(deep_link=True))\nasync def handler(message: types.Message, command: CommandObject):\n    arg = command.args\n    web_app_url = WEB_APP_URL\n    if arg:\n        web_app_url += f\"?ref={arg}\"\n\n    instruction_url = f\"{WEB_APP_URL}/instruction\"\n    text = (\n        \"Привет! ❤️\\n\\n\"\n        \"Это удобный бот с простой инструкцией для выгодных покупок с максимальным кэшбэком\\n\\n\"\n        \"<b>КАК ЭТО РАБОТАЕТ?</b>\\n\\n\"\n        \"1️⃣ Выбирай товар из каталога  \\n\"\n        \"2️⃣ Открывай карточку и следуй шагам  \\n\"\n        \"3️⃣ Получай кэшбек и выгодные условия\\n\\n\"\n        \"<b>ПОЧЕМУ МЫ?</b>\\n\\n\"\n        \"😊 15 000+ довольных покупателей  \\n\"\n        \"🏳 Все продавцы проверены вручную  \\n\"\n        \"🫂 Поддержка 24/7 – поможем в любое время  \\n\"\n        \"📝 Реальные отзывы – убедись сам\\n\\n\"\n        f\"✅ <a href=\\\"{instruction_url}\\\">Инструкция здесь</a>\\n\\n\"\n        \"🔥 Все товары в каталоге ждут тебя!\"\n    )\n\n    keyboard = InlineKeyboardMarkup(\n        inline_keyboard=[\n            [InlineKeyboardButton(text=\"Открыть приложение 🛍\", web_app=WebAppInfo(url=web_app_url))]\n        ]\n    )\n\n    await message.answer(\n        text,\n        reply_markup=keyboard,\n        parse_mode=\"HTML\",\n        disable_web_page_preview=True,\n    )\n\n\n@dp.message(CommandStart())\nasync def start(message: types.Message):\n    instruction_url = f\"{WEB_APP_URL}/instruction\"\n    text = (\n        \"Привет! ❤️\\n\\n\"\n        \"Это удобный бот с простой инструкцией для выгодных покупок с максимальным кэшбэком\\n\\n\"\n        \"<b>КАК ЭТО РАБОТАЕТ?</b>\\n\\n\"\n        \"1️⃣ Выбирай товар из каталога  \\n\"\n        \"2️⃣ Открывай карточку и следуй шагам  \\n\"\n        \"3️⃣ Получай кэшбек и выгодные условия\\n\\n\"\n        \"<b>ПОЧЕМУ МЫ?</b>\\n\\n\"\n        \"😊 15 000+ довольных покупателей  \\n\"\n        \"🏳 Все продавцы проверены вручную  \\n\"\n        \"🫂 Поддержка 24/7 – поможем в любое время  \\n\"\n        \"📝 Реальные отзывы – убедись сам\\n\\n\"\n        f\"✅ <a href=\\\"{instruction_url}\\\">Инструкция здесь</a>\\n\\n\"\n        \"🔥 Все товары в каталоге ждут тебя!\"\n    )\n\n    keyboard = InlineKeyboardMarkup(\n        inline_keyboard=[\n            [InlineKeyboardButton(text=\"Открыть приложение 🛍\", web_app=WebAppInfo(url=WEB_APP_URL))]\n        ]\n    )\n\n    await message.answer(\n        text,\n        reply_markup=keyboard,\n        parse_mode=\"HTML\",\n        disable_web_page_preview=True,\n    )\n\n\nasync def main():\n    \"\"\"Run the bot.\"\"\"\n    await dp.start_polling(bot)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"
  },
  {
    "path": "notificator/settings.json",
    "content": "{\n  \"db\": {\n    \"host\": \"db\",\n    \"port\": 5432,\n    \"user\": \"wbuser\",\n    \"password\": \"wbpassword\",\n    \"name\": \"postgres\"\n  },\n  \"bot\": {\n    \"local\": \"7782070677:AAHtu78aPEQSf15dYsXJbBhcbfMoz7bDXQg\",\n    \"dev\": \"7923150921:AAGAUkeu-dfp_fXkwTwb3HQZZlYEf66MzYg\",\n  }\n}\n"
  },
  {
    "path": "notificator/requirements.txt",
    "content": "annotated-types==0.7.0\nanyio==4.9.0\nasyncpg==0.30.0\ncertifi==2025.1.31\ngreenlet==3.1.1\nh11==0.14.0\nhttpcore==1.0.7\nhttpx==0.28.1\nidna==3.10\npydantic==2.11.3\npydantic-settings==2.8.1\npydantic_core==2.33.1\npython-dotenv==1.1.0\nsniffio==1.3.1\nSQLAlchemy==2.0.40\ntyping-inspection==0.4.0\ntyping_extensions==4.13.1\n"
  },
  {
    "path": "notificator/Dockerfile",
    "content": "# ------------------------------------------\n# Stage 1: Build dependencies and install Python packages\n# ------------------------------------------\nARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1\n\n# Install build dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y gcc libpq-dev wget && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# Install Python dependencies\nCOPY ./requirements.txt .\nRUN pip install --upgrade pip && \\\n    pip install --prefix=/install -r requirements.txt\n\n# ------------------------------------------\n# Stage 2: Final runtime image\n# ------------------------------------------\nFROM python:${PYTHON_VERSION}-slim AS runtime\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    ENVIRONMENT=dev\n\nWORKDIR /app\n\n# Copy installed Python packages from builder stage\nCOPY --from=builder /install /usr/local\n\n# Copy application code\nCOPY . .\n\n#ENTRYPOINT [\"sh\", \"-c\", \"uvicorn main:app --host 0.0.0.0 --port 8080\"]\n"
  },
  {
    "path": "notificator/settings.py",
    "content": "import os\nfrom pathlib import Path\nfrom typing import Type, Tuple\n\nfrom pydantic import SecretStr\nfrom pydantic_settings import (\n    BaseSettings,\n    SettingsConfigDict,\n    PydanticBaseSettingsSource,\n    JsonConfigSettingsSource,\n)\n\n\nclass DBSettings(BaseSettings):\n    host: str\n    port: int\n    name: str\n    user: str\n    password: SecretStr\n\n    @property\n    def url(self):\n        return (\n            f\"postgresql+asyncpg://{self.user}:{self.password.get_secret_value()}@\"\n            f\"{self.host}:{self.port}/{self.name}\"\n        )\n\nclass BotTokenSettings(BaseSettings):\n      local: str\n      dev: str\n  \n      @property\n      def token(self) -> str:\n          match os.getenv(\"ENVIRONMENT\", \"local\"):\n              case \"dev\":\n                  return self.dev\n              case \"local\":\n                  return self.local\n  \n\nclass Settings(BaseSettings):\n    db: DBSettings\n\n    bot: BotTokenSettings\n\n    debug: bool = True\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n    @classmethod\n    def settings_customise_sources(\n            cls,\n            settings_cls: Type[BaseSettings],\n            init_settings: PydanticBaseSettingsSource,\n            env_settings: PydanticBaseSettingsSource,\n            dotenv_settings: PydanticBaseSettingsSource,\n            file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            JsonConfigSettingsSource(settings_cls),  # Fallback to JSON\n        )\n\n\nsettings = Settings()\n"
  },
  {
    "path": "notificator/main.py",
    "content": "import asyncio\nimport logging\n\nfrom dependencies.services.consumer import get_consumer\nfrom dependencies.services.notification import get_notificator\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\n\nasync def main():\n    logger.info(\"Initializing service...\")\n\n    consumer = get_consumer()\n    notificator = get_notificator()\n\n    logger.info(\"Service initialized, starting...\")\n\n    try:\n        await consumer.execute(notificator)\n    except KeyboardInterrupt:\n        logger.info(\"Shutting down...\")\n    except Exception as e:\n        logger.error(\"Unexpected exception\", exc_info=True)\n    finally:\n        logger.info(\"Service has been successfully shut down\")\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n"
  },
  {
    "path": "notificator/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/dependencies/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/dependencies/repositories/session_maker.py",
    "content": "from sqlalchemy.ext.asyncio import async_sessionmaker\n\nfrom infrastructure import session_maker\n\n\ndef get_session_maker() -> async_sessionmaker:\n    return session_maker"
  },
  {
    "path": "notificator/dependencies/repositories/user_push.py",
    "content": "from abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.db.repositories.user_push import UserPushRepository\n\n\ndef get_user_push_repository() -> UserPushRepositoryInterface:\n    return UserPushRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "notificator/dependencies/services/upload.py",
    "content": "from abstractions.services.upload import UploadServiceInterface\nfrom services.upload import UploadService\n\n\ndef get_upload_service() -> UploadServiceInterface:\n    return UploadService(\n\n    )\n"
  },
  {
    "path": "notificator/dependencies/services/notification.py",
    "content": "from abstractions.services.notification import NotificationServiceInterface\nfrom dependencies.repositories.user_push import get_user_push_repository\nfrom services.notification import Notificator\nfrom settings import settings\n\n\ndef get_notificator() -> NotificationServiceInterface:\n    return Notificator(\n        token=settings.bot.token,\n        notifications_repository=get_user_push_repository(),\n    )\n"
  },
  {
    "path": "notificator/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/dependencies/services/consumer.py",
    "content": "from abstractions.services.consumer import ConsumerInterface\nfrom dependencies.repositories.user_push import get_user_push_repository\nfrom dependencies.services.notification import get_notificator\nfrom services.consumer import Consumer\n\n\ndef get_consumer() -> ConsumerInterface:\n    return Consumer(\n        notification_repository=get_user_push_repository(),\n    )\n"
  },
  {
    "path": "notificator/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/abstractions/repositories/user.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\nfrom domain.models import User\n\n\nclass UserRepositoryInterface(\n    CRUDRepositoryInterface[User, CreateUserDTO, UpdateUserDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_by_telegram_id(self, telegram_id: str) -> Optional[User]:\n        ...\n\n    @abstractmethod\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\n        ...\n\n    @abstractmethod\n    async def get_moderators(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_sellers(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def get_banned(self) -> list[User]:\n        ...\n\n    @abstractmethod\n    async def become_seller(self, user_id: UUID):\n        ...\n\n\n"
  },
  {
    "path": "notificator/abstractions/repositories/__init__.py",
    "content": "from .crud import CRUDRepositoryInterface\n"
  },
  {
    "path": "notificator/abstractions/repositories/user_push.py",
    "content": "from abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\nfrom domain.models.user_push import UserPush\nfrom infrastructure.db.enums.push_status import PushStatus\n\n\nclass UserPushRepositoryInterface(\n    CRUDRepositoryInterface[UserPush, CreateUserPushDTO, UpdateUserPushDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\n        ...\n\n    @abstractmethod\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\n        ...\n"
  },
  {
    "path": "notificator/abstractions/repositories/crud.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\n\nclass CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO](ABC):\n    @abstractmethod\n    async def create(self, obj: CreateDTO) -> None:\n        pass\n\n    @abstractmethod\n    async def get(self, obj_id: UUID) -> Model:\n        pass\n\n    @abstractmethod\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\n        pass\n\n    @abstractmethod\n    async def delete(self, obj_id: UUID) -> None:\n        pass\n\n    @abstractmethod\n    async def get_all(self, limit: int = 100, offset: int = 0) -> list[Model]:\n        pass\n"
  },
  {
    "path": "notificator/abstractions/services/upload.py",
    "content": "from abc import ABC, abstractmethod\n\n\nclass UploadServiceInterface(ABC):\n    @abstractmethod\n    def get_filepath(self, filename: str) -> str:\n        ...\n"
  },
  {
    "path": "notificator/abstractions/services/notification.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom domain.models import UserPush\n\n\nclass NotificationServiceInterface(ABC):\n    @abstractmethod\n    async def send_notification(self, notification: UserPush) -> None:\n        ...\n"
  },
  {
    "path": "notificator/abstractions/services/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/abstractions/services/consumer.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import NoReturn\n\nfrom abstractions.services.notification import NotificationServiceInterface\n\n\nclass ConsumerInterface(ABC):\n    @abstractmethod\n    async def execute(self, notificator: NotificationServiceInterface) -> NoReturn:\n        ...\n"
  },
  {
    "path": "notificator/infrastructure/__init__.py",
    "content": "from .db import session_maker\nfrom .db.entities import (\n    User\n)"
  },
  {
    "path": "notificator/infrastructure/db/__init__.py",
    "content": "from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker\n\nfrom settings import settings\n\n__all__ = [\n    \"session_maker\",\n]\n\n\nengine = create_async_engine(settings.db.url, echo=False, pool_recycle=1800, pool_timeout=30)\nsession_maker = async_sessionmaker(engine, expire_on_commit=False)\n"
  },
  {
    "path": "notificator/infrastructure/db/entities.py",
    "content": "from datetime import datetime\nfrom typing import Optional, List\nfrom uuid import UUID as pyUUID\n\nfrom sqlalchemy import DateTime, ForeignKey, UUID, BigInteger, Enum\nfrom sqlalchemy.orm import declarative_base, Mapped, mapped_column, relationship\n\nfrom infrastructure.db.enums import Category, OrderStatus, PayoutTime, ProductStatus, UserRole\nfrom infrastructure.db.enums.push_status import PushStatus\n\nBase = declarative_base()\n\n\nclass AbstractBase(Base):\n    __abstract__ = True\n\n    id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)\n    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, onupdate=datetime.now)\n\n\nclass Product(AbstractBase):\n    __tablename__ = 'products'\n\n    name: Mapped[str]\n    brand: Mapped[str]\n    article: Mapped[str] = mapped_column(unique=True)\n    category: Mapped[Category] = mapped_column(Enum(Category))\n    key_word: Mapped[str]\n    general_repurchases: Mapped[int]\n    daily_repurchases: Mapped[int]\n    price: Mapped[float]\n    wb_price: Mapped[float]\n    tg: Mapped[str]\n    payment_time: Mapped[PayoutTime] = mapped_column(Enum(PayoutTime))\n    review_requirements: Mapped[str]\n    image_path: Mapped[Optional[str]]\n    seller_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\n    status: Mapped[ProductStatus] = mapped_column(Enum(ProductStatus), default=ProductStatus.CREATED)\n\n    reviews: Mapped[List['Review']] = relationship('Review', back_populates='product')\n    orders: Mapped[List['Order']] = relationship('Order', back_populates='product')\n    moderator_reviews: Mapped[list['ModeratorReview']] = relationship('ModeratorReview', back_populates='product')\n\n\nclass User(AbstractBase):\n    __tablename__ = 'users'\n\n    telegram_id: Mapped[Optional[int]] = mapped_column(BigInteger, unique=True)\n    nickname: Mapped[Optional[str]]\n    role: Mapped[UserRole] = mapped_column(Enum(UserRole))\n    is_banned: Mapped[bool]\n    is_seller: Mapped[bool]\n    balance: Mapped[Optional[int]]\n    user_orders: Mapped[List[\"Order\"]] = relationship(\"Order\", foreign_keys=\"Order.user_id\")\n    seller_orders: Mapped[List[\"Order\"]] = relationship(\"Order\", foreign_keys=\"Order.seller_id\")\n    reviews: Mapped[List[\"Review\"]] = relationship(\"Review\", back_populates=\"user\")\n\n\nclass Order(AbstractBase):\n    __tablename__ = 'orders'\n\n    user_id: Mapped[UUID] = mapped_column(ForeignKey(\"users.id\"))\n    product_id: Mapped[UUID] = mapped_column(ForeignKey(\"products.id\"))\n    seller_id: Mapped[UUID] = mapped_column(ForeignKey(\"users.id\"))\n\n    # Чтобы отслеживать, на каком шаге сейчас заказ\n    step: Mapped[int] = mapped_column(default=1)\n\n    # Шаг 1: скриншоты\n    search_screenshot_path: Mapped[Optional[str]]\n    cart_screenshot_path: Mapped[Optional[str]]\n\n    # Шаг 4: реквизиты\n    card_number: Mapped[Optional[str]]\n    phone_number: Mapped[Optional[str]]\n    name: Mapped[Optional[str]]\n    bank: Mapped[Optional[str]]\n\n    # Шаг 5: финальный скрин корзины\n    final_cart_screenshot_path: Mapped[Optional[str]]\n\n    # Шаг 6: скрин доставки, скрин штрихкодов\n    delivery_screenshot_path: Mapped[Optional[str]]\n    barcodes_screenshot_path: Mapped[Optional[str]]\n\n    # Шаг 7: скрин отзывов, скрин электронного чека, номер чека\n    review_screenshot_path: Mapped[Optional[str]]\n    receipt_screenshot_path: Mapped[Optional[str]]\n    receipt_number: Mapped[Optional[str]]\n\n    status: Mapped[OrderStatus] = mapped_column(Enum(OrderStatus), default=\"CASHBACK_NOT_PAID\")\n\n    user: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[user_id], back_populates=\"user_orders\")\n    seller: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[seller_id], back_populates=\"seller_orders\")\n    product: Mapped[\"Product\"] = relationship(\"Product\", foreign_keys=[product_id], back_populates=\"orders\")\n\n\nclass Review(AbstractBase):\n    __tablename__ = 'reviews'\n\n    user_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\n    rating: Mapped[int]\n    comment: Mapped[str]\n\n    user: Mapped['User'] = relationship('User', back_populates='reviews')\n    product: Mapped['Product'] = relationship('Product', back_populates='reviews')\n\n\nclass ModeratorReview(AbstractBase):\n    __tablename__ = 'moderator_reviews'\n    \n    moderator_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\n    product_id: Mapped[UUID] = mapped_column(ForeignKey('products.id'))\n    comment: Mapped[str]\n    status_before: Mapped[ProductStatus]\n    status_after: Mapped[ProductStatus]\n\n    moderator: Mapped['User'] = relationship('User')\n    product: Mapped['Product'] = relationship('Product', back_populates='moderator_reviews')\n\nclass Push(AbstractBase):\n    __tablename__ = 'pushes'\n    title: Mapped[str] = mapped_column(unique=True)\n    text: Mapped[str]\n    creator_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\n    image_path: Mapped[Optional[str]]\n    button_text: Mapped[Optional[str]]\n    button_link: Mapped[Optional[str]]\n\n    deleted_at: Mapped[Optional[datetime]]\n\n    creator: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[creator_id])\n\nclass UserPush(AbstractBase):\n    __tablename__ = 'user_pushes'\n\n    push_id: Mapped[pyUUID] = mapped_column(ForeignKey('pushes.id'))\n    user_id: Mapped[pyUUID] = mapped_column(ForeignKey('users.id'))\n    sent_at: Mapped[Optional[datetime]]\n    status: Mapped[PushStatus]\n\n    push: Mapped[\"Push\"] = relationship(\"Push\")\n    user: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[user_id])\n"
  },
  {
    "path": "notificator/infrastructure/db/enums/user_role.py",
    "content": "from enum import StrEnum\n\n\nclass UserRole(StrEnum):\n    USER = \"user\"\n    MODERATOR = \"moderator\"\n    ADMIN = \"admin\"\n"
  },
  {
    "path": "notificator/infrastructure/db/enums/payout_time.py",
    "content": "from enum import StrEnum\n\nclass PayoutTime(StrEnum):\n    AFTER_REVIEW = \"После отзыва\"\n    AFTER_DELIVERY = \"После получения товара\"\n    ON_15TH_DAY = \"На 15й день\"\n"
  },
  {
    "path": "notificator/infrastructure/db/enums/push_status.py",
    "content": "from enum import StrEnum\n\n\nclass PushStatus(StrEnum):\n    PLANNED = 'planned'\n    IN_PROGRESS = 'in_progress'\n    DELIVERED = 'delivered'\n    FAILED = 'failed'\n"
  },
  {
    "path": "notificator/infrastructure/db/enums/product_status.py",
    "content": "from enum import Enum\n\n\nclass ProductStatus(Enum):\n    CREATED = \"created\"\n    ACTIVE = \"active\"\n    DISABLED = \"disabled\"\n    REJECTED = \"rejected\"  # отклонен совсем\n    ARCHIVED = \"archived\"\n"
  },
  {
    "path": "notificator/infrastructure/db/enums/__init__.py",
    "content": "from .category import Category\nfrom .user_role import UserRole\nfrom .payout_time import PayoutTime\nfrom .order_status import OrderStatus\nfrom .product_status import ProductStatus\n"
  },
  {
    "path": "notificator/infrastructure/db/enums/order_status.py",
    "content": "from enum import StrEnum\n\nclass OrderStatus(StrEnum):\n    CASHBACK_PAID = \"cashback_paid\"\n    CASHBACK_NOT_PAID = \"cashback_not_paid\"\n    CANCELLED = \"cancelled\"\n\n"
  },
  {
    "path": "notificator/infrastructure/db/enums/category.py",
    "content": "from enum import StrEnum\n\nclass Category(StrEnum):\n    WOMEN = \"Женщинам\"\n    MEN = \"Мужчинам\"\n    SHOES = \"Обувь\"\n    KIDS = \"Детям\"\n    HOME = \"Дом\"\n    NEW_YEAR = \"Новый год\"\n    BEAUTY = \"Красота\"\n    ACCESSORIES = \"Аксессуары\"\n    ELECTRONICS = \"Электроника\"\n    TOYS = \"Игрушки\"\n    FURNITURE = \"Мебель\"\n    ADULT = \"Товары для взрослых\"\n    APPLIANCES = \"Бытовая техника\"\n    PETS = \"Зоотовары\"\n    SPORTS = \"Спорт\"\n    AUTO = \"Автотовары\"\n    JEWELRY = \"Ювелирные изделия\"\n    REPAIR = \"Для ремонта\"\n    GARDEN = \"Сад и дача\"\n    HEALTH = \"Здоровье\"\n    STATIONERY = \"Канцтовары\"\n"
  },
  {
    "path": "notificator/infrastructure/db/repositories/user.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\n\nfrom abstractions.repositories.user import UserRepositoryInterface\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\nfrom domain.models import User as UserModel\nfrom infrastructure.db.entities import User\nfrom infrastructure.db.enums import UserRole\nfrom infrastructure.db.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\n\nclass UserRepository(\n    AbstractSQLAlchemyRepository[User, User, CreateUserDTO, UpdateUserDTO],\n    UserRepositoryInterface\n):\n    async def get_moderators(self) -> list[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.role == UserRole.MODERATOR)\n            )\n\n            result = result.scalars().all()\n\n        return [self.entity_to_model(x) for x in result]\n\n\n    async def get_sellers(self) -> list[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.is_seller == True)\n            )\n\n            result = result.scalars().all()\n\n        return [self.entity_to_model(x) for x in result]\n\n    async def get_banned(self) -> list[UserModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.is_banned == True)\n            )\n\n            result = result.scalars().all()\n\n        return [self.entity_to_model(x) for x in result]\n\n    async def get_by_telegram_id(self, telegram_id: str) -> Optional[User]:\n        async with self.session_maker() as session:\n            result = await session.execute(select(self.entity).where(self.entity.telegram_id == telegram_id))\n            user = result.scalars().first()\n            if user:\n                return self.entity_to_model(user)\n            return None\n\n    async def become_seller(self, user_id: UUID):\n        async with self.session_maker() as session:\n            user = await session.get(self.entity, user_id)\n            async with session.begin():\n                user.is_seller = True\n\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.telegram_id == dto.telegram_id)\n            )\n\n            user = result.scalars().one_or_none()\n        if not user:\n            await self.create(dto)\n\n        return await self.get_by_telegram_id(dto.telegram_id)\n\n    def create_dto_to_entity(self, dto: CreateUserDTO) -> User:\n        return User(\n            id=dto.id,\n            telegram_id=dto.telegram_id,\n            nickname=dto.nickname,\n            is_banned=False,\n            is_seller=False,\n            role=UserRole(dto.role),\n            balance=0,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: User) -> UserModel:\n        return UserModel(\n            id=entity.id,\n            telegram_id=entity.telegram_id,\n            nickname=entity.nickname,\n            role=entity.role,\n            balance=entity.balance,\n            is_banned=entity.is_banned,\n            is_seller=entity.is_seller,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at\n        )\n"
  },
  {
    "path": "notificator/infrastructure/db/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/infrastructure/db/repositories/user_push.py",
    "content": "from dataclasses import field, dataclass\nfrom datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\n\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom domain.dto.user_push import CreateUserPushDTO, UpdateUserPushDTO\nfrom domain.models import UserPush as UserPushModel, User as UserModel, Push as PushModel\nfrom infrastructure.db.entities import UserPush, User, Push\nfrom infrastructure.db.enums.push_status import PushStatus\nfrom infrastructure.db.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\n@dataclass\nclass UserPushRepository(\n    AbstractSQLAlchemyRepository[UserPush, UserPushModel, CreateUserPushDTO, UpdateUserPushDTO],\n    UserPushRepositoryInterface\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        'user': None,\n        'push': None,\n    })\n\n    async def set_status(self, user_push_id: UUID, status: PushStatus, sent_at: Optional[datetime] = None):\n        async with self.session_maker() as session:\n            async with session.begin():\n                user_push = await session.get(self.entity, user_push_id)\n                user_push.status = status\n                if sent_at:\n                    user_push.sent_at = sent_at\n\n    async def get_queued_pushes(self, size: int = 10) -> list[UserPush]:\n        async with self.session_maker() as session:\n            res = await session.execute(\n                select(self.entity)\n                .where(self.entity.status == PushStatus.PLANNED)\n                .options(*self.options)\n                .order_by(self.entity.created_at)\n                .limit(size)\n            )\n            res = res.unique().scalars().all()\n\n        return [self.entity_to_model(x) for x in res]  # noqa\n\n    def create_dto_to_entity(self, dto: CreateUserPushDTO) -> UserPush:\n        return UserPush(\n            id=dto.id,\n            push_id=dto.push_id,\n            user_id=dto.user_id,\n            sent_at=dto.sent_at,\n            status=PushStatus.PLANNED,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: UserPush) -> UserPushModel:\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                nickname=user.nickname,\n                role=user.role,\n                balance=user.balance,\n                is_banned=user.is_banned,\n                is_seller=user.is_seller,\n                created_at=user.created_at,\n                updated_at=user.updated_at,\n            )\n\n        def _map_push(push: Push) -> PushModel:\n            return PushModel(\n                id=push.id,\n                title=push.title,\n                text=push.text,\n                creator_id=push.creator_id,\n                image_path=push.image_path,\n                button_text=push.button_text,\n                button_link=push.button_link,\n                created_at=push.created_at,\n                updated_at=push.updated_at\n            )\n\n        return UserPushModel(\n            id=entity.id,\n            push_id=entity.push_id,\n            user_id=entity.user_id,\n            sent_at=entity.sent_at,\n            status=entity.status,\n            user=_map_user(entity.user) if entity.user else None,\n            push=_map_push(entity.push) if entity.push else None,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at\n        )\n"
  },
  {
    "path": "notificator/infrastructure/db/repositories/sqlalchemy.py",
    "content": "import logging\nfrom abc import abstractmethod\nfrom dataclasses import dataclass, field\nfrom typing import Type, Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\nfrom sqlalchemy.exc import NoResultFound\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\nfrom sqlalchemy.orm import joinedload, InstrumentedAttribute\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom .exceptions import NotFoundException\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass AbstractSQLAlchemyRepository[Entity, Model, CreateDTO, UpdateDTO](\n    CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO]\n):\n    session_maker: async_sessionmaker\n\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=dict)\n    options: list = field(default_factory=list)\n\n    def __post_init__(self):\n        self.entity: Type[Entity] = self.__orig_bases__[0].__args__[0]  # noqa\n        self._set_lazy_fields()\n\n    def _set_lazy_fields(self):\n        if not self.joined_fields:\n            return\n\n        def convert_to_nested_dict(fields):\n            return {field: {} for field in (fields or [])}\n\n        def get_associated_entity_class(attr_field):\n            \"\"\"\n            Extract the associated entity class from an InstrumentedAttribute.\n            \"\"\"\n            if hasattr(attr_field, \"comparator\") and hasattr(attr_field.comparator, \"prop\"):\n                relationship_prop = attr_field.comparator.prop\n                if hasattr(relationship_prop, \"mapper\"):\n                    return relationship_prop.mapper.entity\n            return None\n\n        def build_joinedload(attr_field, subfields, depth=0):\n            \"\"\"\n            Recursively build joinedload options for nested relationships.\n            \"\"\"\n            associated_entity = get_associated_entity_class(attr_field)\n            if not associated_entity:\n                raise ValueError(f\"Cannot determine associated entity class for attribute {attr_field}\")\n\n            loader = joinedload(attr_field)\n            for subfield, nested_subfields in subfields.items():\n                nested_attr_field = getattr(associated_entity, subfield, None)\n                if nested_attr_field is None:\n                    raise ValueError(f\"{subfield} is not a valid attribute of {associated_entity}\")\n\n                subloader = build_joinedload(nested_attr_field, nested_subfields, depth + 1)\n                loader = loader.options(subloader)\n            return loader\n\n        # Convert self.joined_fields to nested dictionaries if not already\n        joined_fields = {}\n        for field in self.joined_fields:\n            joined_fields[field] = convert_to_nested_dict(self.joined_fields[field])\n\n        options_to_add = []\n        for attr, subfields in joined_fields.items():\n            attr_field: InstrumentedAttribute = getattr(self.entity, attr)\n            if attr_field.comparator.prop.uselist:\n                loader = build_joinedload(attr_field, subfields or {})\n                options_to_add.append(loader)\n            else:\n                options_to_add.append(joinedload(attr_field))\n\n        self.options.extend(options_to_add)\n\n    async def create(self, obj: CreateDTO) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                session.add(self.create_dto_to_entity(obj))\n\n    async def get(self, obj_id: UUID) -> Model:\n        async with self.session_maker() as session:\n            try:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.id == obj_id)\n                        .options(*self.options)\n                    )\n                    obj = res.unique().scalars().one()\n                else:\n                    obj = await session.get(self.entity, obj_id)\n                return self.entity_to_model(obj)\n            except NoResultFound:\n                raise NotFoundException\n\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                entity = await session.get(self.entity, obj_id)\n                for key, value in obj.model_dump(exclude_unset=True).items():\n                    setattr(entity, key, value)\n\n    async def delete(self, obj_id: UUID) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                obj = await session.get(self.entity, obj_id)\n                await session.delete(obj)\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Model]:\n        async with self.session_maker() as session:\n            if joined:\n                if self.options:\n                    return [\n                        self.entity_to_model(entity)\n                        for entity in (await session.execute(\n                            select(self.entity)\n                            .limit(limit)\n                            .offset(offset)\n                            .options(*self.options)\n                        )).unique().scalars().all()\n                    ]\n            res = (await session.execute(\n                select(self.entity)\n                .limit(limit)\n                .offset(offset)\n            )).scalars().all()\n            return [\n                self.entity_to_model(entity)\n                for entity in res\n            ]\n\n    @abstractmethod\n    def entity_to_model(self, entity: Entity) -> Model:\n        ...\n\n    @abstractmethod\n    def create_dto_to_entity(self, dto: CreateDTO) -> Entity:\n        ...\n"
  },
  {
    "path": "notificator/infrastructure/db/repositories/exceptions.py",
    "content": "class NotFoundException(Exception):\n    ...\n"
  },
  {
    "path": "notificator/domain/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/domain/dto/abstract.py",
    "content": "from datetime import datetime\nfrom uuid import UUID, uuid4\n\nfrom pydantic import BaseModel, Field\n\n\nclass CreateDTO(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n\n\nclass UpdateDTO(BaseModel):\n    updated_at: datetime = Field(default_factory=datetime.now)\n"
  },
  {
    "path": "notificator/domain/dto/user.py",
    "content": "from typing import Optional\n\nfrom pydantic import Field\n\nfrom .abstract import CreateDTO, UpdateDTO\nfrom infrastructure.db.enums import UserRole\n\n\nclass CreateUserDTO(CreateDTO):\n    telegram_id: Optional[int]\n    nickname: Optional[str] = None\n    role: str = Field(default=UserRole.USER)\n\n\n\nclass UpdateUserDTO(UpdateDTO):\n    telegram_id: Optional[int] = None\n    nickname: Optional[str] = None\n    role: Optional[str] = None\n    is_banned: Optional[bool] = None\n    is_seller: Optional[bool] = None\n    balance: Optional[int] = None\n\n"
  },
  {
    "path": "notificator/domain/dto/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/domain/dto/user_push.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom infrastructure.db.enums.push_status import PushStatus\nfrom .abstract import CreateDTO, UpdateDTO\nfrom domain.models import User, Push\n\n\nclass CreateUserPushDTO(CreateDTO):\n    push_id: UUID\n    user_id: UUID\n    sent_at: Optional[datetime]\n    push: Push\n    user: User\n\nclass UpdateUserPushDTO(UpdateDTO):\n    push_id: Optional[UUID] = None\n    user_id: Optional[UUID] = None\n    sent_at: Optional[datetime] = None\n    status: Optional[PushStatus] = None\n"
  },
  {
    "path": "notificator/domain/dto/push.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom .abstract import CreateDTO, UpdateDTO\n\n\nclass CreatePushDTO(CreateDTO):\n    title: str\n    text: str\n    creator_id: UUID\n    image_path: Optional[str] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n\n\nclass UpdatePushDTO(UpdateDTO):\n    title: Optional[str] = None\n    text: Optional[str] = None\n    creator_id: Optional[UUID] = None\n    image_path: Optional[str] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n"
  },
  {
    "path": "notificator/domain/dto/notification/__init__.py",
    "content": "from .sending import SendMessageDto, MessageSendingResultDto\n"
  },
  {
    "path": "notificator/domain/dto/notification/sending.py",
    "content": "from datetime import datetime\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass SendMessageDto(BaseModel):\n    text: str\n    chat_id: int\n    image_path: Optional[str] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n\n\nclass MessageSendingResultDto(BaseModel):\n    sent_at: Optional[datetime] = None\n    error: Optional[str] = None\n"
  },
  {
    "path": "notificator/domain/models/abstract.py",
    "content": "from datetime import datetime\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass Model(BaseModel):\n    id: UUID\n    created_at: datetime\n    updated_at: datetime\n"
  },
  {
    "path": "notificator/domain/models/user.py",
    "content": "from typing import Optional\n\nfrom pydantic import ConfigDict\n\nfrom infrastructure.db.enums import UserRole\nfrom .abstract import Model\n\n\nclass User(Model):\n    telegram_id: Optional[int] = None\n    nickname: Optional[str] = None\n    role: UserRole\n    is_banned: bool\n    is_seller: bool\n    balance: Optional[int] = None\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "notificator/domain/models/product_to_channel.py",
    "content": "from pydantic import BaseModel\n\nclass ProductToChannel(BaseModel):\n    name: str\n    # url: str\n    # price: float\n    image_url: str\n"
  },
  {
    "path": "notificator/domain/models/notification.py",
    "content": "from typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass Notification(BaseModel):\n    text: str\n    chat_id: int\n    image_path: Optional[str] = None\n"
  },
  {
    "path": "notificator/domain/models/__init__.py",
    "content": "from .user import User\nfrom .user_push import UserPush\nfrom .push import Push\n"
  },
  {
    "path": "notificator/domain/models/user_push.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import ConfigDict\n\nfrom infrastructure.db.enums.push_status import PushStatus\nfrom .abstract import Model\nfrom .push import Push\nfrom .user import User\n\n\nclass UserPush(Model):\n    push_id: UUID\n    user_id: UUID\n    sent_at: Optional[datetime] = None\n    status: PushStatus\n\n    push: Push\n    user: User\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "notificator/domain/models/push.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import ConfigDict\n\nfrom domain.models import User\nfrom .abstract import Model\n\n\nclass Push(Model):\n    title: str\n    text: str\n    creator_id: UUID\n    image_path: Optional[str] = None\n    button_text: Optional[str] = None\n    button_link: Optional[str] = None\n\n    creator: Optional[User] = None\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "notificator/routes/product_to_channel.py",
    "content": "from fastapi import APIRouter, BackgroundTasks\n\nfrom domain.models.product_to_channel import ProductToChannel\nfrom ..services.notification import send_product_to_channel\n\nrouter = APIRouter()\n\n@router.post(\"/notify/product-published\")\nasync def notify_product_published(payload: ProductToChannel, background_tasks: BackgroundTasks):\n    background_tasks.add_task(\n        send_product_to_channel,\n        # name=payload.name,\n        # url=payload.url,\n        # price=payload.price,\n        image_url=payload.image_url\n    )\n    return {\"status\": \"ok\"}\n"
  },
  {
    "path": "notificator/services/upload.py",
    "content": "import os\nfrom dataclasses import field, dataclass\n\nfrom abstractions.services.upload import UploadServiceInterface\n\n\n@dataclass\nclass UploadService(UploadServiceInterface):\n    images_dir: str = field(default=\"/app/upload\")\n\n    def get_filepath(self, filename: str) -> str:\n        return os.path.join(self.images_dir, filename)\n"
  },
  {
    "path": "notificator/services/product_to_channel.py",
    "content": "import httpx\nimport os\nfrom settings import settings\n\nasync def send_product_to_channel(name: str, url: str, price: float, image_url: str):\n    BOT_TOKEN = settings.bot.token\n    CHANNEL_ID = settings.bot.channel_id\n    # caption = f\"<b>Новый товар!</b>\\n{name}\\nЦена: {price} ₽\\n<a href='{url}'>Подробнее</a>\"\n    caption = f\"<b>Новый товар!</b>\\n{name}\\n<a href='{url}'>Подробнее</a>\"\n\n    api_url = f\"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto\"\n    data = {\n        \"chat_id\": CHANNEL_ID,\n        \"caption\": caption,\n        \"parse_mode\": \"HTML\"\n    }\n    async with httpx.AsyncClient() as client:\n        # Передаем URL картинки как photo — Telegram скачает сам\n        data[\"photo\"] = image_url\n        await client.post(api_url, data=data)\n"
  },
  {
    "path": "notificator/services/notification.py",
    "content": "import json\nimport logging\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Optional\nimport os\n\nfrom httpx import AsyncClient\n\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom abstractions.services.notification import NotificationServiceInterface\nfrom dependencies.services.upload import get_upload_service\nfrom domain.dto.notification import SendMessageDto, MessageSendingResultDto\nfrom domain.models.user_push import UserPush\nfrom infrastructure.db.enums.push_status import PushStatus\n\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass Notificator(NotificationServiceInterface):\n    token: str\n    notifications_repository: UserPushRepositoryInterface\n\n    async def send_notification(self, notification: UserPush) -> None:\n        async def set_status(status: PushStatus, sent_at: Optional[datetime] = None):\n            await self.notifications_repository.set_status(\n                user_push_id=notification.id,\n                status=status,\n                sent_at=sent_at,\n            )\n\n        await set_status(PushStatus.IN_PROGRESS)\n\n        upload_service = get_upload_service()\n        message = SendMessageDto(\n            text=notification.push.text,\n            chat_id=notification.user.telegram_id,\n            image_path=upload_service.get_filepath(notification.push.image_path),\n            button_text=notification.push.button_text,\n            button_link=notification.push.button_link,\n        )\n\n        result = await self._send_message(message)\n        if result.sent_at:\n            await set_status(PushStatus.DELIVERED, datetime.now())\n        if result.error:\n            await set_status(PushStatus.FAILED)\n            logger.error(result.error)\n\n    async def _send_message(self, message: SendMessageDto) -> MessageSendingResultDto:\n        try:\n            reply_markup = None\n            # Use the web_app field for a miniapp button\n            if message.button_text and message.button_link:\n                inline_keyboard = [[{\"text\": message.button_text, \"web_app\": {\"url\": message.button_link}}]]\n                reply_markup = json.dumps({\"inline_keyboard\": inline_keyboard})\n\n            async with AsyncClient() as client:\n                if message.image_path:\n                    with open(message.image_path, \"rb\") as image_file:\n                        filename = os.path.basename(message.image_path)\n                        files = {\n                            \"photo\": (filename, image_file, \"application/octet-stream\")\n                        }\n                        data = {\n                            \"chat_id\": message.chat_id,\n                            \"caption\": message.text,\n                        }\n                        if reply_markup:\n                            data[\"reply_markup\"] = reply_markup\n                        url = f'https://api.telegram.org/bot{self.token}/sendPhoto'\n                        response = await client.post(url, data=data, files=files)\n                else:\n                    params = {\n                        \"chat_id\": message.chat_id,\n                        \"text\": message.text,\n                    }\n                    if reply_markup:\n                        params[\"reply_markup\"] = reply_markup\n                    url = f'https://api.telegram.org/bot{self.token}/sendMessage'\n                    response = await client.post(url, params=params)\n\n                response.raise_for_status()\n\n            return MessageSendingResultDto(sent_at=datetime.now())\n        except Exception as e:\n            logger.exception(\"Error sending message\")\n            return MessageSendingResultDto(error=str(e))\n"
  },
  {
    "path": "notificator/services/__init__.py",
    "content": ""
  },
  {
    "path": "notificator/services/consumer.py",
    "content": "import logging\nfrom asyncio import sleep\nfrom dataclasses import dataclass, field\nfrom typing import NoReturn\n\nfrom abstractions.repositories.user_push import UserPushRepositoryInterface\nfrom abstractions.services.consumer import ConsumerInterface\nfrom abstractions.services.notification import NotificationServiceInterface\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass Consumer(ConsumerInterface):\n    notification_repository: UserPushRepositoryInterface\n\n    global_notification_delay: int = field(default=1)\n    inner_notification_delay: int = field(default=1)\n\n    async def execute(self, notificator: NotificationServiceInterface) -> NoReturn:\n        logger.info(\"Consumer started\")\n        while True:\n            notifications_to_send = await self.notification_repository.get_queued_pushes()\n            for notification in notifications_to_send:\n                await notificator.send_notification(notification)\n                await sleep(self.inner_notification_delay)\n\n            await sleep(self.global_notification_delay)\n"
  }
]