import React, {useEffect, useRef, useState} from 'react';
import {useLocation, useNavigate, useParams} from 'react-router-dom';
import {getOrderById, getOrderReport, updateOrder} from '../../services/api';
import GetUploadLink from "../../components/GetUploadLink";
import {VideoOverlay} from "../../App";
import OrderHeader from "../../components/OrderHeader";


interface OrderReport {
    step: number;
    search_screenshot_path?: string;
    cart_screenshot_path?: string;
    card_number?: string;
    phone_number?: string;
    name?: string;
    bank?: string;
    final_cart_screenshot_path?: string;
    delivery_screenshot_path?: string;
    barcodes_screenshot_path?: string;
    review_screenshot_path?: string;
    receipt_screenshot_path?: string;
    receipt_number?: string;
    article: string;
}

interface Order {
    id: string;
    product: Product;
    seller: User
    transaction_code: string;
}

interface User {
    nickname: string
}

interface Product {
    id: string;
    name: string;
    description?: string;
    price: number;
    article: string;
    image_path?: string;
    wb_price: number;
    payment_time: string;
    shortDescription?: string;
    seller_id: string;
}

function PaymentDetailsPage() {
    const navigate = useNavigate();
    const {orderId} = useParams<{ orderId: string }>();

    const [cardNumber, setCardNumber] = useState('');
    const [phoneNumber, setPhoneNumber] = useState('');
    const [fullName, setFullName] = useState('');
    const [selectedBank, setSelectedBank] = useState('');
    const [reportData, setReportData] = useState<OrderReport | null>(null);
    const [showReport, setShowReport] = useState(false);
    const [agreed, setAgreed] = useState(false);
    const [otherBank, setOtherBank] = useState('');
    const [expandedSteps, setExpandedSteps] = useState<Record<number, boolean>>({});
    const [order, setOrder] = useState<Order | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const location = useLocation();
    const cameFromOrders = Boolean(location.state?.fromOrders);
    const handleHomeClick = () => navigate('/');
    const [openSrc, setOpenSrc] = useState<string | null>(null);
    const videoRef = useRef<HTMLVideoElement>(null);
    const toggleStep = (step: number) => {
        setExpandedSteps(prev => ({...prev, [step]: !prev[step]}));
    };
    const handleChange = (e: any) => {
        setSelectedBank(e.target.value);
        if (e.target.value !== '–î—Ä—É–≥–æ–µ') {
            setOtherBank('');
        }
    };
    const canContinue =
        cardNumber.trim() !== '' &&
        phoneNumber.trim() !== '' &&
        fullName.trim() !== '' &&
        selectedBank !== '' &&
        agreed;


    useEffect(() => {
        if (!orderId) return;
        Promise.all([
            getOrderById(orderId).then(res => setOrder(res.data)),
            getOrderReport(orderId).then(res => setReportData(res.data))
        ])
            .catch(err => setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'))
            .finally(() => setLoading(false));
    }, [orderId]);


    const handleContinueClick = async () => {
        if (!canContinue || !orderId) return;
        try {
            await updateOrder(orderId, {
                step: 4,
                card_number: cardNumber,
                phone_number: phoneNumber,
                name: fullName,
                bank: selectedBank,
            });
            navigate(`/order/${orderId}/step-5`);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
        }
    };

    const handleSupportClick = () => {
        if (window.Telegram?.WebApp?.close) {
            window.Telegram.WebApp.close();
        }
        window.open(process.env.REACT_APP_SUPPORT_URL, '_blank');
    };

    if (loading) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    if (error || !order) return <div className="p-4 text-red-600">{error || '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}</div>;


    const videos = [
        {
            id: 1,
            title: 'üé• –ö–∞–∫ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±—ç–∫–∞ –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
            src: 'https://storage.googleapis.com/images_avocado/VideoCashback/8%20Buyer%20Step%204%20Fill%20in%20the%20details%20If%20you%20have%20entered%20the%20wrong%20details%2C%20how%20to%20contact%20technical%20support%20Step%205.MP4',
        },

    ];

    return (
        <div className="p-4 max-w-screen-md bg-gray-200 mx-auto">
            {cameFromOrders && (
                <div className="bg-green-50 border-l-4 border-green-500 text-green-800 p-4 mb-6 rounded">
                    <p className="font-semibold">
                        –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–º —à–∞–≥–µ.
                    </p>
                    <p>–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–∫—É–ø.</p>
                </div>
            )}

            <div className="bg-white border border-brand rounded-lg shadow p-4">
                <p className="text-xs text-gray-500"><strong>–í–ê–ñ–ù–û!</strong> –í–´ –í–°–ï–ì–î–ê –ú–û–ñ–ï–¢–ï –í–ï–†–ù–£–¢–¨–°–Ø –ö –≠–¢–û–ú–£ –®–ê–ì–£ –í
                    –†–ê–ó–î–ï–õ–ï "–ú–û–ò
                    –ü–û–ö–£–ü–ö–ò"</p>
                {order && <OrderHeader transactionCode={order.transaction_code} />}
            <div className="space-y-4">

                <h1 className="text-lg font-bold mb-2 text-brand">–®–∞–≥ 4. –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±—ç–∫–∞</h1>
                <p>1) –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±—ç–∫–∞:</p>
                <ul className="list-disc list-inside pl-4 space-y-1">
                    <li>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.</li>
                    <li>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</li>
                    <li>–§–∞–º–∏–ª–∏—è –∏ –∏–º—è.</li>
                </ul>
                <p>
                    <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–Ω–∫–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–µ.
                </p>
                <p>
                    2) –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ{' '}
                    <span className="underline">
    –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ
  </span>.<br/>
                    –ö–µ—à–±—ç–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–ª–∞—á–µ–Ω –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç—É, —Ç–∞–∫ –∏ —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞.
                </p>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                        –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                    </label>
                    <input
                        type="text"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
                        value={cardNumber}
                        onChange={(e) => setCardNumber(e.target.value)}
                        className="w-full border border-darkGray rounded p-2 text-sm"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    </label>
                    <input
                        type="text"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                        value={phoneNumber}
                        onChange={(e) => setPhoneNumber(e.target.value)}
                        className="w-full border border-darkGray rounded p-2 text-sm"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                        –§–∞–º–∏–ª–∏—è –∏ –∏–º—è
                    </label>
                    <input
                        type="text"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è"
                        value={fullName}
                        onChange={(e) => setFullName(e.target.value)}
                        className="w-full border border-darkGray rounded p-2 text-sm"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                        –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫. <br/>
                        <strong>–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–Ω–∫–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–µ.</strong>
                    </label>
                    <select
                        value={selectedBank}
                        onChange={handleChange}
                        className="w-full border border-darkGray rounded p-2 text-sm"
                    >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                        <option value="–°–±–µ—Ä–±–∞–Ω–∫">–°–±–µ—Ä–±–∞–Ω–∫</option>
                        <option value="–¢–∏–Ω—å–∫–æ—Ñ—Ñ">–¢–∏–Ω—å–∫–æ—Ñ—Ñ</option>
                        <option value="–ê–ª—å—Ñ–∞-–±–∞–Ω–∫">–ê–ª—å—Ñ–∞-–±–∞–Ω–∫</option>
                        <option value="–í–¢–ë">–í–¢–ë</option>
                        <option value="–†–Ω–∫–±">–†–Ω–∫–±</option>
                        <option value="–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫">–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫</option>
                        <option value="–û—Ç–∫—Ä—ã—Ç–∏–µ">–û—Ç–∫—Ä—ã—Ç–∏–µ</option>
                        <option value="–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –±–∞–Ω–∫">–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –±–∞–Ω–∫</option>
                        <option value="–û–∑–æ–Ω –±–∞–Ω–∫">–û–∑–æ–Ω –±–∞–Ω–∫</option>
                        <option value="–£–ë–†–∏–†">–£–ë–†–∏–†</option>
                        <option value="–•–æ—É–º –∫—Ä–µ–¥–∏—Ç">–•–æ—É–º –∫—Ä–µ–¥–∏—Ç</option>
                        <option value="–Ø–Ω–¥–µ–∫—Å">–Ø–Ω–¥–µ–∫—Å</option>
                        <option value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
                    </select>
                    {selectedBank === '–î—Ä—É–≥–æ–µ' && (
                        <div className="mt-2">
                            <label className="block text-sm font-medium text-gray-700">–í–≤–µ–¥–∏—Ç–µ –±–∞–Ω–∫</label>
                            <input
                                type="text"
                                value={otherBank}
                                onChange={(e) => setOtherBank(e.target.value)}
                                className="w-full border border-darkGray rounded p-2 text-sm"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞"
                            />
                        </div>
                    )}
                </div>

                <div className="flex items-center space-x-2">
                    <input
                        type="checkbox"
                        id="agreeCorrectness"
                        checked={agreed}
                        onChange={(e) => setAgreed(e.target.checked)}
                        className="w-4 h-4"
                    />
                    <label htmlFor="agreeCorrectness" className="text-sm text-gray-700">
                        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
                    </label>
                </div>
            </div>
            </div>

            <button
                onClick={handleContinueClick}
                disabled={!canContinue}
                className={`w-full py-2 rounded text-brand mb-4 mt-4 ${
                    canContinue
                        ? 'bg-brand text-white'
                        : 'bg-gray-200-400 border border-brand text-brand cursor-not-allowed'
                }`}
            >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </button>

            <button
                onClick={() => navigate(`/black-list/${order.seller.nickname}`)}
                className="w-full flex-1 bg-white text-gray-700 py-2 rounded-lg border border-brand text-center"
            >
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞
            </button>

            <div className="space-y-4 mt-4">

                {videos.map(({id, title, src}) => (
                    <div key={id} className="bg-white rounded-lg shadow p-4">
                        <button
                            className="text-base font-medium mb-2 block text-blue-600 hover:underline"
                            onClick={() => setOpenSrc(src)}
                        >
                            {title}
                        </button>
                    </div>
                ))}

                <div className="flex flex-col gap-3 mt-4">
                    <button
                        onClick={() => setShowReport(prev => !prev)}
                        className="bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center justify-center"
                    >
                        {showReport ? '–°–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç' : '–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç'}
                    </button>


                    {showReport && (
                        <div className="bg-white rounded-lg shadow p-4 mb-4">
                            <h3 className="text-lg font-bold mb-2">–û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ –≤—ã–∫—É–ø–∞ —Ç–æ–≤–∞—Ä–∞</h3>
                            {reportData ? (
                                <div className="space-y-2">
                                    {/* –®–∞–≥ 1 */}
                                    <div className="bg-white rounded-lg shadow">
                                        <button
                                            onClick={() => toggleStep(1)}
                                            className="w-full flex justify-between items-center p-4 text-left"
                                        >
                                            <span className="font-semibold">–®–∞–≥ 1. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –∫–æ—Ä–∑–∏–Ω—ã</span>
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                className={`w-5 h-5 transform transition-transform ${
                                                    expandedSteps[1] ? 'rotate-180' : ''
                                                }`}
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                            >
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2}
                                                      d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        </button>
                                        {expandedSteps[1] && (
                                            <div className="border-t p-4 space-y-3">
                                                {reportData.search_screenshot_path && (
                                                    <div>
                                                        <p className="text-sm font-semibold">–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ WB</p>
                                                        <img
                                                            src={GetUploadLink(reportData.search_screenshot_path)}
                                                            alt="–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ WB"
                                                            className="mt-1 w-full rounded"
                                                        />
                                                    </div>
                                                )}
                                                {reportData.cart_screenshot_path && (
                                                    <div>
                                                        <p className="text-sm font-semibold">–°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ—Ä–∑–∏–Ω—ã –≤ WB</p>
                                                        <img
                                                            src={GetUploadLink(reportData.cart_screenshot_path)}
                                                            alt="–°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ—Ä–∑–∏–Ω—ã –≤ WB"
                                                            className="mt-1 w-full rounded"
                                                        />
                                                    </div>
                                                )}
                                            </div>
                                        )}
                                    </div>

                                    {/* –®–∞–≥ 2 */}
                                    <div className="bg-white rounded-lg shadow">
                                        <button
                                            onClick={() => toggleStep(2)}
                                            className="w-full flex justify-between items-center p-4 text-left"
                                        >
                                            <span className="font-semibold"> –®–∞–≥ 2. –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞</span>
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                className={`w-5 h-5 transform transition-transform ${
                                                    expandedSteps[2] ? 'rotate-180' : ''
                                                }`}
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                            >
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2}
                                                      d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        </button>
                                        {expandedSteps[2] && (
                                            <div className="border-t p-4">
                                                <p className="text-sm">{reportData.article}</p>
                                            </div>
                                        )}
                                    </div>

                                    {/* –®–∞–≥ 3 */}
                                    <div className="bg-white rounded-lg shadow">
                                        <button
                                            onClick={() => toggleStep(3)}
                                            className="w-full flex justify-between items-center p-4 text-left"
                                        >
                                            <span className="font-semibold">–®–∞–≥ 3. –¢–æ–≤–∞—Ä –∏ –±—Ä–µ–Ω–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                className={`w-5 h-5 transform transition-transform ${
                                                    expandedSteps[3] ? 'rotate-180' : ''
                                                }`}
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                            >
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2}
                                                      d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        </button>
                                        {expandedSteps[3] && (
                                            <div className="border-t p-4">
                                                <p className="text-sm">–í–∞—à —Ç–æ–≤–∞—Ä –∏ –±—Ä–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤
                                                    –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.</p>
                                            </div>
                                        )}
                                    </div>
                                    <div className="bg-white rounded-lg shadow p-4 mt-4 space-y-2 text-sm">
                                        <div className="font-semibold text-black">–®–∞–≥ 4. –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                                            –∫–µ—à–±—ç–∫–∞
                                        </div>
                                        <div className="font-semibold text-gray-400">–®–∞–≥ 5. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</div>
                                        <div className="font-semibold text-gray-400">–®–∞–≥ 6. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞</div>
                                        <div className="font-semibold text-gray-400">–®–∞–≥ 7. –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ –∏ —ç–ª.—á–µ–∫–∞</div>
                                    </div>


                                </div>
                            ) : (
                                <p className="text-sm text-gray-500">–û—Ç—á–µ—Ç –ø–æ–∫–∞ –ø—É—Å—Ç.</p>
                            )}
                        </div>
                    )}

                    <button
                        onClick={() => navigate('/instruction')}
                        className="bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold">
                        <span>–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã–∫—É–ø–∞ —Ç–æ–≤–∞—Ä–∞</span>
                    </button>

                    <button
                        onClick={handleSupportClick}
                        className="bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center justify-center"
                    >
                        –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —à–∞–≥–∞
                    </button>

                    <button
                        onClick={handleHomeClick}
                        className="bg-white border border-darkGray rounded-lg p-3 text-sm font-semibold flex items-center justify-center"
                    >
                        –ù–∞ –≥–ª–∞–≤–Ω—É—é
                    </button>
                </div>

            </div>
            {openSrc && (
                <VideoOverlay onClose={() => setOpenSrc(null)}>
                    <div
                        className="relative bg-black p-4 max-h-[100vh] max-w-[92vw] overflow-auto"
                        onClick={e => e.stopPropagation()}
                    >
                        {/* Close */}
                        <button
                            className="absolute top-2 right-2 z-20 text-white text-2xl"
                            onClick={() => setOpenSrc(null)}
                            aria-label="Close"
                        >
                            &times;
                        </button>

                        <video
                            ref={videoRef}
                            src={openSrc}
                            controls
                            muted
                            playsInline
                            className="block mx-auto max-h-[88vh] max-w-[88vw] object-contain"
                        />
                    </div>
                </VideoOverlay>

            )}

        </div>

    );

}

export default PaymentDetailsPage;
