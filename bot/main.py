import asyncio
import logging
import os
import re
from time import sleep
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

env = os.getenv("ENVIRONMENT", "local")
load_dotenv(dotenv_path=f'{env}.env')

TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')


# ---------- helpers ----------
B64URL_RE = re.compile(r'^[A-Za-z0-9_-]{20,24}$')

def append_query(url: str, **params) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã query –∫ URL."""
    parts = urlparse(url)
    q = dict(parse_qsl(parts.query, keep_blank_values=True))
    q.update({k: v for k, v in params.items() if v is not None})
    new_query = urlencode(q, doseq=True)
    return urlunparse(parts._replace(query=new_query))

def make_webapp_url(base_url: str, ref: str | None) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç ?ref=<token>, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω."""
    if ref and B64URL_RE.match(ref):
        return append_query(base_url, ref=ref)
    return base_url
# -----------------------------
try:
    bot = Bot(token=TOKEN)
except Exception as e:
    logger.error(f"BOT ERROR: {e}", exc_info=True)
    sleep(10000)

dp = Dispatcher()

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è\n\n"
    "–≠—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–µ—à–±—ç–∫–æ–º\n\n"
    "<b>–ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢?</b>\n\n"
    "1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞  \n"
    "2Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫—É –∏ —Å–ª–µ–¥—É–π —à–∞–≥–∞–º  \n"
    "3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π –∫–µ—à–±—ç–∫ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"
    "<b>–ü–û–ß–ï–ú–£ –ú–´?</b>\n\n"
    "üòä 15 000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π  \n"
    "üè≥ –í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Ä—É—á–Ω—É—é  \n"
    "ü´Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 ‚Äì –ø–æ–º–æ–∂–µ–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è  \n"
    "üìù –†–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã ‚Äì —É–±–µ–¥–∏—Å—å —Å–∞–º\n\n"
    "üî• –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∂–¥—É—Ç —Ç–µ–±—è!"
)

@dp.message(CommandStart(deep_link=True))
async def start_with_ref(message: types.Message, command: CommandObject):
    ref_token = command.args  # –æ–∂–∏–¥–∞–µ–º b64url-—Ç–æ–∫–µ–Ω, –±–µ–∑ –ª–µ–≥–∞—Å–∏
    web_app_url = make_webapp_url(WEB_APP_URL, ref_token)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üõç", web_app=WebAppInfo(url=web_app_url))]
        ]
    )
    await message.answer(
        WELCOME_TEXT,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

@dp.message(CommandStart())
async def start_plain(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üõç", web_app=WebAppInfo(url=WEB_APP_URL))]
        ]
    )
    await message.answer(
        WELCOME_TEXT,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
