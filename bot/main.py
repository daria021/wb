import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv

load_dotenv(dotenv_path=f'{os.getenv("ENVIRONMENT", "local")}.env')

TOKEN = os.getenv('TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher()

logger = logging.getLogger(__name__)

@dp.message(CommandStart(deep_link=True))
async def handler(message: types.Message, command: CommandObject):
    arg = command.args
    web_app_url = WEB_APP_URL
    if arg:
        web_app_url += f"?ref={arg}"

    instruction_url = f"{WEB_APP_URL}/instruction"
    text = (
        "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è\n\n"
        "–≠—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–µ—à–±—ç–∫–æ–º\n\n"
        "<b>–ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢?</b>\n\n"
        "1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞  \n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫—É –∏ —Å–ª–µ–¥—É–π —à–∞–≥–∞–º  \n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π –∫–µ—à–±—ç–∫ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"
        "<b>–ü–û–ß–ï–ú–£ –ú–´?</b>\n\n"
        "üòä 15 000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π  \n"
        "üè≥ –í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Ä—É—á–Ω—É—é  \n"
        "ü´Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 ‚Äì –ø–æ–º–æ–∂–µ–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è  \n"
        "üìù –†–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã ‚Äì —É–±–µ–¥–∏—Å—å —Å–∞–º\n\n"
        f"‚úÖ <a href=\"{instruction_url}\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–¥–µ—Å—å</a>\n\n"
        "üî• –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∂–¥—É—Ç —Ç–µ–±—è!"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üõç", web_app=WebAppInfo(url=web_app_url))]
        ]
    )

    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


@dp.message(CommandStart())
async def start(message: types.Message):
    instruction_url = f"{WEB_APP_URL}/instruction"
    text = (
        "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è\n\n"
        "–≠—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–µ—à–±—ç–∫–æ–º\n\n"
        "<b>–ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢?</b>\n\n"
        "1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞  \n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫—É –∏ —Å–ª–µ–¥—É–π —à–∞–≥–∞–º  \n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π –∫–µ—à–±—ç–∫ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"
        "<b>–ü–û–ß–ï–ú–£ –ú–´?</b>\n\n"
        "üòä 15 000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π  \n"
        "üè≥ –í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Ä—É—á–Ω—É—é  \n"
        "ü´Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 ‚Äì –ø–æ–º–æ–∂–µ–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è  \n"
        "üìù –†–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã ‚Äì —É–±–µ–¥–∏—Å—å —Å–∞–º\n\n"
        f"‚úÖ <a href=\"{instruction_url}\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–¥–µ—Å—å</a>\n\n"
        "üî• –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∂–¥—É—Ç —Ç–µ–±—è!"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üõç", web_app=WebAppInfo(url=WEB_APP_URL))]
        ]
    )

    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


async def main():
    """Run the bot."""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
